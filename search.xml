<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>纯CSS绘制三角形（各种角度）</title>
      <link href="/2022/05/07/css3/CHUNCSSHUIZHISANJIAOXING/"/>
      <url>/2022/05/07/css3/CHUNCSSHUIZHISANJIAOXING/</url>
      
        <content type="html"><![CDATA[<blockquote><p>CSS三角形绘制方法，学会了这个，其它的也就简单。</p></blockquote><p>我们的网页因为 CSS 而呈现千变万化的风格。这一看似简单的样式语言在使用中非常灵活，只要你发挥创意就能实现很多比人想象不到的效果。特别是随着 CSS3 的广泛使用，更多新奇的 CSS 作品涌现出来。</p><p>今天给大家带来 CSS 三角形绘制方法</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/98d3c026-ba85-4093-b761-06587e008198.jpg" alt="triangleUp.png" title="triangleUp"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#triangle-up</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/6d6ef951-9bed-4a2e-87a1-073f374b4c31.jpg" alt="triangleDown.png" title="triangleDown"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#triangle-down</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">100px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/a0a5affc-a05b-4015-8ae9-03b5d331f856.jpg" alt="triangleLeft.png" title="triangleLeft"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#triangle-left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/29ef2288-f7b4-479c-8eb5-77dc1f842459.jpg" alt="triangleRight.png" title="triangleRight"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#triangle-right</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/1f824ea2-a882-4d69-827a-693f7f94beba.jpg" alt="triangleTopLeft.png" title="triangleTopLeft"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#triangle-topleft</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/69311735-a1af-49ce-9ca9-e5f2c062421e.jpg" alt="triangleTopRight.png" title="triangleTopRight"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#triangle-topright</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/c0e60bf2-f538-4572-9bc6-2aa32fcd543b.jpg" alt="triangleBottomLeft.png" title="triangleBottomLeft"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#triangle-bottomleft</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/8fa12a1a-126f-4c69-8964-9144d140af9b.jpg" alt="triangleBottomRight.png" title="triangleBottomRight"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#triangle-bottomright</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> CSS3 </tag>
            
            <tag> 三角形 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Pages自定义域名后每次hexo d都会失效解决</title>
      <link href="/2022/05/07/hexo/GITHUBPAGESZIDINGYIYUMINGHOUMEICIHEXODDOUHUISHIXIAOJIEJUE/"/>
      <url>/2022/05/07/hexo/GITHUBPAGESZIDINGYIYUMINGHOUMEICIHEXODDOUHUISHIXIAOJIEJUE/</url>
      
        <content type="html"><![CDATA[<p>在GitHub Pages设置自定义域名之后，发现每次hexo d 后都会失效，又要重新设置，太麻烦了。</p><p>于是，问了一下牛皮的百度老师</p><p>只要在source 目录添加一个新文件CNAME就好</p><p>CNAME –不带任何后缀，这就是全称，里面写的是你的域名</p><p>然后就ok了。</p><p>怎么push都不用再去GitHub Pages设置了</p><p>(^o^)/~</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nuxt.js性能提升 asyncData一次性请求多个接口, asyncData批处理请求</title>
      <link href="/2022/04/15/nuxt/Nuxt.js_AsyncDataYiCiXingQingQiuDuoGeJieKou/"/>
      <url>/2022/04/15/nuxt/Nuxt.js_AsyncDataYiCiXingQingQiuDuoGeJieKou/</url>
      
        <content type="html"><![CDATA[<h2 id="nuxt-js性能提升-asyncData一次性请求多个接口-asyncData批处理请求"><a href="#nuxt-js性能提升-asyncData一次性请求多个接口-asyncData批处理请求" class="headerlink" title="nuxt.js性能提升 asyncData一次性请求多个接口, asyncData批处理请求"></a>nuxt.js性能提升 asyncData一次性请求多个接口, asyncData批处理请求</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Logo /&gt;</span><br><span class="line">      &lt;h1 class=&quot;title&quot;&gt;test_axios&lt;/h1&gt;</span><br><span class="line">      &lt;div class=&quot;links&quot;&gt;</span><br><span class="line">        &lt;a</span><br><span class="line">          href=&quot;https://nuxtjs.org/&quot;</span><br><span class="line">          target=&quot;_blank&quot;</span><br><span class="line">          rel=&quot;noopener noreferrer&quot;</span><br><span class="line">          class=&quot;button--green&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          Documentation</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        &lt;a</span><br><span class="line">          href=&quot;https://github.com/nuxt/nuxt.js&quot;</span><br><span class="line">          target=&quot;_blank&quot;</span><br><span class="line">          rel=&quot;noopener noreferrer&quot;</span><br><span class="line">          class=&quot;button--grey&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          GitHub</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;h1&gt;新的&lt;/h1&gt;</span><br><span class="line">      &lt;h3&gt;IP：&#123;&#123;ip&#125;&#125;&lt;/h3&gt;</span><br><span class="line">      &lt;h3&gt;title:&#123;&#123;title&#125;&#125;&lt;/h3&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">          &lt;li v-for=&quot;(data,index) in list&quot; :key=&quot;index&quot;&gt;&#123;&#123;data.name&#125;&#125;+index:&#123;&#123;index&#125;&#125;&lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  async asyncData (&#123; app &#125;) &#123;</span><br><span class="line">    const $axios = app.$axios</span><br><span class="line">    // 单个请求处理</span><br><span class="line">    const data = await $axios.$get(&#x27;http://192.168.1.181:8001/static/js/JsonData.json&#x27;)</span><br><span class="line">    const seo = data.head</span><br><span class="line">    const list = data.list</span><br><span class="line">    console.log(seo)</span><br><span class="line">    console.log(list)</span><br><span class="line">    // 多个请求批处理</span><br><span class="line">    const [data1, data2, data3] = await Promise.all([</span><br><span class="line">      $axios.$get(&#x27;http://192.168.1.181:8001/static/js/JsonData.json&#x27;),</span><br><span class="line">      $axios.$get(&#x27;http://192.168.1.181:8001/static/js/JsonData2.json&#x27;),</span><br><span class="line">      $axios.$get(&#x27;http://192.168.1.181:8001/static/js/JsonData3.json&#x27;)</span><br><span class="line">    ])</span><br><span class="line">    console.log(data1.head.title)</span><br><span class="line">    console.log(data2.head.title)</span><br><span class="line">    console.log(data3.head.title)</span><br><span class="line">    return &#123; seo, list &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      title: &#x27;首页&#x27;,</span><br><span class="line">      ip: &#x27;0.0.0.0&#x27;,</span><br><span class="line">      list: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  head () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      title: this.seo.title + &#x27;_&#x27; + this.title,</span><br><span class="line">      meta: [</span><br><span class="line">        &#123; hid: &#x27;keywords&#x27;, name: &#x27;keywords&#x27;, content: this.seo.keywords &#125;,</span><br><span class="line">        &#123; hid: &#x27;description&#x27;, name: &#x27;description&#x27;, content: this.seo.description &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line">&lt;style&gt;</span><br><span class="line">.container &#123;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  min-height: 100vh;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  align-items: center;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.title &#123;</span><br><span class="line">  font-family: &quot;Quicksand&quot;, &quot;Source Sans Pro&quot;, -apple-system, BlinkMacSystemFont,</span><br><span class="line">    &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif;</span><br><span class="line">  display: block;</span><br><span class="line">  font-weight: 300;</span><br><span class="line">  font-size: 100px;</span><br><span class="line">  color: #35495e;</span><br><span class="line">  letter-spacing: 1px;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.subtitle &#123;</span><br><span class="line">  font-weight: 300;</span><br><span class="line">  font-size: 42px;</span><br><span class="line">  color: #526488;</span><br><span class="line">  word-spacing: 5px;</span><br><span class="line">  padding-bottom: 15px;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.links &#123;</span><br><span class="line">  padding-top: 15px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nuxt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nuxt </tag>
            
            <tag> asyncData </tag>
            
            <tag> asyncData批处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中的async与await怎么使用</title>
      <link href="/2022/04/07/javascript/JSZhongDeAsyncYuAwaitZenMeShiYong/"/>
      <url>/2022/04/07/javascript/JSZhongDeAsyncYuAwaitZenMeShiYong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这篇文章主要介绍了JS的async/await怎么使用,简单来说，async/await是基于promises的语法糖，使异步代码更易于编写和阅读,下面来看详细的介绍内容吧。需要的小伙伴也可以参考一下</p></blockquote><h2 id="一、async"><a href="#一、async" class="headerlink" title="一、async"></a>一、async</h2><p>async创建一个异步函数来定义一个代码块，在其中运行异步代码;</p><p>怎样变成异步函数呢？以 async 这个关键字开始，它可以被放置在一个函数前面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="title function_">f</span>().<span class="title function_">then</span>(alert); <span class="comment">// 1</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//上下结果一样</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="title function_">f</span>().<span class="title function_">then</span>(alert); <span class="comment">// 1</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//也可以用箭头函数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">hello</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123; <span class="keyword">return</span> <span class="string">&quot;1&quot;</span> &#125;;</span><br><span class="line"><span class="title function_">hello</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value))</span><br><span class="line"><span class="comment">//返回值也可以简化成这样</span></span><br><span class="line"><span class="title function_">hello</span>().<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br></pre></td></tr></table></figure><p>异步函数的特征之一：保证函数的返回值为 promise。</p><p>将 async 关键字加到函数申明中，可以告诉它们返回的是 promise，而不是直接返回值。此外，它避免了同步函数为支持使用 await 带来的任何潜在开销。</p><h2 id="二、await"><a href="#二、await" class="headerlink" title="二、await:"></a>二、await:</h2><p>await 只在异步函数里面才起作用。它可以放在任何异步的，关键字 await 让 JavaScript 引擎等待直到 promise 完成并返回结果。在等待promise的同时，其他正在等待执行的代码就有机会执行了。</p><p>您可以在调用任何返回Promise的函数时使用 await，包括Web API函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&quot;咚!&quot;</span>), <span class="number">1000</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> promise; <span class="comment">// 等待执行，直到 promise resolve 执行完</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">alert</span>(result); <span class="comment">// &quot;咚!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="title function_">f</span>();<span class="comment">//拿到 result 作为结果继续往下执行。所以上面这段代码在1秒后显示 “咚!”。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意：await 实际上会暂停函数的执行，直到 promise 状态变为 完成，然后以 promise 的结果继续执行。这个行为不会耗费任何 CPU 资源，因为 JavaScript 引擎可以同时处理其他任务：执行其他脚本，处理事件等。</p></blockquote><h2 id="三、综合应用"><a href="#三、综合应用" class="headerlink" title="三、综合应用"></a>三、综合应用</h2><p>有了async/await就去除了到处都是 .then() 代码块，因为await会等待了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;c.jpg&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> myBlob = <span class="keyword">await</span> response.<span class="title function_">blob</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> objectURL = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(myBlob);</span><br><span class="line">  <span class="keyword">let</span> image = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">  image.<span class="property">src</span> = objectURL;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(image);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="title function_">A</span>()</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;问题: &#x27;</span> + e.<span class="property">message</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>用更少的.then()块来封装代码，同时它看起来很像同步代码，所以它非常直观。这样用的很爽！</p><p>到此这篇关于JS的async/await怎么使用的文章就介绍到这了,更多相关JS的async/await 用法内容请搜索68HTML以前的文章或继续浏览下面的相关文章希望大家以后多多支持68HTML！</p>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> async </tag>
            
            <tag> await </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript的防抖与节流</title>
      <link href="/2022/04/07/javascript/JavaScriptDeFangDouYuJieLiu/"/>
      <url>/2022/04/07/javascript/JavaScriptDeFangDouYuJieLiu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这篇文章主要介绍了什么是JavaScript的防抖与节流,防抖是在频繁触发某一个事件时，一段时间内不再触发该事件后才会去调用对应的回调函数，在设定间隔时间内如果下一次事件被触发， 那么就重新开始定时器，直到事件触发结束，节流看下面文章的具体介绍吧</p></blockquote><h2 id="一、函数防抖（debounce）"><a href="#一、函数防抖（debounce）" class="headerlink" title="一、函数防抖（debounce）"></a>一、函数防抖（debounce）</h2><h3 id="1-什么是防抖？"><a href="#1-什么是防抖？" class="headerlink" title="1. 什么是防抖？"></a>1. 什么是防抖？</h3><blockquote><p>函数防抖： 在频繁触发某一个事件时，一段时间内不再触发该事件后才会去调用对应的回调函数，在设定间隔时间内如果下一次事件被触发， 那么就重新开始定时器，直到事件触发结束。</p></blockquote><p>规定时间内没有继续触发事件的前提下，再去调用事件处理函数；</p><p>具体如下面的例子所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*定义防抖函数</span></span><br><span class="line"><span class="comment"> * func：传入一个函数，事件不再持续触发时会调用该函数</span></span><br><span class="line"><span class="comment"> * delay:定义持续多久后执行传入的回调函数</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func,delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>  <span class="comment">// 用于保存定时器</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">   <span class="comment">// 如果定时器存在，清除定时器，随后重新设置timer</span></span><br><span class="line">   <span class="keyword">if</span>(timer !== <span class="literal">null</span>) <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">   timer = <span class="built_in">setTimeout</span>(func, delay)  <span class="comment">// 超过delay为接收到事件会调用这里的func   必要的额时候可以修改func的this指向  由于timer对外部存在引用，因此不会被销毁</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/*事件处理函数*/</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">testDeBounce</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你看我执行了几次？？&#x27;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 接收debounce返回的函数</span></span><br><span class="line"> <span class="keyword">const</span> temp = <span class="title function_">debounce</span>(<span class="title function_">testDeBounce</span>(),<span class="number">1000</span>)</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/*绑定事件，测试防抖函数*/</span></span><br><span class="line"> <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="title function_">temp</span>()</span><br><span class="line"> &#125;); <span class="comment">// 这样写最少调用一次事件处理函数，最多也不会多余下面的写法执行的次数</span></span><br><span class="line"> <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, testDeBounce); <span class="comment">// 如果这样写的话，每当页面滚动就会调用事件处理函数</span></span><br></pre></td></tr></table></figure><p>总结一下思路：</p><ol><li>定义一个节流函数</li><li>函数内部使用一个变量保存定时器</li><li>返回一个函数，函数内部定义：如果定时器已经存在就清除定时器，重新设置定时器</li><li>定义一个变量来接收debounce返回的函数</li><li>在事件的回调函数中直接调用上一步的变量接收的方法</li></ol><h2 id="二、函数节流"><a href="#二、函数节流" class="headerlink" title="二、函数节流"></a>二、函数节流</h2><blockquote><p>函数节流： 在事件持续触发的前提下，保证一定时间段内只调用一次事件处理函数，就是函数节流；</p></blockquote><p>函数节流实现的方式： 定时器、时间戳、定时器+时间戳；</p><h3 id="2-1-定时器实现"><a href="#2-1-定时器实现" class="headerlink" title="2.1 定时器实现"></a>2.1 定时器实现</h3><p>思路：</p><ol><li>定义节流函数throttle</li><li>定义timer保存定时器</li><li>返回一个函数。函数内部定义：如果定时器不存在，设置定时器，间隔某一时间后将timer设置为null，如果在这之前事件再次触发，则定时器中的回调无效<br><code>&lt;button&gt;这是一个孤独的按钮&lt;/button&gt;</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义定时器节流函数</span></span><br><span class="line"><span class="comment"> * func:传入事件处理函数</span></span><br><span class="line"><span class="comment"> * delay：在delay指定的时间内定时器回调无效</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func,delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">const</span> context = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">   <span class="comment">// 如果定时器不存在</span></span><br><span class="line">   <span class="keyword">if</span>(!timer)&#123;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">     func.<span class="title function_">apply</span>(context,args) <span class="comment">// 考虑返回的函数调用的环境，因此这里不直接使用this</span></span><br><span class="line">     timer = <span class="literal">null</span> <span class="comment">// delay之后清除定时器</span></span><br><span class="line">    &#125;,delay)</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;啊啊啊！&#x27;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">const</span> temp = <span class="title function_">throttle</span>(test,<span class="number">1000</span>)</span><br><span class="line"> </span><br><span class="line"> <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="title function_">temp</span>()</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h3 id="2-2-时间戳实现"><a href="#2-2-时间戳实现" class="headerlink" title="2.2 时间戳实现"></a>2.2 时间戳实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> throttle = <span class="keyword">function</span>(<span class="params">func, delay</span>) &#123;            </span><br><span class="line">　　<span class="keyword">var</span> prev = <span class="title class_">Date</span>.<span class="title function_">now</span>();            </span><br><span class="line">　　<span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;                </span><br><span class="line">　　　　<span class="keyword">var</span> context = <span class="variable language_">this</span>;                </span><br><span class="line">　　　　<span class="keyword">var</span> args = <span class="variable language_">arguments</span>;                </span><br><span class="line">　　　　<span class="keyword">var</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>();                </span><br><span class="line">　　　　<span class="keyword">if</span> (now - prev &gt;= delay) &#123;                    </span><br><span class="line">　　　　　　func.<span class="title function_">apply</span>(context, args);                    </span><br><span class="line">　　　　　　prev = <span class="title class_">Date</span>.<span class="title function_">now</span>();                </span><br><span class="line">　　　　&#125;            </span><br><span class="line">　　&#125;        </span><br><span class="line">&#125;    </span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params"></span>) &#123;            </span><br><span class="line">　　<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());        </span><br><span class="line">&#125;        </span><br><span class="line"> </span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="title function_">throttle</span>(handle, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure><h3 id="2-3-时间戳-定时器"><a href="#2-3-时间戳-定时器" class="headerlink" title="2.3 时间戳+定时器"></a>2.3 时间戳+定时器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 节流throttle代码（时间戳+定时器）：</span></span><br><span class="line"><span class="keyword">var</span> throttle = <span class="keyword">function</span>(<span class="params">func, delay</span>) &#123;     </span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;     </span><br><span class="line">    <span class="keyword">var</span> startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();     </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;             </span><br><span class="line">        <span class="keyword">var</span> curTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();             </span><br><span class="line">        <span class="keyword">var</span> remaining = delay - (curTime - startTime);             </span><br><span class="line">        <span class="keyword">var</span> context = <span class="variable language_">this</span>;             </span><br><span class="line">        <span class="keyword">var</span> args = <span class="variable language_">arguments</span>;             </span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);              </span><br><span class="line">        <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span>) &#123;                    </span><br><span class="line">            func.<span class="title function_">apply</span>(context, args);                    </span><br><span class="line">            startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();              </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;                    </span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(func, remaining);              </span><br><span class="line">        &#125;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params"></span>) &#123;      </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="title function_">throttle</span>(handle, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure>到此这篇关于什么是JavaScript的防抖与节流的文章就介绍到这了,更多相关JavaScript的防抖与节流内容请搜索68HTML以前的文章或继续浏览下面的相关文章希望大家以后多多支持68HTML！</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> js防抖 </tag>
            
            <tag> js节流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo程序archive页面数量设置</title>
      <link href="/2022/04/07/hexo/HexoChengXuArchiveYeMianShuLiangSheZhi/"/>
      <url>/2022/04/07/hexo/HexoChengXuArchiveYeMianShuLiangSheZhi/</url>
      
        <content type="html"><![CDATA[<p>使用Hexo搭建博客已经有一段时间了，当文章数量达到十几篇左右时，突然发觉archive归档页面仅显示10篇文章，并且出现了分页功能，对于我们这种个人博客，文章数量不会很多，所以更希望是在一页中完全展示出来，便于访问者查找感兴趣的文章。</p><p>在网上查找原因，发现此处的10条限制来自_config.yml文件中的配置，这个配置控制所有的分页配置，包括首页、归档页、tag分类页面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">per_page: 10</span><br></pre></td></tr></table></figure><p>如果我们想对上面三个页面做独立的配置，需要安装插件进行功能支持。</p><ul><li>hexo-generator-index</li><li>hexo-generator-archive</li><li>hexo-generator-tag</li></ul><p>使用如下命令进行安装需要的插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-archive --save</span><br></pre></td></tr></table></figure><p>对应的_config.yml文件中添加如下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">index_generator:</span><br><span class="line">  per_page: 5</span><br><span class="line"></span><br><span class="line">archive_generator:</span><br><span class="line">  per_page: 20  //为0时表示不分页全展示</span><br><span class="line">  yearly: true  //按年生成归档</span><br><span class="line">  monthly: true //按月生成归档</span><br><span class="line"></span><br><span class="line">tag_generator:</span><br><span class="line">  per_page: 10</span><br></pre></td></tr></table></figure><blockquote><p>注意:上面归档设置中的按年或者按月，需要修改模板给出对应的链接入口，对于没有兴趣修改模板的同学，可以将此处设为false，减少生成页面时的工作量。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客修改Archive页面显示文章数量</title>
      <link href="/2022/04/07/hexo/HexoBoKeXiuGaiArchiveYeMianXianShiWenZhangShuLiang/"/>
      <url>/2022/04/07/hexo/HexoBoKeXiuGaiArchiveYeMianXianShiWenZhangShuLiang/</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前配置的Swiftype站内搜索功能很不稳定，经常因为网络问题无法返回搜索结果，所以要找写过的某篇文章就不太方便。为解决这个问题，有一个方法是在Archive页面上不分页，然后就可以用浏览器自带的搜索功能来搜索标题了。</p></blockquote><p>默认情况下，Hexo无法对主页、Archive页面、标签页面每页显示文章数量进行单独设置，所以需要安装hexo-generator-archive插件来实现这个功能。</p><p>使用如下命令安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-archive --save</span><br></pre></td></tr></table></figure><p>安装好后修改_config.yml中的相关配置，分别对index、archive、tag及category页面进行设置即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Pagination</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">index_generator:</span><br><span class="line">  per_page: 6</span><br><span class="line"></span><br><span class="line">archive_generator:</span><br><span class="line">  per_page: 0</span><br><span class="line"></span><br><span class="line">tag_generator:</span><br><span class="line">  per_page: 0</span><br><span class="line"></span><br><span class="line">category_generator:</span><br><span class="line">  per_page: 50</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序中使用vant框架的具体步骤</title>
      <link href="/2022/04/07/weChat/WinXinXiaoChengXuZhongShiYongVantKuangJiaDeJuTiBuZhou/"/>
      <url>/2022/04/07/weChat/WinXinXiaoChengXuZhongShiYongVantKuangJiaDeJuTiBuZhou/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍了微信小程序中使用vant框架的具体步骤，文中通过示例代码介绍的非常详细，具有一定的参考价值，感兴趣的小伙伴们可以参考一下</p></blockquote><p>1.说到vant框架相信大家应该并不陌生了吧，做过移动端开发的小伙伴们应该都知道它吧。</p><p>2.Vant 是有赞前端团队开源的移动端组件库，于 2017 年开源，已持续维护 4 年时间。Vant 对内承载了有赞所有核心业务，对外服务十多万开发者，是业界主流的移动端组件库之一。</p><p>3.我们废话不多说，直接进入今天的主题。我们该如何在微信小程序中去使用vant组件库呢！</p><p>首先</p><p>我们先打开vant weapp网站，这里我将网站地址给大家。Vant Weapp 网址</p><p>大家打开网站后呢，点击快速上手。上面就有步骤教你如何在小程序中使用vant组件库。</p><p>下面呢就给大家介绍一下我是如何去安装使用vant UI组件库的。</p><h2 id="1-打开我们小程序的项目目录，然后打开文件所在的位置。"><a href="#1-打开我们小程序的项目目录，然后打开文件所在的位置。" class="headerlink" title="1.打开我们小程序的项目目录，然后打开文件所在的位置。"></a>1.打开我们小程序的项目目录，然后打开文件所在的位置。</h2><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/3a6bba8a-eedd-4d9b-9016-b08dbaf88be8.jpg"></p><h2 id="2-初始化项目文件"><a href="#2-初始化项目文件" class="headerlink" title="2.初始化项目文件"></a>2.初始化项目文件</h2><p>这里呢我通过 cmd 窗口初始化<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/edcb41c1-9cb9-4846-b31c-56a658dee28c.jpg"></p><h2 id="3-输入初始化项目的命令"><a href="#3-输入初始化项目的命令" class="headerlink" title="3.输入初始化项目的命令"></a>3.输入初始化项目的命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>此时你会发现你的目录多出了package.json文件<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/619fe8db-1d60-416f-a7e9-4f7bdd922459.jpg"></p><h2 id="4-安装依赖"><a href="#4-安装依赖" class="headerlink" title="4.安装依赖"></a>4.安装依赖</h2><p>4.1 通过 npm 安装vant/weapp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @vant/weapp -S --production</span><br></pre></td></tr></table></figure><p>4.2 安装 miniprogram</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i miniprogram-sm-crypto --production</span><br></pre></td></tr></table></figure><p>安装完毕后，你会发现你的目录中又多些文件。</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/fa52cacf-d96f-44dc-a4bb-332e942ec79b.jpg"><br>4.3 修改 app.json</p><p>将 app.json 中的 “style”: “v2” 去除，原因是小程序的新版基础组件强行加上了许多样式，难以覆盖，不关闭将造成部分组件样式混乱。</p><p>4.4 修改 project.config.json</p><p>开发者工具创建的项目，miniprogramRoot 默认为 miniprogram，package.json 在其外部，npm 构建无法正常工作。需要手动在 project.config.json 内添加如下配置，使开发者工具可以正确索引到 npm 依赖的位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;setting&quot;: &#123;</span><br><span class="line">    ...</span><br><span class="line">    &quot;packNpmManually&quot;: true,</span><br><span class="line">    &quot;packNpmRelationList&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;packageJsonPath&quot;: &quot;./package.json&quot;,</span><br><span class="line">        &quot;miniprogramNpmDistDir&quot;: &quot;./miniprogram/&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.5 构建 npm 我们点击左上角的工具栏<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/d7bf3be1-ab82-457f-8182-05d12939e315.jpg"><br>构建成功后会出现下面的画面</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/a96df185-2cf1-4518-ab52-cf747462ee3c.jpg"></p><p>4.6然后点击右上角的详情—本地设置—-使用npm模块</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/81b8c4f3-35f6-4d2c-a1fe-dfcf7867c523.jpg"></p><h2 id="5-使用组件"><a href="#5-使用组件" class="headerlink" title="5.使用组件"></a>5.使用组件</h2><p>我这里在全局里面注册一个按钮，然后使用它。先去app.json中注册<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/5a03d6cb-7582-4a02-94ca-2fc5f98b1ca2.jpg"></p><p>这里我随便找一个页面用一下这个按钮组件。</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/46289e16-c4d9-4e18-9773-4769c049b6e2.jpg"><br>大家可以看到我使用成功了。</p><blockquote><p>到此这篇关于微信小程序中使用vant框架的具体步骤的文章就介绍到这了,更多相关小程序使用vant框架内容请搜索68HTML以前的文章或继续浏览下面的相关文章希望大家以后多多支持68HTML！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> Vant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何利用Typescript封装本地存储</title>
      <link href="/2022/04/07/typescript/RuHeLiYongTypeScriptFengZhuangBenDiCunCu/"/>
      <url>/2022/04/07/typescript/RuHeLiYongTypeScriptFengZhuangBenDiCunCu/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本地存储是前端开发过程中经常会用到的技术，但是官方api在使用上多有不便，且有些功能并没有提供给我们相应的api，比如设置过期时间等。本文无意于介绍关于本地存储概念相关的知识，旨在使用typescript封装一个好用的本地存储类。</p></blockquote><h2 id="本地存储使用场景"><a href="#本地存储使用场景" class="headerlink" title="本地存储使用场景"></a>本地存储使用场景</h2><ul><li><p>用户登录后token的存储</p></li><li><p>用户信息的存储</p></li><li><p>不同页面之间的通信</p></li><li><p>项目状态管理的持久化，如redux的持久化、vuex的持久化等</p></li><li><p>性能优化等</p></li><li><p>…</p><h2 id="使用中存在的问题"><a href="#使用中存在的问题" class="headerlink" title="使用中存在的问题"></a>使用中存在的问题</h2></li><li><p>官方api不是很友好（过于冗长），且都是以字符串的形式存储，存取都要进行数据类型转换</p><ul><li>localStorage.setItem(key, value)</li><li>…</li></ul></li><li><p>无法设置过期时间</p></li><li><p>以明文的形式存储，一些相对隐私的信息用户都能很轻松的在浏览器中查看到</p></li><li><p>同源项目共享本地存储空间，可能会引起数据错乱</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>将上述问题的解决方法封装在一个类中，通过简单接口的形式暴露给用户直接调用。 类中将会封装以下功能：</p></li><li><p>数据类型的转换</p></li><li><p>过期时间</p></li><li><p>数据加密</p></li><li><p>统一的命名规范</p></li></ul><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// storage.ts</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">StorageType</span> &#123;</span><br><span class="line">  l = <span class="string">&#x27;localStorage&#x27;</span>,</span><br><span class="line">  s = <span class="string">&#x27;sessionStorage&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyStorage</span> &#123;</span><br><span class="line">  <span class="attr">storage</span>: <span class="title class_">Storage</span></span><br><span class="line"> </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">type</span>: StorageType</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">storage</span> = <span class="keyword">type</span> === <span class="title class_">StorageType</span>.<span class="property">l</span> ? <span class="variable language_">window</span>.<span class="property">localStorage</span> : <span class="variable language_">window</span>.<span class="property">sessionStorage</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="title function_">set</span>(<span class="params"></span></span><br><span class="line"><span class="params">    key: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    value: <span class="built_in">any</span></span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(value)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">storage</span>.<span class="title function_">setItem</span>(key, data)</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="property">storage</span>.<span class="title function_">getItem</span>(key)</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="title function_">delete</span>(<span class="params">key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">storage</span>.<span class="title function_">removeItem</span>(key)</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">storage</span>.<span class="title function_">clear</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LStorage</span> = <span class="keyword">new</span> <span class="title class_">MyStorage</span>(<span class="title class_">StorageType</span>.<span class="property">l</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">SStorage</span> = <span class="keyword">new</span> <span class="title class_">MyStorage</span>(<span class="title class_">StorageType</span>.<span class="property">s</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">LStorage</span>, <span class="title class_">SStorage</span> &#125;</span><br></pre></td></tr></table></figure><p>以上代码简单的实现了本地存储的基本功能，内部完成了存取时的数据类型转换操作，使用方式如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LStorage</span>, <span class="title class_">SStorage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./storage&#x27;</span></span><br><span class="line"> </span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line"><span class="title class_">LStorage</span>.<span class="title function_">set</span>(<span class="string">&#x27;data&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span> &#125;)</span><br><span class="line"><span class="title class_">LStorage</span>.<span class="title function_">get</span>(<span class="string">&#x27;data&#x27;</span>) <span class="comment">// &#123; name: &#x27;zhangsan&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="加入过期时间"><a href="#加入过期时间" class="headerlink" title="加入过期时间"></a>加入过期时间</h3><p>设置过期时间的思路为：在set的时候在数据中加入expires的字段，记录数据存储的时间，get的时候将取出的expires与当前时间进行比较，如果当前时间大于expires，则表示已经过期，此时清除该数据记录，并返回null，expires类型可以是boolean类型和number类型，默认为false，即不设置过期时间，当用户设置为true时，默认过期时间为1年，当用户设置为具体的数值时，则过期时间为用户设置的数值，代码实现如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IStoredItem</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">any</span></span><br><span class="line">  expires?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="title function_">set</span>(<span class="params"></span></span><br><span class="line"><span class="params">    key: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    value: <span class="built_in">any</span>,</span></span><br><span class="line"><span class="params">    expires: <span class="built_in">boolean</span> | <span class="built_in">number</span> = <span class="literal">false</span>,</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">source</span>: <span class="title class_">IStoredItem</span> = &#123; <span class="attr">value</span>: <span class="literal">null</span> &#125;</span><br><span class="line">    <span class="keyword">if</span> (expires) &#123;</span><br><span class="line">    <span class="comment">// 默认设置过期时间为1年，这个可以根据实际情况进行调整</span></span><br><span class="line">      source.<span class="property">expires</span> =</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() +</span><br><span class="line">        (expires === <span class="literal">true</span> ? <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">365</span> : expires)</span><br><span class="line">    &#125;</span><br><span class="line">    source.<span class="property">value</span> = value</span><br><span class="line">    <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(source)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">storage</span>.<span class="title function_">setItem</span>(key, data)</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="property">storage</span>.<span class="title function_">getItem</span>(key)</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="attr">source</span>: <span class="title class_">IStoredItem</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(value)</span><br><span class="line">      <span class="keyword">const</span> expires = source.<span class="property">expires</span></span><br><span class="line">      <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line">      <span class="keyword">if</span> (expires &amp;&amp; now &gt; expires) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">delete</span>(key)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">return</span> source.<span class="property">value</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="加入数据加密"><a href="#加入数据加密" class="headerlink" title="加入数据加密"></a>加入数据加密</h3><p>加密用到了crypto-js包，在类中封装encrypt,decrypt两个私有方法来处理数据的加密和解密，当然，用户也可以通过encryption字段设置是否对数据进行加密，默认为true，即默认是有加密的。另外可通过process.env.NODE_ENV获取当前的环境，如果是开发环境则不予加密，以方便开发调试，代码实现如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">CryptoJS</span> <span class="keyword">from</span> <span class="string">&#x27;crypto-js&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SECRET_KEY</span> = <span class="string">&#x27;nkldsx@#45#VDss9&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">IS_DEV</span> = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyStorage</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">encrypt</span>(<span class="params">data: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(data, <span class="variable constant_">SECRET_KEY</span>).<span class="title function_">toString</span>()</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">decrypt</span>(<span class="params">data: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> bytes = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(data, <span class="variable constant_">SECRET_KEY</span>)</span><br><span class="line">    <span class="keyword">return</span> bytes.<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>)</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="title function_">set</span>(<span class="params"></span></span><br><span class="line"><span class="params">    key: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    value: <span class="built_in">any</span>,</span></span><br><span class="line"><span class="params">    expires: <span class="built_in">boolean</span> | <span class="built_in">number</span> = <span class="literal">false</span>,</span></span><br><span class="line"><span class="params">    encryption = <span class="literal">true</span></span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">source</span>: <span class="title class_">IStoredItem</span> = &#123; <span class="attr">value</span>: <span class="literal">null</span> &#125;</span><br><span class="line">    <span class="keyword">if</span> (expires) &#123;</span><br><span class="line">      source.<span class="property">expires</span> =</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() +</span><br><span class="line">        (expires === <span class="literal">true</span> ? <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">365</span> : expires)</span><br><span class="line">    &#125;</span><br><span class="line">    source.<span class="property">value</span> = value</span><br><span class="line">    <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(source)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">storage</span>.<span class="title function_">setItem</span>(key, <span class="variable constant_">IS_DEV</span> ? data : encryption ? <span class="variable language_">this</span>.<span class="title function_">encrypt</span>(data) : data</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key: <span class="built_in">string</span>, encryption = <span class="literal">true</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="property">storage</span>.<span class="title function_">getItem</span>(key)</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="attr">source</span>: <span class="title class_">IStoredItem</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(value)</span><br><span class="line">      <span class="keyword">const</span> expires = source.<span class="property">expires</span></span><br><span class="line">      <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line">      <span class="keyword">if</span> (expires &amp;&amp; now &gt; expires) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">delete</span>(key)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">return</span> <span class="variable constant_">IS_DEV</span></span><br><span class="line">        ? source.<span class="property">value</span></span><br><span class="line">        : encryption</span><br><span class="line">        ? <span class="variable language_">this</span>.<span class="title function_">decrypt</span>(source.<span class="property">value</span>)</span><br><span class="line">        : source.<span class="property">value</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加入命名规范"><a href="#加入命名规范" class="headerlink" title="加入命名规范"></a>加入命名规范</h3><p>可以通过在key前面加上一个前缀来规范命名，如项目名_版本号_key类型的合成key，这个命名规范可自由设定，可以通过一个常量设置，也可以通过获取package.json中的name和version进行拼接，代码实现如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;../../package.json&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PREFIX</span> = config.<span class="property">name</span> + <span class="string">&#x27;_&#x27;</span> + config.<span class="property">version</span> + <span class="string">&#x27;_&#x27;</span></span><br><span class="line"> </span><br><span class="line">...</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyStorage</span> &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 合成key</span></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">synthesisKey</span>(<span class="params">key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable constant_">PREFIX</span> + key</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  ...</span><br><span class="line">   </span><br><span class="line"> <span class="title function_">set</span>(<span class="params"></span></span><br><span class="line"><span class="params">    key: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    value: <span class="built_in">any</span>,</span></span><br><span class="line"><span class="params">    expires: <span class="built_in">boolean</span> | <span class="built_in">number</span> = <span class="literal">false</span>,</span></span><br><span class="line"><span class="params">    encryption = <span class="literal">true</span></span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">storage</span>.<span class="title function_">setItem</span>(</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">synthesisKey</span>(key),</span><br><span class="line">      <span class="variable constant_">IS_DEV</span> ? data : encryption ? <span class="variable language_">this</span>.<span class="title function_">encrypt</span>(data) : data</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key: <span class="built_in">string</span>, encryption = <span class="literal">true</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="property">storage</span>.<span class="title function_">getItem</span>(<span class="variable language_">this</span>.<span class="title function_">synthesisKey</span>(key))</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">CryptoJS</span> <span class="keyword">from</span> <span class="string">&#x27;crypto-js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;../../package.json&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">StorageType</span> &#123;</span><br><span class="line">  l = <span class="string">&#x27;localStorage&#x27;</span>,</span><br><span class="line">  s = <span class="string">&#x27;sessionStorage&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IStoredItem</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">any</span></span><br><span class="line">  expires?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SECRET_KEY</span> = <span class="string">&#x27;nkldsx@#45#VDss9&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PREFIX</span> = config.<span class="property">name</span> + <span class="string">&#x27;_&#x27;</span> + config.<span class="property">version</span> + <span class="string">&#x27;_&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">IS_DEV</span> = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyStorage</span> &#123;</span><br><span class="line">  <span class="attr">storage</span>: <span class="title class_">Storage</span></span><br><span class="line"> </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">type</span>: StorageType</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">storage</span> =</span><br><span class="line">      <span class="keyword">type</span> === <span class="title class_">StorageType</span>.<span class="property">l</span> ? <span class="variable language_">window</span>.<span class="property">localStorage</span> : <span class="variable language_">window</span>.<span class="property">sessionStorage</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">encrypt</span>(<span class="params">data: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(data, <span class="variable constant_">SECRET_KEY</span>).<span class="title function_">toString</span>()</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">decrypt</span>(<span class="params">data: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> bytes = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(data, <span class="variable constant_">SECRET_KEY</span>)</span><br><span class="line">    <span class="keyword">return</span> bytes.<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>)</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">synthesisKey</span>(<span class="params">key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable constant_">PREFIX</span> + key</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="title function_">set</span>(<span class="params"></span></span><br><span class="line"><span class="params">    key: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    value: <span class="built_in">any</span>,</span></span><br><span class="line"><span class="params">    expires: <span class="built_in">boolean</span> | <span class="built_in">number</span> = <span class="literal">false</span>,</span></span><br><span class="line"><span class="params">    encryption = <span class="literal">true</span></span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">source</span>: <span class="title class_">IStoredItem</span> = &#123; <span class="attr">value</span>: <span class="literal">null</span> &#125;</span><br><span class="line">    <span class="keyword">if</span> (expires) &#123;</span><br><span class="line">      source.<span class="property">expires</span> =</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() +</span><br><span class="line">        (expires === <span class="literal">true</span> ? <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">365</span> : expires)</span><br><span class="line">    &#125;</span><br><span class="line">    source.<span class="property">value</span> = value</span><br><span class="line">    <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(source)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">storage</span>.<span class="title function_">setItem</span>(</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">synthesisKey</span>(key),</span><br><span class="line">      <span class="variable constant_">IS_DEV</span> ? data : encryption ? <span class="variable language_">this</span>.<span class="title function_">encrypt</span>(data) : data</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key: <span class="built_in">string</span>, encryption = <span class="literal">true</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="property">storage</span>.<span class="title function_">getItem</span>(<span class="variable language_">this</span>.<span class="title function_">synthesisKey</span>(key))</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="attr">source</span>: <span class="title class_">IStoredItem</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(value)</span><br><span class="line">      <span class="keyword">const</span> expires = source.<span class="property">expires</span></span><br><span class="line">      <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line">      <span class="keyword">if</span> (expires &amp;&amp; now &gt; expires) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">delete</span>(key)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">return</span> <span class="variable constant_">IS_DEV</span></span><br><span class="line">        ? source.<span class="property">value</span></span><br><span class="line">        : encryption</span><br><span class="line">        ? <span class="variable language_">this</span>.<span class="title function_">decrypt</span>(source.<span class="property">value</span>)</span><br><span class="line">        : source.<span class="property">value</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="title function_">delete</span>(<span class="params">key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">storage</span>.<span class="title function_">removeItem</span>(<span class="variable language_">this</span>.<span class="title function_">synthesisKey</span>(key))</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">storage</span>.<span class="title function_">clear</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LStorage</span> = <span class="keyword">new</span> <span class="title class_">MyStorage</span>(<span class="title class_">StorageType</span>.<span class="property">l</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">SStorage</span> = <span class="keyword">new</span> <span class="title class_">MyStorage</span>(<span class="title class_">StorageType</span>.<span class="property">s</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">LStorage</span>, <span class="title class_">SStorage</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到此这篇关于如何利用Typescript封装本地存储的文章就介绍到这了,更多相关Typescript封装本地存储内容请搜索68HTML以前的文章或继续浏览下面的相关文章希望大家以后多多支持68HTML！</p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解TypeScript的基础类型</title>
      <link href="/2022/04/07/typescript/XiangJieTypeScriptDeJiChuLeiXing/"/>
      <url>/2022/04/07/typescript/XiangJieTypeScriptDeJiChuLeiXing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这篇文章主要为大家介绍了TypeScript的基础类型，具有一定的参考价值，感兴趣的小伙伴们可以参考一下，希望能够给你带来帮助</p></blockquote><h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 布尔类型---&gt;boolean</span></span><br><span class="line"><span class="comment">// let 变量名：数据类型 = 值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">flag</span>: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数字类型---&gt;number</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a1</span>: <span class="built_in">number</span> = <span class="number">10</span> <span class="comment">// 十进制</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a2</span>: <span class="built_in">number</span> = <span class="number">0b1010</span> <span class="comment">// 二进制</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a3</span>: <span class="built_in">number</span> = <span class="number">0o12</span><span class="comment">// 八进制</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a4</span>: <span class="built_in">number</span> = <span class="number">0xa</span> <span class="comment">// 十六进制</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1 + a2 + a3 + a4)</span><br></pre></td></tr></table></figure><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串类型---&gt;string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str1</span>: <span class="built_in">string</span> = <span class="string">&#x27;床前明月光&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">str2</span>: <span class="built_in">string</span> = <span class="string">&#x27;地上鞋两双&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1 + <span class="string">&#x27;,&#x27;</span> + str2)</span><br></pre></td></tr></table></figure><h2 id="字符串和数字进行拼接"><a href="#字符串和数字进行拼接" class="headerlink" title="字符串和数字进行拼接"></a>字符串和数字进行拼接</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">str3</span>: <span class="built_in">string</span> = <span class="string">&#x27;我现在的岁数：&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a5</span>: <span class="built_in">number</span> = <span class="number">24</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;str3&#125;</span><span class="subst">$&#123;a5&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><p>总结:ts中变量一开始是什么类型,那么后期赋值的时候,只能用这个类型的数据,是不允许用其他类型的数据赋值给当前的这个变量中</p><h2 id="undefined和-null"><a href="#undefined和-null" class="headerlink" title="undefined和 null"></a>undefined和 null</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// undefined和 null都可以作为其他类型的子类璧,把undefined和nu1l赋值给其他类型的变量的,如: number类型的变量</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">und</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">n1l</span>: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(und)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n1l)</span><br></pre></td></tr></table></figure><h2 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一：let变量名:数据类型[]=[值1,值2,值3,...]</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>: <span class="built_in">number</span>[] = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：泛型的写法</span></span><br><span class="line"><span class="comment">// 语法: let变量名: Array&lt;数据类型&gt;=[值1,值2,值3]</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);</span><br></pre></td></tr></table></figure><p>注意问题:数组定义后,里面的数据的类型必须和定义数组的时候的类型是一致的,否则有错误提示信息,也不会编译通过的</p><h2 id="元组类型"><a href="#元组类型" class="headerlink" title="元组类型"></a>元组类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 元组类型:在定义数组的时候,类型和数据的个数一开始就已经限定了</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr3</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>, <span class="built_in">boolean</span>] = [<span class="string">&#x27;小甜甜&#x27;</span>, <span class="number">100</span>, <span class="literal">true</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3)</span><br><span class="line"><span class="comment">// 注意问题:元组类型在使用的时候,数据的类型的位置和数据的个数应该和在定义元组的时候的数据类型及位置应该是一致的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3[<span class="number">0</span>].<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3[<span class="number">1</span>].<span class="title function_">toFixed</span>(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">       red,</span><br><span class="line">       green,</span><br><span class="line">       blue</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个Color的枚举类型的变量来接收枚举的值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">color</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">red</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(color);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Color</span>[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><h2 id="any类型"><a href="#any类型" class="headerlink" title="any类型"></a>any类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">str5</span>: <span class="built_in">any</span> = <span class="number">100</span>;</span><br><span class="line">str5 = <span class="string">&#x27;宇智波带土&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str5);</span><br><span class="line"><span class="comment">// 当一个数组中要存储多个数据,个数不确定,类型不确定,此时也可以使用any类型来定义数组</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr6</span>: <span class="built_in">any</span> = [<span class="number">100</span>, <span class="string">&#x27;宇智波带土&#x27;</span>, <span class="literal">true</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr6)</span><br><span class="line"><span class="comment">// 这种情况下也没有错误的提示信息, any类型有优点,也有缺点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr6[<span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>));</span><br></pre></td></tr></table></figure><h2 id="void类型"><a href="#void类型" class="headerlink" title="void类型"></a>void类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getobj</span>(<span class="params">obj: <span class="built_in">object</span></span>): <span class="built_in">object</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line">       <span class="keyword">return</span> &#123;</span><br><span class="line">           <span class="attr">name</span>: <span class="string">&#x27;卡卡西&#x27;</span>,</span><br><span class="line">           <span class="attr">age</span>: <span class="number">27</span></span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getobj</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;佐助&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;))</span><br></pre></td></tr></table></figure><h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需求1:定义一个函数得到一个数字或字符串值的字符串形式值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getString</span>(<span class="params">str: <span class="built_in">number</span> | <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> str.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getString</span>(<span class="string">&#x27;萨斯给&#x27;</span>))</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 需求2:定义一个一个函数得到一个数字或字符串值的长度</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getString1</span>(<span class="params">str: <span class="built_in">number</span> | <span class="built_in">string</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> str.<span class="title function_">toString</span>().<span class="property">length</span></span><br><span class="line">      <span class="keyword">if</span> ((&lt;<span class="built_in">string</span>&gt;str).<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> (str <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> str.<span class="title function_">toString</span>().<span class="property">length</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getString1</span>(<span class="number">12345</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getString1</span>(<span class="string">&#x27;12345&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇文章就到这里了，希望能够给你带来帮助，也希望您能够多多关注68HTML的更多内容! </p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序中wxs文件的一些妙用分享</title>
      <link href="/2022/04/07/weChat/WeiXinXiaoChengXuZhongWXSWenJianDeYiXieMiaoYongFenXiang/"/>
      <url>/2022/04/07/weChat/WeiXinXiaoChengXuZhongWXSWenJianDeYiXieMiaoYongFenXiang/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>wxs文件是小程序中的逻辑文件，它和wxml结合使用。</p><p>不同于js， wxs可以直接作用到视图层，而不需要进行视图层和逻辑层的setData数据交互；</p><p>因为这个特性，wxs非常适合应用于优化小程序的频繁交互操作中；</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>在IOS环境中wxs的运行速度要远高于js，在android中两者表现相当。</p><p>使用wxs作为过滤器也可以一定幅度提升性能；让我们来看一个过滤器来了解其语法。</p><p>wxs文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var toDecimal2 = function (x) &#123;</span><br><span class="line">  var f = parseFloat(x);</span><br><span class="line">  if (isNaN(f)) &#123;</span><br><span class="line">    return &#x27;0.00&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  var f = Math.round(x * 100) / 100;</span><br><span class="line">  var s = f.toString();</span><br><span class="line">  var rs = s.indexOf(&#x27;.&#x27;);</span><br><span class="line">  if (rs &lt; 0) &#123;</span><br><span class="line">    rs = s.length;</span><br><span class="line">    s += &#x27;.&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">  while (s.length &lt;= rs + 2) &#123;</span><br><span class="line">    s += &#x27;0&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">  return s;</span><br><span class="line">&#125;</span><br><span class="line">module.exports = toDecimal2</span><br></pre></td></tr></table></figure><p>上面的代码实现了数字保留两位小数的功能。</p><p>wxml文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;wxs src=&quot;./filter.wxs&quot; module=&quot;filter&quot;&gt;&lt;/wxs&gt;</span><br><span class="line">&lt;text&gt;&#123;&#123;filter(1)&#125;&#125;&lt;/text&gt;</span><br></pre></td></tr></table></figure><p>基本语法：在视图文件中通过wxs标签引入，module值是自定义命名，之后在wxml中可以通过filter调用方法</p><p>上面的代码展示了 wxs的运行逻辑，让我们可以像函数一样调用wxs中的方法；</p><p>下面再看一下wxs针对wxml页面事件中的表现。</p><h3 id="拖拽"><a href="#拖拽" class="headerlink" title="拖拽"></a>拖拽</h3><p>使用交互时（拖拽、上下滑动、左右侧滑等）如果依靠js逻辑层，会需要大量、频繁的数据通信。卡顿是不可避免的；</p><p>使用wxs文件替代交互，不需要频繁使用setData导致实时大量的数据通信,从而节省性能。</p><p>下面展示一个拖拽例子</p><p>wxs文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function touchstart(event) &#123;</span><br><span class="line">  var touch = event.touches[0] || event.changedTouches[0]</span><br><span class="line">  startX = touch.pageX</span><br><span class="line">  startY = touch.pageY</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事件参数event和js中的事件event内容中touches和changedTouches属性一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function touchmove(event, ins) &#123;</span><br><span class="line">  var touch = event.touches[0] || event.changedTouches[0]</span><br><span class="line">  ins.selectComponent(&#x27;.div&#x27;).setStyle(&#123;</span><br><span class="line">    left: startX - touch.pageX + &#x27;px&#x27;,</span><br><span class="line">    top: startY - touch.pageY  + &#x27;px&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ins(第二个参数)为触发事件的视图层wxml上下文。可以查找页面所有元素并设置style,class(足够完成交互效果)</p><p>注意：在参数event中同样有一个上下文实例instance；event中的实例instance作用范围是触发事件的元素内，而事件的ins参数作用范围是触发事件的组件内。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  touchstart: touchstart,</span><br><span class="line">  touchmove: touchmove,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后将方法抛出去，给wxml文件引用。</p><p>wxml文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;wxs module=&quot;action&quot; src=&quot;./movable.wxs&quot;&gt;&lt;/wxs&gt; </span><br><span class="line">&lt;view class=&quot;div&quot; bindtouchstart=&quot;&#123;&#123;action.touchstart&#125;&#125;&quot; bindtouchmove=&quot;&#123;&#123;action.touchmove&#125;&#125;&quot;&gt;&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>上面的例子，解释了事件的基本交互用法。</p><h3 id="文件之中相互传参"><a href="#文件之中相互传参" class="headerlink" title="文件之中相互传参"></a>文件之中相互传参</h3><p>在事件交互中，少不了需要各个文件之中传递参数。 下面是比较常用的几种</p><h3 id="wxs传参到js逻辑层"><a href="#wxs传参到js逻辑层" class="headerlink" title="wxs传参到js逻辑层"></a>wxs传参到js逻辑层</h3><p>wxs文件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var dragStart = function (e, ins) &#123;</span><br><span class="line">    ins.callMethod(&#x27;callback&#x27;,&#x27;sldkfj&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js文件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">callback(e)&#123;</span><br><span class="line">    console.log(e)</span><br><span class="line">&#125;</span><br><span class="line">// sldkfj</span><br></pre></td></tr></table></figure><p>使用callMethod方法，可以执行js中的callback方法。也可以实现传参；</p><p>！！！callMethod不支持传回调函数*</p><h3 id="js逻辑层传参到wxs文件"><a href="#js逻辑层传参到wxs文件" class="headerlink" title="js逻辑层传参到wxs文件"></a>js逻辑层传参到wxs文件</h3><p>js文件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handler(e)&#123;</span><br><span class="line">    this.setData(&#123;a:1&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wxml文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;wxs module=&quot;action&quot; src=&quot;./movable.wxs&quot;&gt;&lt;/wxs&gt; </span><br><span class="line">&lt;view change:prop=&quot;&#123;&#123;action.change&#125;&#125;&quot; prop=&quot;&#123;&#123;a&#125;&#125;&quot;&gt;&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>wxs文件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">change(newValue,oldValue)&#123;&#125;</span><br></pre></td></tr></table></figure><p>js文件中的参数传递到wxs需要通过wxml文件中转。</p><p>js文件触发handler事件，改变a的值之后，最新的a传递到wxml中。</p><p>wxml中prop改变会触发wxs中的change事件。change中则会接收到最新prop值</p><h3 id="wxs中获取dataset-wxs中获取wxml数据）"><a href="#wxs中获取dataset-wxs中获取wxml数据）" class="headerlink" title="wxs中获取dataset(wxs中获取wxml数据）"></a>wxs中获取dataset(wxs中获取wxml数据）</h3><p>wxs中代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dragStart = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> index = e.<span class="property">currentTarget</span>.<span class="property">dataset</span>.<span class="property">index</span>;</span><br><span class="line">  <span class="keyword">var</span> index = e.<span class="property">instance</span>.<span class="title function_">getDataset</span>().<span class="property">index</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面有提到e.instance是当前触发事件的元素实例。</p><p>所以e.instance.getDataset()获取的是当前触发事件的dataset数据集</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>wxs和js为不同的两个脚本语言。但是语法和es5基本相同，确又不支持es6语法； getState 在多元素交互中非常实用，欢迎探索。</p><p>不知道是否是支持的语法可以跳转官网文档； <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxs/05statement.html" title="wxs运算符、语句、基础类库、数据类型">wxs运算符、语句、基础类库、数据类型</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到此这篇关于微信小程序中wxs文件的一些妙用的文章就介绍到这了,更多相关微信小程序wxs文件妙用内容请搜索68HTML以前的文章或继续浏览下面的相关文章希望大家以后多多支持68HTML！</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> wxs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS字符串截取函数</title>
      <link href="/2022/04/07/javascript/JS_ZiFuCuanJieQuHanShu/"/>
      <url>/2022/04/07/javascript/JS_ZiFuCuanJieQuHanShu/</url>
      
        <content type="html"><![CDATA[<h2 id="Bcrypt密码在线生成计算器"><a href="#Bcrypt密码在线生成计算器" class="headerlink" title="Bcrypt密码在线生成计算器"></a>Bcrypt密码在线生成计算器</h2><blockquote><p>这篇文章主要介绍了JS字符串截取函数实例，有需要的朋友可以参考一下</p></blockquote><p>使用 substring()或者slice()</p><p>函数：split()<br>功能：使用一个指定的分隔符把一个字符串分割存储到数组<br>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str=”jpg|bmp|gif|ico|png”;</span><br><span class="line">arr=theString.<span class="title function_">split</span>(”|”);</span><br><span class="line"><span class="comment">//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组</span></span><br></pre></td></tr></table></figure><p>函数：John()<br>功能：使用您选择的分隔符将一个数组合并为一个字符串<br>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> delimitedString=myArray.<span class="title function_">join</span>(delimiter);</span><br><span class="line"><span class="keyword">var</span> myList=<span class="keyword">new</span> <span class="title class_">Array</span>(”jpg”,”bmp”,”gif”,”ico”,”png”);</span><br><span class="line"><span class="keyword">var</span> portableList=myList.<span class="title function_">join</span>(”|”);</span><br><span class="line"><span class="comment">//结果是jpg|bmp|gif|ico|png</span></span><br></pre></td></tr></table></figure><p>函数：substring()<br>功能：字符串截取，比如想从”MinidxSearchEngine”中得到”Minidx”就要用到substring(0,6)<br>函数：indexOf()<br>功能：返回字符串中匹配子串的第一个字符的下标</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myString=”<span class="title class_">JavaScript</span>”;</span><br><span class="line"><span class="keyword">var</span> w=myString.<span class="title function_">indexOf</span>(”v”);w will be <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> x=myString.<span class="title function_">indexOf</span>(”S”);x will be <span class="number">4</span></span><br><span class="line"><span class="keyword">var</span> y=myString.<span class="title function_">indexOf</span>(”<span class="title class_">Script</span>”);y will also be <span class="number">4</span></span><br><span class="line"><span class="keyword">var</span> z=myString.<span class="title function_">indexOf</span>(”key”);z will be -<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Js相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 闭包</title>
      <link href="/2022/04/06/javascript/JS_bibao/"/>
      <url>/2022/04/06/javascript/JS_bibao/</url>
      
        <content type="html"><![CDATA[<h2 id="JS-闭包"><a href="#JS-闭包" class="headerlink" title="JS 闭包"></a>JS 闭包</h2><blockquote><p>如果一个函数能访问另一个函数中的变量，则这个函数就称为闭包。最直接的是：函数a中定义了一个函数b，且在函数a外能够调用这个函数b，就会形成闭包。</p></blockquote><p>注意：闭包只能取得包含函数的变量的最后一个值，如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getButton</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">          <span class="keyword">var</span> element=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">          <span class="keyword">var</span> elem_text=<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;Button&quot;</span>+i);</span><br><span class="line">          element.<span class="title function_">appendChild</span>(elem_text);</span><br><span class="line">          <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(element);</span><br><span class="line"></span><br><span class="line">          element.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;    <span class="comment">//闭包</span></span><br><span class="line">              <span class="title function_">alert</span>(i);</span><br><span class="line">          &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="title function_">getButton</span>();</span><br></pre></td></tr></table></figure><p>点击按钮时弹出的警告框的值都为3.将代码做如下修改：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getButton</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">          <span class="keyword">var</span> element=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">          <span class="keyword">var</span> elem_text=<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;Button&quot;</span>+i);</span><br><span class="line">          element.<span class="title function_">appendChild</span>(elem_text);</span><br><span class="line">          <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(element);</span><br><span class="line"></span><br><span class="line">          element.<span class="property">onclick</span>=(<span class="keyword">function</span>(<span class="params">num</span>)&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                  <span class="title function_">alert</span>(num);</span><br><span class="line">              &#125;;</span><br><span class="line">          &#125;)(i);  <span class="comment">//强制将参数i传递进去并立即调用执行</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getButton</span>();</span><br></pre></td></tr></table></figure><p>当然有多种方法，将红色部分也可改为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">num</span>)&#123;element.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;   </span><br><span class="line">  <span class="title function_">alert</span>(num);</span><br><span class="line"> &#125;;  <span class="comment">//这样也可以</span></span><br><span class="line">&#125;)(i);</span><br></pre></td></tr></table></figure><p>再举个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;第一次&#x27;</span>,<span class="string">&#x27;第二次&#x27;</span>,<span class="string">&#x27;第三次&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;info&#x27;</span>).<span class="property">innerHTML</span> = arr[i];</span><br><span class="line">    &#125;,i*<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则三次输出结果都为undefined，原因同样是闭包只能取得包含函数的变量中的最后一个值。for循环执行完毕后，i的值为3，而arr[3]=undefined;对函数进行修改如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;第一次&#x27;</span>,<span class="string">&#x27;第二次&#x27;</span>,<span class="string">&#x27;第三次&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">  (<span class="keyword">function</span>(<span class="params">num</span>)&#123;</span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;info&#x27;</span>).<span class="property">innerHTML</span> = arr[i];</span><br><span class="line">     &#125;,i*<span class="number">1000</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果，刚打开页面时显示”第一次”，再过1秒显示“第二次”，再过2秒显示“第三次”。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js实现数组去重的方式(7种)</title>
      <link href="/2022/04/06/javascript/JS_ShiXianShuZuQuChong/"/>
      <url>/2022/04/06/javascript/JS_ShiXianShuZuQuChong/</url>
      
        <content type="html"><![CDATA[<h2 id="JS数组去重的方式"><a href="#JS数组去重的方式" class="headerlink" title="JS数组去重的方式"></a>JS数组去重的方式</h2><p>例：将下面数组去除重复元素（以多种数据类型为例）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>]</span><br></pre></td></tr></table></figure><h4 id="1-利用Set-Array-from"><a href="#1-利用Set-Array-from" class="headerlink" title="1.利用Set()+Array.from()"></a>1.利用Set()+Array.from()</h4><p>Set对象：是值的集合，你可以按照插入的顺序迭代它的元素。 Set中的元素只会出现一次，即Set中的元素是唯一的。<br>Array.from() 方法：对一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined, NaN ]</span></span><br></pre></td></tr></table></figure><p>注意：以上去方式对NaN和undefined类型去重也是有效的，是因为NaN和undefined都可以被存储在Set中， NaN之间被视为相同的值（尽管在js中：NaN !== NaN）。</p><h4 id="2-利用两层循环-数组的splice方法"><a href="#2-利用两层循环-数组的splice方法" class="headerlink" title="2.利用两层循环+数组的splice方法"></a>2.利用两层循环+数组的splice方法</h4><blockquote><p>通过两层循环对数组元素进行逐一比较，然后通过splice方法来删除重复的元素。此方法对NaN是无法进行去重的，因为进行比较时NaN !== NaN。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeDuplicate</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] === arr[j]) &#123;</span><br><span class="line">        arr.<span class="title function_">splice</span>(j, <span class="number">1</span>)</span><br><span class="line">        len-- <span class="comment">// 减少循环次数提高性能</span></span><br><span class="line">        j-- <span class="comment">// 保证j的值自加后不变</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">removeDuplicate</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined, NaN, NaN ]</span></span><br></pre></td></tr></table></figure><h4 id="3-利用数组的indexOf方法"><a href="#3-利用数组的indexOf方法" class="headerlink" title="3.利用数组的indexOf方法"></a>3.利用数组的indexOf方法</h4><blockquote><p>新建一个空数组，遍历需要去重的数组，将数组元素存入新数组中，存放前判断数组中是否已经含有当前元素，没有则存入。此方法也无法对NaN去重。</p></blockquote><p>indexOf() 方法：返回调用它的String对象中第一次出现的指定值的索引，从 fromIndex 处进行搜索。如果未找到该值，则返回 -1。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeDuplicate</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newArr = []</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (newArr.<span class="title function_">indexOf</span>(item) === -<span class="number">1</span>) &#123;</span><br><span class="line">      newArr.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> newArr <span class="comment">// 返回一个新数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">removeDuplicate</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined, NaN, NaN ]</span></span><br></pre></td></tr></table></figure><h4 id="4-利用数组的includes方法"><a href="#4-利用数组的includes方法" class="headerlink" title="4.利用数组的includes方法"></a>4.利用数组的includes方法</h4><blockquote><p>此方法逻辑与indexOf方法去重异曲同工，只是用includes方法来判断是否包含重复元素。</p></blockquote><p>includes()方法：用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回 false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeDuplicate</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newArr = []</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!newArr.<span class="title function_">includes</span>(item)) &#123;</span><br><span class="line">      newArr.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">removeDuplicate</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined, NaN ]</span></span><br></pre></td></tr></table></figure><p>注意：为什么includes能够检测到数组中包含NaN，其涉及到includes底层的实现。如下图为includes实现的部分代码，在进行判断是否包含某元素时会调用sameValueZero方法进行比较，如果为NaN，则会使用isNaN()进行转化。</p><p>具体实现可参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes</a><br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/70833182-7721-44ba-b4ef-c0e82878fc92.png"><br>简单测试includes()对NaN的判断：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> testArr = [<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="title class_">NaN</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(testArr.<span class="title function_">includes</span>(<span class="title class_">NaN</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="5-利用数组的filter-indexOf"><a href="#5-利用数组的filter-indexOf" class="headerlink" title="5.利用数组的filter()+indexOf()"></a>5.利用数组的filter()+indexOf()</h4><blockquote><p>filter方法会对满足条件的元素存放到一个新数组中，结合indexOf方法进行判断。</p></blockquote><p>filter() 方法：会创建一个新数组，其包含通过所提供函数实现的测试的所有元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeDuplicate</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(item) === index</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">removeDuplicate</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined ]</span></span><br></pre></td></tr></table></figure><p>注意：这里的输出结果中不包含NaN，是因为indexOf()无法对NaN进行判断，即arr.indexOf(item) === index返回结果为false。测试如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> testArr = [<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="title class_">NaN</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(testArr.<span class="title function_">indexOf</span>(<span class="title class_">NaN</span>)) <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h4 id="6-利用Map"><a href="#6-利用Map" class="headerlink" title="6.利用Map()"></a>6.利用Map()</h4><blockquote><p>Map对象是JavaScript提供的一种数据结构，结构为键值对形式，将数组元素作为map的键存入，然后结合has()和set()方法判断键是否重复。</p></blockquote><p>Map 对象：用于保存键值对，并且能够记住键的原始插入顺序。任何值（对象或者原始值）都可以作为一个键或一个值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeDuplicate</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  <span class="keyword">const</span> newArr = []</span><br><span class="line"></span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!map.<span class="title function_">has</span>(item)) &#123; <span class="comment">// has()用于判断map是否包为item的属性值</span></span><br><span class="line">      map.<span class="title function_">set</span>(item, <span class="literal">true</span>) <span class="comment">// 使用set()将item设置到map中，并设置其属性值为true</span></span><br><span class="line">      newArr.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">removeDuplicate</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined, NaN ]</span></span><br></pre></td></tr></table></figure><p>注意：使用Map()也可对NaN去重，原因是Map进行判断时认为NaN是与NaN相等的，剩下所有其它的值是根据 === 运算符的结果判断是否相等。</p><h4 id="7-利用对象"><a href="#7-利用对象" class="headerlink" title="7.利用对象"></a>7.利用对象</h4><blockquote><p>其实现思想和Map()是差不多的，主要是利用了对象的属性名不可重复这一特性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeDuplicate</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newArr = []</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!obj[item]) &#123;</span><br><span class="line">      newArr.<span class="title function_">push</span>(item)</span><br><span class="line">      obj[item] = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">removeDuplicate</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined, NaN ]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS相关 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nuxt.js 报错 window is not defined || document is not defined</title>
      <link href="/2022/04/06/nuxt/Nuxt.js_BCWindowIsNotDefined_documentIsNotDefined/"/>
      <url>/2022/04/06/nuxt/Nuxt.js_BCWindowIsNotDefined_documentIsNotDefined/</url>
      
        <content type="html"><![CDATA[<h2 id="Nuxt-js-报错-window-is-not-defined-document-is-not-defined"><a href="#Nuxt-js-报错-window-is-not-defined-document-is-not-defined" class="headerlink" title="Nuxt.js 报错 window is not defined || document is not defined"></a>Nuxt.js 报错 window is not defined || document is not defined</h2><h3 id="情况1：-自己的写的函数里包含window等"><a href="#情况1：-自己的写的函数里包含window等" class="headerlink" title="情况1： 自己的写的函数里包含window等"></a>情况1： 自己的写的函数里包含window等</h3><p>报错原因：因为Nuxt为服务器端渲染，所以在编译打包时会区分服务端渲染还是客户端渲染(浏览器)，在vue文件中使用window对象报错的原因是，webpack将其加入了服务端脚本中，所以会报错。所以在使用时，应该判断当前代码环境是否是浏览器环境。</p><p>解决方案:</p><blockquote><p>1.通过 process.client 判断</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (process.client) &#123;</span><br><span class="line">  ... // 这里就是操作window对象的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.将涉及到window的写在 mounted 生命周期里</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">// window ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.使用 no-ssr 组件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;kafuuchino/&gt;</span><br><span class="line">        &lt;no-ssrplaceholder=&quot;Loading...&quot;&gt;</span><br><span class="line">            &lt;!-- 此组件仅在客户端呈现 --&gt;</span><br><span class="line">            &lt;comments/&gt;</span><br><span class="line">        &lt;/no-ssr&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="情况2：-第三方插件里包含window等"><a href="#情况2：-第三方插件里包含window等" class="headerlink" title="情况2： 第三方插件里包含window等"></a>情况2： 第三方插件里包含window等</h3><p>报错原因：还有一种就是项目里会引入很多第三方组件，这些组件里也有可能会包含window等一些服务端不支持的内容</p><p>解决方案:</p><blockquote><p>1.将插件设置为客户端渲染<br>将 插件 文件路径配置到 nuxt.config.js 的 plugins 属性中，示例如下</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line"> //其它配置项...</span><br><span class="line">plugins: [</span><br><span class="line">    &#123; </span><br><span class="line">    src: &#x27;~/plugins/kafuuchino&#x27;,</span><br><span class="line">    ssr: false // 此处的 ssr:false 就是将其改为非服务器端渲染</span><br><span class="line">    &#125; </span><br><span class="line">],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完配置文件需要重新启动项目！</p>]]></content>
      
      
      <categories>
          
          <category> Nuxt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nuxt </tag>
            
            <tag> NuxtJs报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js实现数组扁平化</title>
      <link href="/2022/04/05/javascript/JS_ShiXianShuZuBianPingHua/"/>
      <url>/2022/04/05/javascript/JS_ShiXianShuZuBianPingHua/</url>
      
        <content type="html"><![CDATA[<h2 id="数组扁平化的方式"><a href="#数组扁平化的方式" class="headerlink" title="数组扁平化的方式"></a>数组扁平化的方式</h2><p>什么是数组扁平化？</p><p>数组扁平化：指将一个多维数组转化为一个一维数组。</p><p>例：将下面数组扁平化处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]] <span class="comment">// ---&gt; [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><h4 id="1-使用flat"><a href="#1-使用flat" class="headerlink" title="1.使用flat()"></a>1.使用flat()</h4><blockquote><p>flat() 方法是ES10提出的，它会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。（flat意为“水平的；平坦的”）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result1 = arr.<span class="title function_">flat</span>(<span class="title class_">Infinity</span>) <span class="comment">// 指定深度为无限</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1) <span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result2 = arr.<span class="title function_">flat</span>(<span class="number">1</span>) <span class="comment">// 指定深度为1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2) <span class="comment">// [ 1, 2, 3, [ 4, 5 ] ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result3 = arr.<span class="title function_">flat</span>(<span class="number">2</span>) <span class="comment">// 指定深度为2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result3) <span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><h4 id="2-使用正则"><a href="#2-使用正则" class="headerlink" title="2.使用正则"></a>2.使用正则</h4><p>以下做法得到的数组元素都会变成字符串，不建议使用；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result1 = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr).<span class="title function_">replace</span>(<span class="regexp">/\[|\]/g</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1) <span class="comment">// [ &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27; ] 数组元素都变成了字符串</span></span><br></pre></td></tr></table></figure><p>对以上方法进行优化处理；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;[&#x27;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr).<span class="title function_">replace</span>(<span class="regexp">/\[|\]/g</span>, <span class="string">&#x27;&#x27;</span>) + <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2) <span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><h4 id="3-使用reduce-concat"><a href="#3-使用reduce-concat" class="headerlink" title="3.使用reduce()+concat()"></a>3.使用reduce()+concat()</h4><blockquote><p>使用reduce拿到数组的当前值和前一项值，判断当前值是否为数组，初始值设置为[]，然后使用concat进行数组合并。</p></blockquote><p>reduce()方法：对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。</p><p>concat()方法：用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, current</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> pre.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(current) ? <span class="title function_">flatten</span>(current) : current)</span><br><span class="line">  &#125;, [])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">flatten</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><h4 id="4-使用函数递归"><a href="#4-使用函数递归" class="headerlink" title="4.使用函数递归"></a>4.使用函数递归</h4><blockquote><p>循环遍历数组，发现含有数组元素就进行递归处理，最终将数组转为一维数组。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = []</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">exec</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(item)) &#123;</span><br><span class="line">      <span class="title function_">exec</span>(item)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">exec</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><h4 id="5-使用扩展运算符-concat"><a href="#5-使用扩展运算符-concat" class="headerlink" title="5.使用扩展运算符+concat()"></a>5.使用扩展运算符+concat()</h4><blockquote><p>ES6新推出的扩展运算符能对数组进行降维处理（一次降一维），循环判断是否含有数组，进行concat合并。</p></blockquote><p>some()方法：测试数组中是不是至少有1个元素通过了被提供的函数测试（它返回的是一个Boolean类型的值）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">while</span> (arr.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(item))) &#123;</span><br><span class="line">    arr = [].<span class="title function_">concat</span>(...arr)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">flatten</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS相关 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MD语法入门</title>
      <link href="/2022/04/03/md/MdYuFaRuMen/"/>
      <url>/2022/04/03/md/MdYuFaRuMen/</url>
      
        <content type="html"><![CDATA[<p>.md即markdown文件的基本常用编写语法,是一种快速标记、快速排版语言，现在很多前段项目中的说明文件readme等都是用.md文件编写的，而且很多企业也在在鼓励使用这种编辑方式，特别作为一个前端从业者更要学会使用这种语言。下面就简单和大家分享一些.md基本语法</p><h2 id="一、基本符号：-gt"><a href="#一、基本符号：-gt" class="headerlink" title="一、基本符号：* - +. &gt;"></a>一、基本符号：* - +. &gt;</h2><p>基本上所有的markdown标记都是基于这四个符号或组合，需要注意的是，如果以基本符号开头的标记，注意基本符号后有一个用于分割标记符和内容的空格。</p><h2 id="二、标题"><a href="#二、标题" class="headerlink" title="二、标题"></a>二、标题</h2><p>1.前面带#号，后面带文字，分别表示h1-h6,只到h6，而且h1下面会有一条横线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">## 五级标题</span><br><span class="line">### 六级标题</span><br></pre></td></tr></table></figure><p>2.相当于标签闭合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题 #</span><br><span class="line">## 二级标题 ##</span><br><span class="line">### 三级标题 ###</span><br><span class="line">#### 四级标题 ####</span><br><span class="line">## 五级标题 ##</span><br><span class="line">### 六级标题 ##</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/9718d9a5-0b73-4496-a1a9-9bed247b51b5.webp" alt="标题.png" title="标题"></p><h2 id="三、列表"><a href="#三、列表" class="headerlink" title="三、列表"></a>三、列表</h2><p>无序列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//形式一</span><br><span class="line">+ a</span><br><span class="line">+ b</span><br><span class="line">+ c</span><br><span class="line">//形式二</span><br><span class="line">- d</span><br><span class="line">- e</span><br><span class="line">- f</span><br><span class="line">//形式三</span><br><span class="line">* g</span><br><span class="line">* h</span><br><span class="line">* i</span><br></pre></td></tr></table></figure><p>以上三种形式，效果其实都是一样的：<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/d037e24f-f0aa-4d8c-9b1e-a91784fedf89.webp" alt="无序列表.png" title="无序列表"></p><p>有序列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//正常形式</span><br><span class="line">1. abc</span><br><span class="line">2. bcd</span><br><span class="line">3. cde</span><br><span class="line">//错序效果</span><br><span class="line">2. fgh</span><br><span class="line">3. ghi</span><br><span class="line">5. hij</span><br></pre></td></tr></table></figure><p>效果图：<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/8123cec4-89e3-4c20-8132-6f1049b0d8b4.webp" alt="有序列表及错序效果图.png" title="有序列表及错序效果图"></p><blockquote><p>如图，注意，数字后面的点只能是英文的点，有序列表的序号是根据第一行列表的数字顺序来的，<br>错序列表的序号本来是序号是乱的， 但是还是显示 2 3 5</p></blockquote><p>嵌套列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//无序列表嵌套</span><br><span class="line">+ 123</span><br><span class="line">    + abc</span><br><span class="line">    + bcd</span><br><span class="line">    + cde</span><br><span class="line">+ 465</span><br><span class="line">+ 789</span><br><span class="line">//有序列表嵌套</span><br><span class="line">1. abcd</span><br><span class="line">    1. abcde</span><br><span class="line">    2. abcde</span><br><span class="line">    3. abcde</span><br><span class="line">2. bcde</span><br><span class="line">3. cdef</span><br></pre></td></tr></table></figure><p>效果图：<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/b66bb201-dfb0-432d-a07e-5c29c29349c9.webp" alt="有序列表及错序效果图.png" title="有序列表及错序效果图"></p><blockquote><p>列表可以嵌套，使用时在嵌套列表前按 tab 或 空格 来缩进,去控制列表的层数</p></blockquote><h2 id="四、引用说明区块"><a href="#四、引用说明区块" class="headerlink" title="四、引用说明区块"></a>四、引用说明区块</h2><p>对某个部分做的内容做一些说明或者引用某某的话等，可以用这个语法。</p><p>正常形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用内容、说明内容。在语句前面加一个 &gt; ，注意是英文的那个右尖括号，注意空格，引用因为是一个区块，理论上是应该什么内容都可以放，比如说：标题，列表，引用等等。</span><br></pre></td></tr></table></figure><p>效果图：<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/9ea626c3-d294-48ae-b216-7eaf9854d455.webp" alt="区块.png" title="区块"></p><p>嵌套区块</p><p>这里我只介绍一下我常用的方法，也是个人认为比较规范的一种方法，就是给区块的下一级区块多加一个右尖括号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; 一级引用</span><br><span class="line">&gt;&gt; 二级引用</span><br><span class="line">&gt;&gt;&gt; 三级引用</span><br><span class="line">&gt;&gt;&gt;&gt; 四级引用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; 五级引用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt; 六级引用</span><br></pre></td></tr></table></figure><p>效果图：<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/5683dc0f-80f5-4084-94b4-6be6ca1af573.webp" alt="嵌套区块.png" title="嵌套区块"></p><h2 id="五、代码块"><a href="#五、代码块" class="headerlink" title="五、代码块"></a>五、代码块</h2><p>在发布一些技术文章会涉及展示代码的问题，这时候代码块就显得尤为重要。</p><p>少量代码，单行使用，直接用`包裹起来就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">` shaoliangdaima,danhangshiyong `</span><br></pre></td></tr></table></figure><p>效果图：<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/3d28e400-33d0-4139-9bcc-d7a81e3d6eff.webp" alt="单行代码块.png" title="单行代码块"></p><p>大量代码，需要多行使用，用```包裹起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">daliangdaima,xuyaoduohangshiyong</span><br><span class="line">daliangdaima,xuyaoduohangshiyong</span><br><span class="line">daliangdaima,xuyaoduohangshiyong</span><br><span class="line">daliangdaima,xuyaoduohangshiyong</span><br><span class="line">daliangdaima,xuyaoduohangshiyong</span><br></pre></td></tr></table></figure><p>效果图：<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/89232b39-b6a3-4b3c-9da8-8afc2a693967.webp" alt="多行代码.png" title="多行代码"></p><h2 id="六、链接"><a href="#六、链接" class="headerlink" title="六、链接"></a>六、链接</h2><p>行内式<br>链接的文字放在[]中，链接地址放在随后的()中，链接也可以带title属性，链接地址后面空一格，然后用引号引起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[68HTML](https://www.jianshu.com &quot;创作你的创作&quot;),</span><br><span class="line">是一个创作社区,任何人均可以在其上进行创作。用户在简书上面可以方便的创作自己的作品,互相交流。 </span><br></pre></td></tr></table></figure><p>参数式<br>链接的文字放在[]中，链接地址放在随后的:后，链接地址后面空一格，然后用引号引起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[68HTML]: https://www.jianshu.com &quot;创作你的创作&quot;</span><br><span class="line">[68HTML]是一个创作社区,任何人均可以在其上进行创作。用户在简书上面可以方便的创作自己的作品,互相交流。</span><br><span class="line">//参数定义的其他写法</span><br><span class="line">[68HTML]: https://www.jianshu.com &#x27;创作你的创作&#x27;</span><br><span class="line">[68HTML]: https://www.jianshu.com (创作你的创作)</span><br><span class="line">[68HTML]: &lt;https://www.jianshu.com&gt; &quot;创作你的创作&quot;</span><br></pre></td></tr></table></figure><p>以上两种方式其效果图都是一样的，如下：<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/ab8a3736-baa7-433f-9ca3-b9fe45c519ca.webp" alt="链接.png" title="链接"></p><h2 id="七、图片"><a href="#七、图片" class="headerlink" title="七、图片"></a>七、图片</h2><p>行内式<br>和链接的形式差不多，图片的名字放在[]中，图片地址放在随后的()中，title属性（图片地址后面空一格，然后用引号引起来）,注意的是[]前要加上!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![my-logo.png](https://upload-images.jianshu.io/upload_images/13623636-6d878e3d3ef63825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 &quot;my-logo&quot;)</span><br></pre></td></tr></table></figure><p>参数式<br>图片的文字放在[]中，图片地址放在随后的:后，title属性（图片地址后面空一格，然后用引号引起来）,注意引用图片的时候在[]前要加上!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[my-logo.png]: https://upload-images.jianshu.io/upload_images/13623636-6d878e3d3ef63825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 &quot;my-logo&quot;</span><br><span class="line">![my-logo.png]</span><br><span class="line">//参数定义的其他写法</span><br><span class="line">[my-logo.png]: https://upload-images.jianshu.io/upload_images/13623636-6d878e3d3ef63825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 &#x27;my-logo&#x27;</span><br><span class="line">[my-logo.png]: https://upload-images.jianshu.io/upload_images/13623636-6d878e3d3ef63825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 (my-logo)</span><br><span class="line">[my-logo.png]: &lt;https://upload-images.jianshu.io/upload_images/13623636-6d878e3d3ef63825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&gt; &quot;my-logo&quot;</span><br></pre></td></tr></table></figure><p>以上两种方式其效果图都是一样的，如下：<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/9ec3f832-7a9c-406c-b81b-caa54b9f7484.webp" alt="my-logo.png" title="my-logo"></p><h2 id="八、分割线"><a href="#八、分割线" class="headerlink" title="八、分割线"></a>八、分割线</h2><p>分割线可以由* - _（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- - -</span><br><span class="line">------</span><br><span class="line">***</span><br><span class="line">* * *</span><br><span class="line">******</span><br><span class="line">___</span><br><span class="line">_ _ _</span><br><span class="line">______</span><br></pre></td></tr></table></figure><p>以上代码的效果图均为：<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/7c253eaa-308d-4fb1-aa67-1073a3602482.webp" alt="分割线.png" title="分割线"></p><h2 id="九、其他"><a href="#九、其他" class="headerlink" title="九、其他"></a>九、其他</h2><p>强调字体<br>一个星号或者是一个下划线包起来，会转换为<em>倾斜，如果是2个，会转换为<strong>加粗</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*md*    </span><br><span class="line">**md**</span><br><span class="line">_md_   </span><br><span class="line">__md__</span><br></pre></td></tr></table></figure><p>效果图：<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/ac2a865f-6a28-46c5-af97-12df97d02978.webp" alt="强调字体.png" title="强调字体"><br>转义<br>基本上和js转义一样,\加需要转义的字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\\</span><br><span class="line">\*</span><br><span class="line">\+</span><br><span class="line">\-</span><br><span class="line">\`</span><br><span class="line">\_</span><br></pre></td></tr></table></figure><p>删除线<br>用~~把需要显示删除线的字符包裹起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~删除~~</span><br></pre></td></tr></table></figure><p>效果图：<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/9d5191d3-57d2-439d-a5e7-b13411ccfaa1.webp" alt="删除线.png" title="删除线"></p><h2 id="十、表格"><a href="#十、表格" class="headerlink" title="十、表格"></a>十、表格</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//例子一</span><br><span class="line">|123|234|345|</span><br><span class="line">|:-|:-:|-:|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">//例子二</span><br><span class="line">|123|234|345|</span><br><span class="line">|:---|:---:|---:|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">//例子三</span><br><span class="line">123|234|345</span><br><span class="line">:-|:-:|-:</span><br><span class="line">abc|bcd|cde</span><br><span class="line">abc|bcd|cde</span><br><span class="line">abc|bcd|cde</span><br></pre></td></tr></table></figure><blockquote><p>上面三个例子的效果一样，由此可得：</p><ol><li>表格的格式不一定要对的非常起，但是为了良好的变成风格，尽量对齐是最好的</li><li>分割线后面的冒号表示对齐方式，写在左边表示左对齐，右边为右对齐，两边都写表示居中</li></ol></blockquote><p>效果图如下：<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/ce9df783-0efc-4a0c-a119-9116b2ca1bdc.webp" alt="表格.png" title="表格"></p><blockquote><p>这篇文章的编写借鉴了很多前辈的经验，同时鉴赏我自己的总结，跟大家一起分享了。<br>即使遇到了不幸的灾难，已经开始了的事情决不放弃。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> md </category>
          
      </categories>
      
      
        <tags>
            
            <tag> md </tag>
            
            <tag> md基本语法 </tag>
            
            <tag> md入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bcrypt密码生成计算器</title>
      <link href="/2022/04/02/bcrypt/Bcrypt_MiMaShengChengJiSuanQi/"/>
      <url>/2022/04/02/bcrypt/Bcrypt_MiMaShengChengJiSuanQi/</url>
      
        <content type="html"><![CDATA[<h2 id="Bcrypt密码在线生成计算器"><a href="#Bcrypt密码在线生成计算器" class="headerlink" title="Bcrypt密码在线生成计算器"></a>Bcrypt密码在线生成计算器</h2><blockquote><p>bcrypt，是一个跨平台的文件加密工具。由它加密的文件可在所有支持的操作系统和处理器上进行转移。它的口令必须是8至56个字符，并将在内部被转化为448位的密钥。bcrypt 使用的是布鲁斯·施内尔在1993年发布的 Blowfish 加密算法。具体来说，bcrypt 使用保罗·柯切尔的算法实现。随 bcrypt 一起发布的源代码对原始版本作了略微改动。</p></blockquote><p>在线生成Bcrypt Hash 加密：<a href="https://www.jisuan.mobi/p163u3BN66Hm6JWx.html">https://www.jisuan.mobi/p163u3BN66Hm6JWx.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bcrypt </tag>
            
            <tag> Bcrypt加密 </tag>
            
            <tag> Bcrypt在线加密 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
