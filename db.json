{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/matery/source/css/bb.css","path":"css/bb.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/contact.png","path":"medias/contact.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/icp.png","path":"medias/icp.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/404/index.md","hash":"032e028e738996e2548f2479e32da68f382637fb","modified":1649314948986},{"_id":"source/_posts/bcrypt/Bcrypt_MiMaShengChengJiSuanQi.md","hash":"c70232654f67b3d30f78d0ffa3e225bd5dff6d4b","modified":1651907167088},{"_id":"source/CNAME","hash":"27e8986a43d24bd405af21250870a7f539a52c97","modified":1651905813738},{"_id":"source/_posts/hexo/GITHUBPAGESZIDINGYIYUMINGHOUMEICIHEXODDOUHUISHIXIAOJIEJUE.md","hash":"f936f2833b47d556a6f345482ef6341d18128864","modified":1651906189129},{"_id":"source/_posts/hexo/HexoBoKeXiuGaiArchiveYeMianXianShiWenZhangShuLiang.md","hash":"638b9ee82500f31877a55c3aae99eb62475a97fe","modified":1649314948990},{"_id":"source/_posts/hexo/HexoChengXuArchiveYeMianShuLiangSheZhi.md","hash":"0660fc09e44c789fcc7555b0c94007cb7e795174","modified":1649314948991},{"_id":"source/_posts/javascript/JSZhongDeAsyncYuAwaitZenMeShiYong.md","hash":"b16fe4e186eb5fe919a1c4b708bd1c6150b060ec","modified":1649314948992},{"_id":"source/_posts/javascript/JS_ZiFuCuanJieQuHanShu.md","hash":"8c8ebed5c3adaacb42b73672a9882932b14b37ab","modified":1651907167165},{"_id":"source/_posts/javascript/JS_bibao.md","hash":"809794090f2fc2000e40f572bd59a9ced4e025e8","modified":1651907167035},{"_id":"source/_posts/javascript/JS_ShiXianShuZuBianPingHua.md","hash":"18db8efaaef2b7c82ed7c1bb4dc33ce2311e2b22","modified":1651907167449},{"_id":"source/_posts/javascript/JavaScriptDeFangDouYuJieLiu.md","hash":"01bd59f79b34ffd305e42dd13da68b4de0959942","modified":1649314948996},{"_id":"source/_posts/javascript/JS_ShiXianShuZuQuChong.md","hash":"118e7f3b7acf77876f1d25051cdef4522a4f119c","modified":1651907167501},{"_id":"source/_posts/nuxt/Nuxt.js_AsyncDataYiCiXingQingQiuDuoGeJieKou.md","hash":"4f2d4cc69d4a3038f13c691388ad0d133995d815","modified":1651907167536},{"_id":"source/_posts/md/MdYuFaRuMen.md","hash":"a06a7168e7c0a0b223e0249f3e1099b206477c51","modified":1651907166670},{"_id":"source/_posts/typescript/XiangJieTypeScriptDeJiChuLeiXing.md","hash":"48a1e2e76ab54c661736ca15e23d859de8fe2393","modified":1649314949001},{"_id":"source/_posts/nuxt/Nuxt.js_BCWindowIsNotDefined_documentIsNotDefined.md","hash":"58a8fee5371c899a9d580ecce70968be5da37bd0","modified":1651907167319},{"_id":"source/_posts/typescript/RuHeLiYongTypeScriptFengZhuangBenDiCunCu.md","hash":"5630b39832e37e72f02913ad24a3ff0bc2dab428","modified":1649314949000},{"_id":"source/_posts/weChat/WeiXinXiaoChengXuZhongWXSWenJianDeYiXieMiaoYongFenXiang.md","hash":"afed2981f39a54947faaa15f4d3dc851c3644581","modified":1651907166941},{"_id":"source/_posts/weChat/WinXinXiaoChengXuZhongShiYongVantKuangJiaDeJuTiBuZhou.md","hash":"2be4ce56899145ce6714bb6633f5d99c70d18379","modified":1649314949003},{"_id":"themes/matery/.gitignore","hash":"5340c994462c7345373e075529f40e60c1952f00","modified":1649314949004},{"_id":"themes/matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1649314949005},{"_id":"themes/matery/CHANGELOG.md","hash":"484a703733b839bd98e016ddb015f028c2593fef","modified":1649314949005},{"_id":"themes/matery/README_CN.md","hash":"60f037d8c27304c15d0ba74b7177acaef393e47e","modified":1649314949007},{"_id":"themes/matery/README.md","hash":"03b6183155f6d0ad7b24a62e938468122ee55f68","modified":1649314949006},{"_id":"themes/matery/languages/default.yml","hash":"9baf9370d0d7494e8575934e4bd0fa6d24484052","modified":1649314949009},{"_id":"themes/matery/_config.yml","hash":"27f7bd228f74ba4c28ff4de48102b97cc9bf9a02","modified":1651907167434},{"_id":"themes/matery/languages/zh-CN.yml","hash":"13ce732a54ce08b0ca01f14fd09cbe8fc418de21","modified":1649314949010},{"_id":"themes/matery/layout/404.ejs","hash":"162136ceca6c95928c90a1adef8fabc2161d5c0e","modified":1649314949012},{"_id":"themes/matery/layout/about.ejs","hash":"88e23163aae5dff7a2e7050f55c3754f0e76ae68","modified":1649314949044},{"_id":"themes/matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1649314949011},{"_id":"themes/matery/layout/archive.ejs","hash":"57733d52d17361e735fcc95f875e0b1b9ebdcbd8","modified":1649314949044},{"_id":"themes/matery/layout/bb.ejs","hash":"6deb819e47fe11edd2fc87a6296cae725a0275f9","modified":1649314949045},{"_id":"themes/matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1649314949046},{"_id":"themes/matery/layout/category.ejs","hash":"4ac716d15d84e7c37f07308a5ec008a2ac090c9b","modified":1649314949046},{"_id":"themes/matery/layout/contact.ejs","hash":"b40812133004655d7f7d361228531e4001eb0623","modified":1649314949047},{"_id":"themes/matery/layout/friends.ejs","hash":"a709898778c161dcb6d5bea047b8cb921628040c","modified":1649314949047},{"_id":"themes/matery/layout/index.ejs","hash":"25d5f9fc7368b073b5d70dfd77a4b11b8b0fdcaf","modified":1649314949048},{"_id":"themes/matery/layout/layout.ejs","hash":"3ed55e0437a21b7ffd10dac5da79ce48a25b753a","modified":1649314949048},{"_id":"themes/matery/layout/post.ejs","hash":"3783bb4d7807e3a3701d67499a878c69a0a872d6","modified":1649314949049},{"_id":"themes/matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1649314949050},{"_id":"themes/matery/layout/tag.ejs","hash":"058eb27ff10f5314d8b9e334c54419b9a6572315","modified":1649314949050},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"be527741c39c9dc4a13ad712b49fe8db0147fe1e","modified":1649314949013},{"_id":"themes/matery/source/favicon.png","hash":"16ce62d2bb0ec7c0b83aa865830f74ddafe69e50","modified":1649314949053},{"_id":"themes/matery/layout/_partial/background.ejs","hash":"6b4341fbba291c53de91babb2a0d69940a8d6547","modified":1649314949013},{"_id":"themes/matery/layout/_partial/baidu-analytics.ejs","hash":"4b01030b7136192bdbd704e29a0fe12f92767551","modified":1649314949014},{"_id":"themes/matery/layout/_partial/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":1649314949014},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"c4604844441078a1baee4448be8786757573d9a4","modified":1649314949015},{"_id":"themes/matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1649314949016},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"0937fe9c71285a96859574fee75685e03d6cc9ca","modified":1649314949016},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"1b392f2160f962f62f3ddf5e1155c7f2f4888e1d","modified":1649314949017},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"27764936791ce36b527bea63689435346bbfb425","modified":1649314949018},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1649314949019},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1649314949020},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"90888c945384aa1ee4650bd43bd7ea670f25828c","modified":1649314949020},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"9aabbdebcd180b79e9f466338755b65dcd93651e","modified":1649314949018},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"c15f5184367972e635dec9b2d4aa2b94415c54cb","modified":1649314949022},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"4213426600a30a4d367807c8eac2bb96d10e4b2d","modified":1649314949022},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"baf823506b71f257a42b44adaa52d42344b9cb65","modified":1649314949021},{"_id":"themes/matery/layout/_partial/minivaline.ejs","hash":"e1264587db510ae1885405aed433592291ae74c4","modified":1649314949024},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"8ce2974b19765e1f05d935a4f18abf7c84a980da","modified":1649314949024},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"5a2179a9a3de6f56b0aaa154a11919b8f34fcbf9","modified":1649314949025},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1649314949023},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"d8773abab5d0b672b70a9df20a8f9f7f6b0a2dae","modified":1649314949026},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"e97b60081618e54a8e59f3bb6e0c2d4b15c81a6d","modified":1649314949027},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"274ad665ded32e28402aa6e63579524a5648974f","modified":1649314949027},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"89045a73ce4c486084c8a3ade686676e5d12e5e7","modified":1649314949028},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"de0d5763ddd64463f43135678b64c044884b8406","modified":1649314949029},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"f67bc52bc5a2464ebe30f42c65c0ee38eeec2fda","modified":1649314949030},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"1fb43f421de58aa24458f7d4a4cda44b8a3d62cc","modified":1649314949030},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"4218ed406c43ed781fe78ad8bf1834fa4b76b049","modified":1649314949032},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"90c2ab31492f8226454537d6b987e9399119047d","modified":1649314949031},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"e50fae64b6cfdbed18861eb49eca5018a920c7a4","modified":1649314949032},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"a9b04fd72a3520c497e677c05f61d01d3894037e","modified":1649314949033},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"f640583d45179abc1ef57951e7f61fb9e10f44c9","modified":1649314949033},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"3ef458166041a8a12e493cc5963a5af5d98c1dfc","modified":1649314949035},{"_id":"themes/matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1649314949034},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"131e2eabf6b216210efd0746300889adfee357be","modified":1649314949036},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"8fc0e6172abbed7084b06e3ed637ad37e2752c48","modified":1649314949037},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"008cd2c08842c7ea4298e839dd7fbc89a92b0446","modified":1649314949036},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"9edbeb1ec6212762d597ae7a05b5a219f72c8f98","modified":1649314949039},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"f5259f18a906f2862fe72b90c28125b5f6b7d0b1","modified":1649314949038},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"141f19a8aa41b7a21436f23ce114bd5fda932512","modified":1649314949038},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"20f0b6155eee348276dd91790f6a52b1005a0518","modified":1649314949041},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"fb5ee7674070956d134ddca6890a9bd3f398cc0f","modified":1649314949040},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"5f64edd00d0a7c3b5e90d5ff99c9ebba61482d75","modified":1649314949042},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"d32898104477acef56c33d00a68b48db15dcf2e6","modified":1649314949042},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"bf84b0deb765172445919c5bda15aab647e05e51","modified":1649314949043},{"_id":"themes/matery/source/css/bb.css","hash":"328a49b26ce663d9824c53aced118db4d55f2ac7","modified":1649314949051},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"6eaab5fccff9ad69d1d877a0f0585e2fcb89ba52","modified":1649314949043},{"_id":"themes/matery/source/css/gitment.css","hash":"a718eb5abfc1d4fa6730b835b619aed39d5920e9","modified":1649314949052},{"_id":"themes/matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1649314949053},{"_id":"themes/matery/source/js/matery.js","hash":"724f427e1b9e411c5fdea73c399173776eea6df4","modified":1649314949054},{"_id":"themes/matery/source/css/matery.css","hash":"bf203a24ff12526a2352cf1036b596816b4ea4b7","modified":1649314949052},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"ceae4e22f0fc7fa50cae563d76f137799ab38d16","modified":1649314949052},{"_id":"themes/matery/source/js/search.js","hash":"02e6072d766c6f631b5b75e1d774409103605491","modified":1649314949054},{"_id":"themes/matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1649314949099},{"_id":"themes/matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1649314949106},{"_id":"themes/matery/source/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1649314949107},{"_id":"themes/matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1649314949120},{"_id":"themes/matery/source/medias/logo.png","hash":"bc866d8bf23310ef7a752adfaf7bf5396aec815d","modified":1649314949120},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1649314949055},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1649314949056},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1649314949056},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1649314949057},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1649314949057},{"_id":"themes/matery/source/libs/background/canvas-nest.js","hash":"d2569ef80127ed2f4af7ef4d9f82b037794eec69","modified":1649314949071},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","hash":"0fa06749f8f54e784dd2390bb029b826f2ca3234","modified":1649314949073},{"_id":"themes/matery/source/libs/background/ribbon-dynamic.js","hash":"8f53dbd5f9a40c377664bf8ca0d5d5ed75b91757","modified":1649314949071},{"_id":"themes/matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1649314949072},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","hash":"a01c6ffcea43c7ed0d78369749e964eccaf82d9e","modified":1649314949073},{"_id":"themes/matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1649314949072},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","hash":"3edbe498f7bb9e7daa77f9db30e1b5eeab40e067","modified":1649314949074},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","hash":"066d2c89ad429e44f6467b9267da782ccaad57de","modified":1649314949073},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1649314949075},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1649314949075},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1649314949080},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"9c0bacfbd4519d3859e3bbb06128ba241804d8b1","modified":1649314949079},{"_id":"themes/matery/source/libs/instantpage/instantpage.js","hash":"043eba3c85c2e2009a9fabf3c4fc55537852fd86","modified":1649314949081},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1649314949082},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1649314949082},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1649314949088},{"_id":"themes/matery/source/libs/prism/prism.css","hash":"f48db880f583ad8d078ebaaa7afe60c2991e2997","modified":1649314949092},{"_id":"themes/matery/source/libs/minivaline/MiniValine.js","hash":"005185ce5c8250503a75c370a9eb8f044f016c78","modified":1649314949091},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"748214911655974c2fdc0a9abbc144bb981a1ea4","modified":1649314949092},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1649314949092},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1649314949093},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"9783581bec83e6bd6cd279f0af23a2862f46a587","modified":1649314949097},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1649314949097},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1649314949109},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1649314949111},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1649314949112},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1649314949112},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1649314949114},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1649314949115},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1649314949116},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1649314949116},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1649314949116},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1649314949117},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"8db62a8daa3bf580c4496529022a0700c0340cd3","modified":1649314949121},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1649314949118},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"978e6fd0d110a0af7da8215fcb5295b6096432b0","modified":1649314949122},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1649314949119},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1649314949065},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1649314949064},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1649314949065},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1649314949065},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1649314949084},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1649314949084},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1649314949085},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1649314949085},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1649314949085},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1649314949086},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1649314949086},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1649314949086},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1649314949088},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1649314949087},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1649314949094},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1649314949095},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1649314949095},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1649314949095},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1649314949096},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"de34668d902ec082d17ddb6dd7ad24255fb547c5","modified":1649314949096},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"ba635a17a9d9d132369f9fe4b1fbcaf001ea6ac9","modified":1649314949096},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1649314949076},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1649314949081},{"_id":"themes/matery/source/libs/jquery/jquery.min.js","hash":"a8927ac2830b2fdd4a729eb0eb7f80923539ceb9","modified":1649314949083},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"d6c03e8c3e547b5f48878081d10559b80f626948","modified":1649314949098},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1649314949101},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1649314949102},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1649314949103},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1649314949108},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1649314949109},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1649314949110},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1649314949110},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1649314949112},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1649314949113},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1649314949113},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1649314949114},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1649314949115},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1649314949117},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1649314949118},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1649314949120},{"_id":"themes/matery/source/libs/awesome/css/all.css","hash":"6390d0a6e6211ebbd68b49759b4dec8b2a9f04c9","modified":1649314949059},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1649314949060},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1649314949063},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1649314949062},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1649314949063},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1649314949070},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1649314949070},{"_id":"themes/matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1649314949107},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"7a3534269fd922d722a76c3affefc68e21246898","modified":1649314949080},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"6274d6b757a927fcfef2995fb927885fbdb88d87","modified":1649314949090},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"93c99f815d5b818c9f38b7fc3b18b2d6d8f1f316","modified":1649314949089},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"9cb4babc20eb8fb5a86c4b0cc894fdb0f3cd9534","modified":1649314949099},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1649314949101},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1649314949105},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1649314949106},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1649314949064},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1649314949066},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1649314949069},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1649314949104},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1649314949061},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1649314949078},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1649314949067},{"_id":"public/404.html","hash":"d4bf5779d67092c3f5c46de8d1d91549d0e4a2de","modified":1651907261610},{"_id":"public/search.xml","hash":"e5bf2b72ac027ada262adf71db2c89a2d135791b","modified":1651907261610},{"_id":"public/2022/05/07/hexo/GITHUBPAGESZIDINGYIYUMINGHOUMEICIHEXODDOUHUISHIXIAOJIEJUE/index.html","hash":"426b47e920240dc25d5b35f67dfe24ebe10cffe9","modified":1651907261610},{"_id":"public/2022/04/15/nuxt/Nuxt.js_AsyncDataYiCiXingQingQiuDuoGeJieKou/index.html","hash":"2846651c8f2004a956a5f39e30b62e310544749f","modified":1651907261610},{"_id":"public/2022/04/07/javascript/JSZhongDeAsyncYuAwaitZenMeShiYong/index.html","hash":"b41e793cc99a59cc4886f373274f438e91112911","modified":1651907261610},{"_id":"public/2022/04/07/javascript/JavaScriptDeFangDouYuJieLiu/index.html","hash":"dcdf8abb1c9e31c5dc7b5c930f370328f47c6043","modified":1651907261610},{"_id":"public/2022/04/07/hexo/HexoChengXuArchiveYeMianShuLiangSheZhi/index.html","hash":"80aff6823c31da7b729773645c68a823b22bf3a4","modified":1651907261610},{"_id":"public/2022/04/07/hexo/HexoBoKeXiuGaiArchiveYeMianXianShiWenZhangShuLiang/index.html","hash":"a250e33ab9efc8c9af954fcdf4467f705b0122d1","modified":1651907261610},{"_id":"public/2022/04/07/weChat/WinXinXiaoChengXuZhongShiYongVantKuangJiaDeJuTiBuZhou/index.html","hash":"cb0329586b298a2cdf9842c87b6bc36d9c41bd09","modified":1651907261610},{"_id":"public/2022/04/07/typescript/RuHeLiYongTypeScriptFengZhuangBenDiCunCu/index.html","hash":"2a368cdda731ccc155388c8df5ef3172060c690a","modified":1651907261610},{"_id":"public/2022/04/07/typescript/XiangJieTypeScriptDeJiChuLeiXing/index.html","hash":"93d0e98260cfa01d96673b12049edc5db40d056e","modified":1651907261610},{"_id":"public/2022/04/07/weChat/WeiXinXiaoChengXuZhongWXSWenJianDeYiXieMiaoYongFenXiang/index.html","hash":"10dfb12e09c26d9d361c7dbe39f5859034494826","modified":1651907261610},{"_id":"public/2022/04/07/javascript/JS_ZiFuCuanJieQuHanShu/index.html","hash":"7f6bb16768d80e2f87df189da7e4cad7d5a0f9f6","modified":1651907261610},{"_id":"public/2022/04/06/javascript/JS_bibao/index.html","hash":"e2347e0da6e7370e409eaf3899a8bb3f079c633d","modified":1651907261610},{"_id":"public/2022/04/06/javascript/JS_ShiXianShuZuQuChong/index.html","hash":"4b0b0ddb6ed56211adf3fd66793221386d019112","modified":1651907261610},{"_id":"public/2022/04/06/nuxt/Nuxt.js_BCWindowIsNotDefined_documentIsNotDefined/index.html","hash":"a590051c5b837697ff380a89883816b043b94fd5","modified":1651907261610},{"_id":"public/2022/04/05/javascript/JS_ShiXianShuZuBianPingHua/index.html","hash":"2b2ed8ee31fae6d7b0478db158bbeb7345fe3cb7","modified":1651907261610},{"_id":"public/2022/04/03/md/MdYuFaRuMen/index.html","hash":"9eaf983c9d6b35e636f8a55793c92ec49565a22d","modified":1651907261610},{"_id":"public/2022/04/02/bcrypt/Bcrypt_MiMaShengChengJiSuanQi/index.html","hash":"e745ec4749e15e76b6d58b5ec62a1c3ccaca30f7","modified":1651907261610},{"_id":"public/archives/index.html","hash":"991ffc2f9bc6d9ba77974a3227af9a285a55eb1d","modified":1651907261610},{"_id":"public/archives/page/2/index.html","hash":"6f9421b7d4ef01371d2346e01707a88c7b866a71","modified":1651907261610},{"_id":"public/archives/2022/index.html","hash":"779872a45e0dab81777288aeabddea3e706fdc9d","modified":1651907261610},{"_id":"public/archives/2022/page/2/index.html","hash":"d41b67a6bd124b3c045c0799c2a109b1732f1344","modified":1651907261610},{"_id":"public/archives/2022/04/index.html","hash":"14385849c789b7ed7b66c552956a9c415dfd912e","modified":1651907261610},{"_id":"public/archives/2022/04/page/2/index.html","hash":"50b1045e282facdc46f86e26668bd3fea8a05794","modified":1651907261610},{"_id":"public/archives/2022/05/index.html","hash":"bc3432235a6334b70aa08fadab3d66832bd518c6","modified":1651907261610},{"_id":"public/categories/前端/index.html","hash":"1bfc8904a4a7a7d9e2726e511b096c504330ad2c","modified":1651907261610},{"_id":"public/categories/Hexo/index.html","hash":"63717814006f747d2775d1e9a929274b7f728a24","modified":1651907261610},{"_id":"public/categories/javaScript/index.html","hash":"ce37379a1fa6555a4873ca297e60002a48fcff61","modified":1651907261610},{"_id":"public/categories/JavaScript/index.html","hash":"d38d540bca3cb999b7aaa13c85151deebf92d0c9","modified":1651907261610},{"_id":"public/categories/md/index.html","hash":"36ad0fda12a3950b277185a80d58feefc428811a","modified":1651907261610},{"_id":"public/categories/Nuxt/index.html","hash":"5e5479bfa85a69fd506ca8deb4e91f3af7c9cd51","modified":1651907261610},{"_id":"public/categories/TypeScript/index.html","hash":"1087f2c98510b2f4165cd81759655a252e853595","modified":1651907261610},{"_id":"public/categories/微信小程序/index.html","hash":"c4a37cbbfccca18589c783d4756639c3476a0c43","modified":1651907261610},{"_id":"public/index.html","hash":"d2b4c61e688b24e0839c3e0fd93efab4dab331af","modified":1651907261610},{"_id":"public/page/2/index.html","hash":"ba1918131020ce6cd2267448f28bf305dfa7c267","modified":1651907261610},{"_id":"public/tags/Bcrypt/index.html","hash":"9e8d866f0cb79f8d257fbf83d62c2652604491b9","modified":1651907261610},{"_id":"public/tags/Bcrypt加密/index.html","hash":"5e9758495b04cfe9ea51ba6bd7a4fbbe38038ee2","modified":1651907261610},{"_id":"public/tags/Bcrypt在线加密/index.html","hash":"b10fed01880738fbc81f1b2bd55b11aa917fbdac","modified":1651907261610},{"_id":"public/tags/Hexo/index.html","hash":"a1d8c3132d0d07a416736bcd7a332c1cf5966ebd","modified":1651907261610},{"_id":"public/tags/GitHub/index.html","hash":"68c83ecefe6dd2476ce8816fe96970c7b9bd4971","modified":1651907261610},{"_id":"public/tags/GitHub-Pages/index.html","hash":"a04cd2ec2241f20fc49fb2ce4e4e88b1251daaea","modified":1651907261610},{"_id":"public/tags/javaScript/index.html","hash":"fbfa004ac553b333228b1b157046720980a6aabf","modified":1651907261610},{"_id":"public/tags/async/index.html","hash":"92069ffb82fda59debaa27d4844436923a9f87ce","modified":1651907261610},{"_id":"public/tags/await/index.html","hash":"ba20207ef1dfc2decd485819d749e1729025b86d","modified":1651907261610},{"_id":"public/tags/JS相关/index.html","hash":"94a2a644983e5aaf3e1dab09018bf39584c91321","modified":1651907261610},{"_id":"public/tags/JavaScript/index.html","hash":"0cb5f5db4396aafcde4a9b1a740b2d6f75316961","modified":1651907261610},{"_id":"public/tags/Js相关/index.html","hash":"7de7887448bce9450412c9a660e22715cbe38d91","modified":1651907261610},{"_id":"public/tags/js防抖/index.html","hash":"be6686d48401665bc902481e1bcc5c9acd8e0f2b","modified":1651907261610},{"_id":"public/tags/js节流/index.html","hash":"4de795474c9a58e95d50315a586442483fab7266","modified":1651907261610},{"_id":"public/tags/md/index.html","hash":"4e69707651894fa0d6c62ab853ae05e1ccfe14f0","modified":1651907261610},{"_id":"public/tags/md基本语法/index.html","hash":"ef77c62bdf2d1c873af66f1d441b2cb8fdf568bd","modified":1651907261610},{"_id":"public/tags/md入门/index.html","hash":"d5e8338a2e2a8cdad20761a7c545cf085d7a58e4","modified":1651907261610},{"_id":"public/tags/Nuxt/index.html","hash":"3f16a30891b0a0b09b38f744b4fc3dbbae216146","modified":1651907261610},{"_id":"public/tags/asyncData/index.html","hash":"9f51cf9478c92fdfc9ef60a6b7bb5c1e4d34bb67","modified":1651907261610},{"_id":"public/tags/asyncData批处理/index.html","hash":"f66962e84ee369e3f3251259aa096fd6ee599f44","modified":1651907261610},{"_id":"public/tags/typescript/index.html","hash":"f9ab958ab5106c3a1e3dd6776dfdd43cae367ef4","modified":1651907261610},{"_id":"public/tags/NuxtJs报错/index.html","hash":"51bcfdefb753b7d03ac48d2ca32a11df8ec7bc67","modified":1651907261610},{"_id":"public/tags/微信小程序/index.html","hash":"97d2599e3595c14803dacbd91e7f173c96f7a458","modified":1651907261610},{"_id":"public/tags/wxs/index.html","hash":"02fa4a87472d84fcc62fd2d443e3b6ebd06c233a","modified":1651907261610},{"_id":"public/tags/Vant/index.html","hash":"c7ffa283dc21a0c59d981d9bfa8cb008d2142642","modified":1651907261610},{"_id":"public/CNAME","hash":"27e8986a43d24bd405af21250870a7f539a52c97","modified":1651907261610},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1651907261610},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1651907261610},{"_id":"public/favicon.png","hash":"16ce62d2bb0ec7c0b83aa865830f74ddafe69e50","modified":1651907261610},{"_id":"public/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1651907261610},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1651907261610},{"_id":"public/medias/logo.png","hash":"bc866d8bf23310ef7a752adfaf7bf5396aec815d","modified":1651907261610},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1651907261610},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1651907261610},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1651907261610},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1651907261610},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1651907261610},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1651907261610},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1651907261610},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1651907261610},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1651907261610},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1651907261610},{"_id":"public/medias/reward/alipay.jpg","hash":"8db62a8daa3bf580c4496529022a0700c0340cd3","modified":1651907261610},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1651907261610},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1651907261610},{"_id":"public/medias/reward/wechat.png","hash":"978e6fd0d110a0af7da8215fcb5295b6096432b0","modified":1651907261610},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1651907261610},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1651907261610},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1651907261610},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1651907261610},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1651907261610},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1651907261610},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1651907261610},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1651907261610},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1651907261610},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1651907261610},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1651907261610},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1651907261610},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1651907261610},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1651907261610},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1651907261610},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1651907261610},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1651907261610},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1651907261610},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1651907261610},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1651907261610},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1651907261610},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1651907261610},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1651907261610},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1651907261610},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1651907261610},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1651907261610},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1651907261610},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1651907261610},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1651907261610},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1651907261610},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1651907261610},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1651907261610},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1651907261610},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1651907261610},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1651907261610},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1651907261610},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1651907261610},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1651907261610},{"_id":"public/css/gitment.css","hash":"5ad68e65f6dc188da9526ec6bb36fdccd0c14619","modified":1651907261610},{"_id":"public/js/matery.js","hash":"ae1c57afe95b4473c3c1beb124c5fb45215f798c","modified":1651907261610},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1651907261610},{"_id":"public/css/my-gitalk.css","hash":"9af82837054943e344d63a1f625fae6111bbe556","modified":1651907261610},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1651907261610},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1651907261610},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1651907261610},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1651907261610},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"eab4b78b3ca2366ab4ae55641d990eb793aafc7b","modified":1651907261610},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1651907261610},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1651907261610},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"10235ce0730364f2aded2655f5a169b91efbfc72","modified":1651907261610},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1651907261610},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1651907261610},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1651907261610},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1651907261610},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1651907261610},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1651907261610},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1651907261610},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"b23a1de036c1ec697c82c955afda497e584d45ef","modified":1651907261610},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1651907261610},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1651907261610},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1651907261610},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1651907261610},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1651907261610},{"_id":"public/css/matery.css","hash":"bb2bb2760d02a3c7afd0d982505a065012154e9f","modified":1651907261610},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1651907261610},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1651907261610},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1651907261610},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1651907261610},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1651907261610},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1651907261610},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1651907261610},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1651907261610},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1651907261610},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1651907261610},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1651907261610},{"_id":"public/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1651907261610},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1651907261610},{"_id":"public/libs/materialize/materialize.min.css","hash":"93c99f815d5b818c9f38b7fc3b18b2d6d8f1f316","modified":1651907261610},{"_id":"public/libs/materialize/materialize.min.js","hash":"4807226ee1e1c9f6b2576083afbbf34d9378ef30","modified":1651907261610},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1651907261610},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1651907261610},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1651907261610},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1651907261610},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1651907261610},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1651907261610},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1651907261610},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1651907261610},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1651907261610},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1651907261610},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1651907261610},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1651907261610},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1651907261610},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1651907261610},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1651907261610},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1651907261610},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1651907261610},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1651907261610}],"Category":[{"name":"前端","_id":"cl2vixl8c0003d8j0h2k11kg5"},{"name":"Hexo","_id":"cl2vixl8g0008d8j06no17mze"},{"name":"javaScript","_id":"cl2vixl8n000pd8j04t5i22wl"},{"name":"JavaScript","_id":"cl2vixl8p000xd8j0fd9ta49s"},{"name":"md","_id":"cl2vixl8r0013d8j0c3es30sg"},{"name":"Nuxt","_id":"cl2vixl8s001ad8j062zrb6fa"},{"name":"TypeScript","_id":"cl2vixl8t001gd8j0hdh3arq6"},{"name":"微信小程序","_id":"cl2vixl8v001pd8j0btgm1wti"}],"Data":[],"Page":[{"title":"404","date":"2022-04-07T04:54:38.000Z","comments":0,"layout":"false","_content":"\n<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n<style>\n    *{\n        margin: 0;\n        padding: 0;\n    }\n    .iframe{\n        width: 100%; height: 450px; border: 0; overflow: hidden; position: relative;\n    }\n    a{\n        color: #ffaa00;\n        padding: 0 8px;\n        font-size: 14px;\n    }\n</style>\n</head>\n<body>\n<div class=\"iframe\">\n    <iframe id=\"iframeSrc\" style=\"width: 100%; height: 450px; border: 0; overflow: hidden;\" scrolling=\"no\"></iframe>\n    <a href=\"/\" style=\"width: 230px; height: 60px; position: absolute; top: 125px; left: 50%; transform: translateX(-50%); background: transparent\"></a>\n</div>\n\n<div class=\"content-404\" style=\"text-align: center\">\n        <h1 style=\"font-size: 60px; position: relative; top: 85px; color: #f18209\">4<span style=\"color: #ffaa00\">0</span>4</h1>\n        <img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/be286ccb-6d75-449a-a451-feb35c2c06dc.png\" alt=\"404\" style=\"width: 300px\">\n        <p style=\"font-size: 14px; padding-bottom: 15px\">抱歉，您访问的页面不存在</p>\n        <a href=\"/\">返回首页</a> <a href=\"javascript:history.back(-1)\">返回上一页</a>\n</div>\n</body>\n<script>\n    document.querySelector(\"#iframeSrc\").setAttribute(\"src\", location.origin);\n    document.getElementById(\"iframeSrc\").scrolling=\"no\";\n</script>\n</html>\n","source":"404/index.md","raw":"---\ntitle: 404\npermalink: /404\ndate: 2022-04-07 12:54:38\ncomments: false\nlayout: false\n---\n\n<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n<style>\n    *{\n        margin: 0;\n        padding: 0;\n    }\n    .iframe{\n        width: 100%; height: 450px; border: 0; overflow: hidden; position: relative;\n    }\n    a{\n        color: #ffaa00;\n        padding: 0 8px;\n        font-size: 14px;\n    }\n</style>\n</head>\n<body>\n<div class=\"iframe\">\n    <iframe id=\"iframeSrc\" style=\"width: 100%; height: 450px; border: 0; overflow: hidden;\" scrolling=\"no\"></iframe>\n    <a href=\"/\" style=\"width: 230px; height: 60px; position: absolute; top: 125px; left: 50%; transform: translateX(-50%); background: transparent\"></a>\n</div>\n\n<div class=\"content-404\" style=\"text-align: center\">\n        <h1 style=\"font-size: 60px; position: relative; top: 85px; color: #f18209\">4<span style=\"color: #ffaa00\">0</span>4</h1>\n        <img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/be286ccb-6d75-449a-a451-feb35c2c06dc.png\" alt=\"404\" style=\"width: 300px\">\n        <p style=\"font-size: 14px; padding-bottom: 15px\">抱歉，您访问的页面不存在</p>\n        <a href=\"/\">返回首页</a> <a href=\"javascript:history.back(-1)\">返回上一页</a>\n</div>\n</body>\n<script>\n    document.querySelector(\"#iframeSrc\").setAttribute(\"src\", location.origin);\n    document.getElementById(\"iframeSrc\").scrolling=\"no\";\n</script>\n</html>\n","updated":"2022-04-07T07:02:28.986Z","path":"/404.html","_id":"cl2vixl860000d8j03s1l3x4f","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n<style>\n    *{\n        margin: 0;\n        padding: 0;\n    }\n    .iframe{\n        width: 100%; height: 450px; border: 0; overflow: hidden; position: relative;\n    }\n    a{\n        color: #ffaa00;\n        padding: 0 8px;\n        font-size: 14px;\n    }\n</style>\n</head>\n<body>\n<div class=\"iframe\">\n    <iframe id=\"iframeSrc\" style=\"width: 100%; height: 450px; border: 0; overflow: hidden;\" scrolling=\"no\"></iframe>\n    <a href=\"/\" style=\"width: 230px; height: 60px; position: absolute; top: 125px; left: 50%; transform: translateX(-50%); background: transparent\"></a>\n</div>\n\n<div class=\"content-404\" style=\"text-align: center\">\n        <h1 style=\"font-size: 60px; position: relative; top: 85px; color: #f18209\">4<span style=\"color: #ffaa00\">0</span>4</h1>\n        <img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/be286ccb-6d75-449a-a451-feb35c2c06dc.png\" alt=\"404\" style=\"width: 300px\">\n        <p style=\"font-size: 14px; padding-bottom: 15px\">抱歉，您访问的页面不存在</p>\n        <a href=\"/\">返回首页</a> <a href=\"javascript:history.back(-1)\">返回上一页</a>\n</div>\n</body>\n<script>\n    document.querySelector(\"#iframeSrc\").setAttribute(\"src\", location.origin);\n    document.getElementById(\"iframeSrc\").scrolling=\"no\";\n</script>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n<style>\n    *{\n        margin: 0;\n        padding: 0;\n    }\n    .iframe{\n        width: 100%; height: 450px; border: 0; overflow: hidden; position: relative;\n    }\n    a{\n        color: #ffaa00;\n        padding: 0 8px;\n        font-size: 14px;\n    }\n</style>\n</head>\n<body>\n<div class=\"iframe\">\n    <iframe id=\"iframeSrc\" style=\"width: 100%; height: 450px; border: 0; overflow: hidden;\" scrolling=\"no\"></iframe>\n    <a href=\"/\" style=\"width: 230px; height: 60px; position: absolute; top: 125px; left: 50%; transform: translateX(-50%); background: transparent\"></a>\n</div>\n\n<div class=\"content-404\" style=\"text-align: center\">\n        <h1 style=\"font-size: 60px; position: relative; top: 85px; color: #f18209\">4<span style=\"color: #ffaa00\">0</span>4</h1>\n        <img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/be286ccb-6d75-449a-a451-feb35c2c06dc.png\" alt=\"404\" style=\"width: 300px\">\n        <p style=\"font-size: 14px; padding-bottom: 15px\">抱歉，您访问的页面不存在</p>\n        <a href=\"/\">返回首页</a> <a href=\"javascript:history.back(-1)\">返回上一页</a>\n</div>\n</body>\n<script>\n    document.querySelector(\"#iframeSrc\").setAttribute(\"src\", location.origin);\n    document.getElementById(\"iframeSrc\").scrolling=\"no\";\n</script>\n</html>\n"}],"Post":[{"title":"Bcrypt密码生成计算器","author":"68HTML","date":"2022-04-02T08:47:03.000Z","_content":"## Bcrypt密码在线生成计算器\n\n> bcrypt，是一个跨平台的文件加密工具。由它加密的文件可在所有支持的操作系统和处理器上进行转移。它的口令必须是8至56个字符，并将在内部被转化为448位的密钥。bcrypt 使用的是布鲁斯·施内尔在1993年发布的 Blowfish 加密算法。具体来说，bcrypt 使用保罗·柯切尔的算法实现。随 bcrypt 一起发布的源代码对原始版本作了略微改动。\n\n在线生成Bcrypt Hash 加密：https://www.jisuan.mobi/p163u3BN66Hm6JWx.html\n","source":"_posts/bcrypt/Bcrypt_MiMaShengChengJiSuanQi.md","raw":"title: Bcrypt密码生成计算器\nauthor: 68HTML\ndate: 2022-04-02 16:47:03\ntags: [\"Bcrypt\",\"Bcrypt加密\",\"Bcrypt在线加密\"]\ncategories: [\"前端\"]\n---\n## Bcrypt密码在线生成计算器\n\n> bcrypt，是一个跨平台的文件加密工具。由它加密的文件可在所有支持的操作系统和处理器上进行转移。它的口令必须是8至56个字符，并将在内部被转化为448位的密钥。bcrypt 使用的是布鲁斯·施内尔在1993年发布的 Blowfish 加密算法。具体来说，bcrypt 使用保罗·柯切尔的算法实现。随 bcrypt 一起发布的源代码对原始版本作了略微改动。\n\n在线生成Bcrypt Hash 加密：https://www.jisuan.mobi/p163u3BN66Hm6JWx.html\n","slug":"bcrypt/Bcrypt_MiMaShengChengJiSuanQi","published":1,"updated":"2022-05-07T07:06:07.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2vixl890001d8j0b7la6zxs","content":"<h2 id=\"Bcrypt密码在线生成计算器\"><a href=\"#Bcrypt密码在线生成计算器\" class=\"headerlink\" title=\"Bcrypt密码在线生成计算器\"></a>Bcrypt密码在线生成计算器</h2><blockquote>\n<p>bcrypt，是一个跨平台的文件加密工具。由它加密的文件可在所有支持的操作系统和处理器上进行转移。它的口令必须是8至56个字符，并将在内部被转化为448位的密钥。bcrypt 使用的是布鲁斯·施内尔在1993年发布的 Blowfish 加密算法。具体来说，bcrypt 使用保罗·柯切尔的算法实现。随 bcrypt 一起发布的源代码对原始版本作了略微改动。</p>\n</blockquote>\n<p>在线生成Bcrypt Hash 加密：<a href=\"https://www.jisuan.mobi/p163u3BN66Hm6JWx.html\">https://www.jisuan.mobi/p163u3BN66Hm6JWx.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Bcrypt密码在线生成计算器\"><a href=\"#Bcrypt密码在线生成计算器\" class=\"headerlink\" title=\"Bcrypt密码在线生成计算器\"></a>Bcrypt密码在线生成计算器</h2><blockquote>\n<p>bcrypt，是一个跨平台的文件加密工具。由它加密的文件可在所有支持的操作系统和处理器上进行转移。它的口令必须是8至56个字符，并将在内部被转化为448位的密钥。bcrypt 使用的是布鲁斯·施内尔在1993年发布的 Blowfish 加密算法。具体来说，bcrypt 使用保罗·柯切尔的算法实现。随 bcrypt 一起发布的源代码对原始版本作了略微改动。</p>\n</blockquote>\n<p>在线生成Bcrypt Hash 加密：<a href=\"https://www.jisuan.mobi/p163u3BN66Hm6JWx.html\">https://www.jisuan.mobi/p163u3BN66Hm6JWx.html</a></p>\n"},{"title":"GitHub Pages自定义域名后每次hexo d都会失效解决","date":"2022-05-07T06:48:29.000Z","_content":"\n在GitHub Pages设置自定义域名之后，发现每次hexo d 后都会失效，又要重新设置，太麻烦了。\n\n于是，问了一下牛皮的百度老师\n\n只要在source 目录添加一个新文件CNAME就好\n\nCNAME –不带任何后缀，这就是全称，里面写的是你的域名\n\n然后就ok了。\n\n怎么push都不用再去GitHub Pages设置了\n\n(^o^)/~\n","source":"_posts/hexo/GITHUBPAGESZIDINGYIYUMINGHOUMEICIHEXODDOUHUISHIXIAOJIEJUE.md","raw":"---\ntitle: GitHub Pages自定义域名后每次hexo d都会失效解决\ndate: 2022-05-07 14:48:29\ntags: [\"Hexo\",\"GitHub\",\"GitHub Pages\"]\ncategories: [\"Hexo\"]\n---\n\n在GitHub Pages设置自定义域名之后，发现每次hexo d 后都会失效，又要重新设置，太麻烦了。\n\n于是，问了一下牛皮的百度老师\n\n只要在source 目录添加一个新文件CNAME就好\n\nCNAME –不带任何后缀，这就是全称，里面写的是你的域名\n\n然后就ok了。\n\n怎么push都不用再去GitHub Pages设置了\n\n(^o^)/~\n","slug":"hexo/GITHUBPAGESZIDINGYIYUMINGHOUMEICIHEXODDOUHUISHIXIAOJIEJUE","published":1,"updated":"2022-05-07T06:49:49.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2vixl8b0002d8j0ef3v12ea","content":"<p>在GitHub Pages设置自定义域名之后，发现每次hexo d 后都会失效，又要重新设置，太麻烦了。</p>\n<p>于是，问了一下牛皮的百度老师</p>\n<p>只要在source 目录添加一个新文件CNAME就好</p>\n<p>CNAME –不带任何后缀，这就是全称，里面写的是你的域名</p>\n<p>然后就ok了。</p>\n<p>怎么push都不用再去GitHub Pages设置了</p>\n<p>(^o^)/~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在GitHub Pages设置自定义域名之后，发现每次hexo d 后都会失效，又要重新设置，太麻烦了。</p>\n<p>于是，问了一下牛皮的百度老师</p>\n<p>只要在source 目录添加一个新文件CNAME就好</p>\n<p>CNAME –不带任何后缀，这就是全称，里面写的是你的域名</p>\n<p>然后就ok了。</p>\n<p>怎么push都不用再去GitHub Pages设置了</p>\n<p>(^o^)/~</p>\n"},{"title":"Hexo程序archive页面数量设置","date":"2022-04-07T02:43:23.000Z","_content":"\n使用Hexo搭建博客已经有一段时间了，当文章数量达到十几篇左右时，突然发觉archive归档页面仅显示10篇文章，并且出现了分页功能，对于我们这种个人博客，文章数量不会很多，所以更希望是在一页中完全展示出来，便于访问者查找感兴趣的文章。\n\n在网上查找原因，发现此处的10条限制来自_config.yml文件中的配置，这个配置控制所有的分页配置，包括首页、归档页、tag分类页面。\n\n```\nper_page: 10\n```\n如果我们想对上面三个页面做独立的配置，需要安装插件进行功能支持。\n\n+ hexo-generator-index\n+ hexo-generator-archive\n+ hexo-generator-tag\n\n使用如下命令进行安装需要的插件\n\n```\n$ npm install hexo-generator-archive --save\n```\n对应的_config.yml文件中添加如下配置\n\n```\nindex_generator:\n  per_page: 5\n\narchive_generator:\n  per_page: 20  //为0时表示不分页全展示\n  yearly: true  //按年生成归档\n  monthly: true //按月生成归档\n\ntag_generator:\n  per_page: 10\n```\n> 注意:上面归档设置中的按年或者按月，需要修改模板给出对应的链接入口，对于没有兴趣修改模板的同学，可以将此处设为false，减少生成页面时的工作量。\n","source":"_posts/hexo/HexoChengXuArchiveYeMianShuLiangSheZhi.md","raw":"---\ntitle: Hexo程序archive页面数量设置\ndate: 2022-04-07 10:43:23\ntags: [\"Hexo\"]\ncategories: [\"Hexo\"]\n---\n\n使用Hexo搭建博客已经有一段时间了，当文章数量达到十几篇左右时，突然发觉archive归档页面仅显示10篇文章，并且出现了分页功能，对于我们这种个人博客，文章数量不会很多，所以更希望是在一页中完全展示出来，便于访问者查找感兴趣的文章。\n\n在网上查找原因，发现此处的10条限制来自_config.yml文件中的配置，这个配置控制所有的分页配置，包括首页、归档页、tag分类页面。\n\n```\nper_page: 10\n```\n如果我们想对上面三个页面做独立的配置，需要安装插件进行功能支持。\n\n+ hexo-generator-index\n+ hexo-generator-archive\n+ hexo-generator-tag\n\n使用如下命令进行安装需要的插件\n\n```\n$ npm install hexo-generator-archive --save\n```\n对应的_config.yml文件中添加如下配置\n\n```\nindex_generator:\n  per_page: 5\n\narchive_generator:\n  per_page: 20  //为0时表示不分页全展示\n  yearly: true  //按年生成归档\n  monthly: true //按月生成归档\n\ntag_generator:\n  per_page: 10\n```\n> 注意:上面归档设置中的按年或者按月，需要修改模板给出对应的链接入口，对于没有兴趣修改模板的同学，可以将此处设为false，减少生成页面时的工作量。\n","slug":"hexo/HexoChengXuArchiveYeMianShuLiangSheZhi","published":1,"updated":"2022-04-07T07:02:28.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2vixl8e0005d8j06k45d1hs","content":"<p>使用Hexo搭建博客已经有一段时间了，当文章数量达到十几篇左右时，突然发觉archive归档页面仅显示10篇文章，并且出现了分页功能，对于我们这种个人博客，文章数量不会很多，所以更希望是在一页中完全展示出来，便于访问者查找感兴趣的文章。</p>\n<p>在网上查找原因，发现此处的10条限制来自_config.yml文件中的配置，这个配置控制所有的分页配置，包括首页、归档页、tag分类页面。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">per_page: 10</span><br></pre></td></tr></table></figure>\n<p>如果我们想对上面三个页面做独立的配置，需要安装插件进行功能支持。</p>\n<ul>\n<li>hexo-generator-index</li>\n<li>hexo-generator-archive</li>\n<li>hexo-generator-tag</li>\n</ul>\n<p>使用如下命令进行安装需要的插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-archive --save</span><br></pre></td></tr></table></figure>\n<p>对应的_config.yml文件中添加如下配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index_generator:</span><br><span class=\"line\">  per_page: 5</span><br><span class=\"line\"></span><br><span class=\"line\">archive_generator:</span><br><span class=\"line\">  per_page: 20  //为0时表示不分页全展示</span><br><span class=\"line\">  yearly: true  //按年生成归档</span><br><span class=\"line\">  monthly: true //按月生成归档</span><br><span class=\"line\"></span><br><span class=\"line\">tag_generator:</span><br><span class=\"line\">  per_page: 10</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意:上面归档设置中的按年或者按月，需要修改模板给出对应的链接入口，对于没有兴趣修改模板的同学，可以将此处设为false，减少生成页面时的工作量。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>使用Hexo搭建博客已经有一段时间了，当文章数量达到十几篇左右时，突然发觉archive归档页面仅显示10篇文章，并且出现了分页功能，对于我们这种个人博客，文章数量不会很多，所以更希望是在一页中完全展示出来，便于访问者查找感兴趣的文章。</p>\n<p>在网上查找原因，发现此处的10条限制来自_config.yml文件中的配置，这个配置控制所有的分页配置，包括首页、归档页、tag分类页面。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">per_page: 10</span><br></pre></td></tr></table></figure>\n<p>如果我们想对上面三个页面做独立的配置，需要安装插件进行功能支持。</p>\n<ul>\n<li>hexo-generator-index</li>\n<li>hexo-generator-archive</li>\n<li>hexo-generator-tag</li>\n</ul>\n<p>使用如下命令进行安装需要的插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-archive --save</span><br></pre></td></tr></table></figure>\n<p>对应的_config.yml文件中添加如下配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index_generator:</span><br><span class=\"line\">  per_page: 5</span><br><span class=\"line\"></span><br><span class=\"line\">archive_generator:</span><br><span class=\"line\">  per_page: 20  //为0时表示不分页全展示</span><br><span class=\"line\">  yearly: true  //按年生成归档</span><br><span class=\"line\">  monthly: true //按月生成归档</span><br><span class=\"line\"></span><br><span class=\"line\">tag_generator:</span><br><span class=\"line\">  per_page: 10</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意:上面归档设置中的按年或者按月，需要修改模板给出对应的链接入口，对于没有兴趣修改模板的同学，可以将此处设为false，减少生成页面时的工作量。</p>\n</blockquote>\n"},{"title":"Hexo博客修改Archive页面显示文章数量","date":"2022-04-07T02:40:55.000Z","_content":"\n> 之前配置的Swiftype站内搜索功能很不稳定，经常因为网络问题无法返回搜索结果，所以要找写过的某篇文章就不太方便。为解决这个问题，有一个方法是在Archive页面上不分页，然后就可以用浏览器自带的搜索功能来搜索标题了。\n\n默认情况下，Hexo无法对主页、Archive页面、标签页面每页显示文章数量进行单独设置，所以需要安装hexo-generator-archive插件来实现这个功能。\n\n使用如下命令安装：\n```\nnpm install hexo-generator-archive --save\n```\n安装好后修改_config.yml中的相关配置，分别对index、archive、tag及category页面进行设置即可：\n```\n# Pagination\n## Set per_page to 0 to disable pagination\nindex_generator:\n  per_page: 6\n\narchive_generator:\n  per_page: 0\n\ntag_generator:\n  per_page: 0\n\ncategory_generator:\n  per_page: 50\n```\n","source":"_posts/hexo/HexoBoKeXiuGaiArchiveYeMianXianShiWenZhangShuLiang.md","raw":"---\ntitle: Hexo博客修改Archive页面显示文章数量\ndate: 2022-04-07 10:40:55\ntags: [\"Hexo\"]\ncategories: [\"Hexo\"]\n---\n\n> 之前配置的Swiftype站内搜索功能很不稳定，经常因为网络问题无法返回搜索结果，所以要找写过的某篇文章就不太方便。为解决这个问题，有一个方法是在Archive页面上不分页，然后就可以用浏览器自带的搜索功能来搜索标题了。\n\n默认情况下，Hexo无法对主页、Archive页面、标签页面每页显示文章数量进行单独设置，所以需要安装hexo-generator-archive插件来实现这个功能。\n\n使用如下命令安装：\n```\nnpm install hexo-generator-archive --save\n```\n安装好后修改_config.yml中的相关配置，分别对index、archive、tag及category页面进行设置即可：\n```\n# Pagination\n## Set per_page to 0 to disable pagination\nindex_generator:\n  per_page: 6\n\narchive_generator:\n  per_page: 0\n\ntag_generator:\n  per_page: 0\n\ncategory_generator:\n  per_page: 50\n```\n","slug":"hexo/HexoBoKeXiuGaiArchiveYeMianXianShiWenZhangShuLiang","published":1,"updated":"2022-04-07T07:02:28.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2vixl8e0006d8j0esbh5nrw","content":"<blockquote>\n<p>之前配置的Swiftype站内搜索功能很不稳定，经常因为网络问题无法返回搜索结果，所以要找写过的某篇文章就不太方便。为解决这个问题，有一个方法是在Archive页面上不分页，然后就可以用浏览器自带的搜索功能来搜索标题了。</p>\n</blockquote>\n<p>默认情况下，Hexo无法对主页、Archive页面、标签页面每页显示文章数量进行单独设置，所以需要安装hexo-generator-archive插件来实现这个功能。</p>\n<p>使用如下命令安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-archive --save</span><br></pre></td></tr></table></figure>\n<p>安装好后修改_config.yml中的相关配置，分别对index、archive、tag及category页面进行设置即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Pagination</span><br><span class=\"line\">## Set per_page to 0 to disable pagination</span><br><span class=\"line\">index_generator:</span><br><span class=\"line\">  per_page: 6</span><br><span class=\"line\"></span><br><span class=\"line\">archive_generator:</span><br><span class=\"line\">  per_page: 0</span><br><span class=\"line\"></span><br><span class=\"line\">tag_generator:</span><br><span class=\"line\">  per_page: 0</span><br><span class=\"line\"></span><br><span class=\"line\">category_generator:</span><br><span class=\"line\">  per_page: 50</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>之前配置的Swiftype站内搜索功能很不稳定，经常因为网络问题无法返回搜索结果，所以要找写过的某篇文章就不太方便。为解决这个问题，有一个方法是在Archive页面上不分页，然后就可以用浏览器自带的搜索功能来搜索标题了。</p>\n</blockquote>\n<p>默认情况下，Hexo无法对主页、Archive页面、标签页面每页显示文章数量进行单独设置，所以需要安装hexo-generator-archive插件来实现这个功能。</p>\n<p>使用如下命令安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-archive --save</span><br></pre></td></tr></table></figure>\n<p>安装好后修改_config.yml中的相关配置，分别对index、archive、tag及category页面进行设置即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Pagination</span><br><span class=\"line\">## Set per_page to 0 to disable pagination</span><br><span class=\"line\">index_generator:</span><br><span class=\"line\">  per_page: 6</span><br><span class=\"line\"></span><br><span class=\"line\">archive_generator:</span><br><span class=\"line\">  per_page: 0</span><br><span class=\"line\"></span><br><span class=\"line\">tag_generator:</span><br><span class=\"line\">  per_page: 0</span><br><span class=\"line\"></span><br><span class=\"line\">category_generator:</span><br><span class=\"line\">  per_page: 50</span><br></pre></td></tr></table></figure>\n"},{"title":"JS中的async与await怎么使用","date":"2022-04-07T03:00:23.000Z","_content":"\n> 这篇文章主要介绍了JS的async/await怎么使用,简单来说，async/await是基于promises的语法糖，使异步代码更易于编写和阅读,下面来看详细的介绍内容吧。需要的小伙伴也可以参考一下\n\n## 一、async\nasync创建一个异步函数来定义一个代码块，在其中运行异步代码;\n\n怎样变成异步函数呢？以 async 这个关键字开始，它可以被放置在一个函数前面\n```javascript\nasync function f() {\n  return 1;\n}\n  \nf().then(alert); // 1\n  \n//上下结果一样\n  \nasync function f() {\n  return Promise.resolve(1);\n}\n  \nf().then(alert); // 1\n  \n//也可以用箭头函数\nlet hello = async () => { return \"1\" };\nhello().then((value) => console.log(value))\n//返回值也可以简化成这样\nhello().then(console.log)\n```\n异步函数的特征之一：保证函数的返回值为 promise。\n\n将 async 关键字加到函数申明中，可以告诉它们返回的是 promise，而不是直接返回值。此外，它避免了同步函数为支持使用 await 带来的任何潜在开销。\n## 二、await:\nawait 只在异步函数里面才起作用。它可以放在任何异步的，关键字 await 让 JavaScript 引擎等待直到 promise 完成并返回结果。在等待promise的同时，其他正在等待执行的代码就有机会执行了。\n\n您可以在调用任何返回Promise的函数时使用 await，包括Web API函数。\n```javascript\nasync function f() {\n  let promise = new Promise((resolve, reject) => {\n    setTimeout(() => resolve(\"咚!\"), 1000)\n  });\n  \n  let result = await promise; // 等待执行，直到 promise resolve 执行完\n  \n  alert(result); // \"咚!\"\n}\n  \nf();//拿到 result 作为结果继续往下执行。所以上面这段代码在1秒后显示 “咚!”。\n\n```\n> 注意：await 实际上会暂停函数的执行，直到 promise 状态变为 完成，然后以 promise 的结果继续执行。这个行为不会耗费任何 CPU 资源，因为 JavaScript 引擎可以同时处理其他任务：执行其他脚本，处理事件等。\n\n## 三、综合应用\n有了async/await就去除了到处都是 .then() 代码块，因为await会等待了。\n\n```javascript\nasync function A() {\n  let response = await fetch('c.jpg');\n  let myBlob = await response.blob();\n  \n  let objectURL = URL.createObjectURL(myBlob);\n  let image = document.createElement('img');\n  image.src = objectURL;\n  document.body.appendChild(image);\n}\n  \nA()\n.catch(e => {\n  console.log('问题: ' + e.message);\n});\n```\n用更少的.then()块来封装代码，同时它看起来很像同步代码，所以它非常直观。这样用的很爽！\n\n到此这篇关于JS的async/await怎么使用的文章就介绍到这了,更多相关JS的async/await 用法内容请搜索68HTML以前的文章或继续浏览下面的相关文章希望大家以后多多支持68HTML！\n","source":"_posts/javascript/JSZhongDeAsyncYuAwaitZenMeShiYong.md","raw":"---\ntitle: JS中的async与await怎么使用\ndate: 2022-04-07 11:00:23\ntags: [\"javaScript\", \"async\", \"await\"]\ncategories: [\"javaScript\"]\n---\n\n> 这篇文章主要介绍了JS的async/await怎么使用,简单来说，async/await是基于promises的语法糖，使异步代码更易于编写和阅读,下面来看详细的介绍内容吧。需要的小伙伴也可以参考一下\n\n## 一、async\nasync创建一个异步函数来定义一个代码块，在其中运行异步代码;\n\n怎样变成异步函数呢？以 async 这个关键字开始，它可以被放置在一个函数前面\n```javascript\nasync function f() {\n  return 1;\n}\n  \nf().then(alert); // 1\n  \n//上下结果一样\n  \nasync function f() {\n  return Promise.resolve(1);\n}\n  \nf().then(alert); // 1\n  \n//也可以用箭头函数\nlet hello = async () => { return \"1\" };\nhello().then((value) => console.log(value))\n//返回值也可以简化成这样\nhello().then(console.log)\n```\n异步函数的特征之一：保证函数的返回值为 promise。\n\n将 async 关键字加到函数申明中，可以告诉它们返回的是 promise，而不是直接返回值。此外，它避免了同步函数为支持使用 await 带来的任何潜在开销。\n## 二、await:\nawait 只在异步函数里面才起作用。它可以放在任何异步的，关键字 await 让 JavaScript 引擎等待直到 promise 完成并返回结果。在等待promise的同时，其他正在等待执行的代码就有机会执行了。\n\n您可以在调用任何返回Promise的函数时使用 await，包括Web API函数。\n```javascript\nasync function f() {\n  let promise = new Promise((resolve, reject) => {\n    setTimeout(() => resolve(\"咚!\"), 1000)\n  });\n  \n  let result = await promise; // 等待执行，直到 promise resolve 执行完\n  \n  alert(result); // \"咚!\"\n}\n  \nf();//拿到 result 作为结果继续往下执行。所以上面这段代码在1秒后显示 “咚!”。\n\n```\n> 注意：await 实际上会暂停函数的执行，直到 promise 状态变为 完成，然后以 promise 的结果继续执行。这个行为不会耗费任何 CPU 资源，因为 JavaScript 引擎可以同时处理其他任务：执行其他脚本，处理事件等。\n\n## 三、综合应用\n有了async/await就去除了到处都是 .then() 代码块，因为await会等待了。\n\n```javascript\nasync function A() {\n  let response = await fetch('c.jpg');\n  let myBlob = await response.blob();\n  \n  let objectURL = URL.createObjectURL(myBlob);\n  let image = document.createElement('img');\n  image.src = objectURL;\n  document.body.appendChild(image);\n}\n  \nA()\n.catch(e => {\n  console.log('问题: ' + e.message);\n});\n```\n用更少的.then()块来封装代码，同时它看起来很像同步代码，所以它非常直观。这样用的很爽！\n\n到此这篇关于JS的async/await怎么使用的文章就介绍到这了,更多相关JS的async/await 用法内容请搜索68HTML以前的文章或继续浏览下面的相关文章希望大家以后多多支持68HTML！\n","slug":"javascript/JSZhongDeAsyncYuAwaitZenMeShiYong","published":1,"updated":"2022-04-07T07:02:28.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2vixl8f0007d8j07a88e0un","content":"<blockquote>\n<p>这篇文章主要介绍了JS的async/await怎么使用,简单来说，async/await是基于promises的语法糖，使异步代码更易于编写和阅读,下面来看详细的介绍内容吧。需要的小伙伴也可以参考一下</p>\n</blockquote>\n<h2 id=\"一、async\"><a href=\"#一、async\" class=\"headerlink\" title=\"一、async\"></a>一、async</h2><p>async创建一个异步函数来定义一个代码块，在其中运行异步代码;</p>\n<p>怎样变成异步函数呢？以 async 这个关键字开始，它可以被放置在一个函数前面</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"title function_\">f</span>().<span class=\"title function_\">then</span>(alert); <span class=\"comment\">// 1</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//上下结果一样</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"title function_\">f</span>().<span class=\"title function_\">then</span>(alert); <span class=\"comment\">// 1</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//也可以用箭头函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">hello</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123; <span class=\"keyword\">return</span> <span class=\"string\">&quot;1&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"title function_\">hello</span>().<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value))</span><br><span class=\"line\"><span class=\"comment\">//返回值也可以简化成这样</span></span><br><span class=\"line\"><span class=\"title function_\">hello</span>().<span class=\"title function_\">then</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br></pre></td></tr></table></figure>\n<p>异步函数的特征之一：保证函数的返回值为 promise。</p>\n<p>将 async 关键字加到函数申明中，可以告诉它们返回的是 promise，而不是直接返回值。此外，它避免了同步函数为支持使用 await 带来的任何潜在开销。</p>\n<h2 id=\"二、await\"><a href=\"#二、await\" class=\"headerlink\" title=\"二、await:\"></a>二、await:</h2><p>await 只在异步函数里面才起作用。它可以放在任何异步的，关键字 await 让 JavaScript 引擎等待直到 promise 完成并返回结果。在等待promise的同时，其他正在等待执行的代码就有机会执行了。</p>\n<p>您可以在调用任何返回Promise的函数时使用 await，包括Web API函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;咚!&quot;</span>), <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> promise; <span class=\"comment\">// 等待执行，直到 promise resolve 执行完</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(result); <span class=\"comment\">// &quot;咚!&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"title function_\">f</span>();<span class=\"comment\">//拿到 result 作为结果继续往下执行。所以上面这段代码在1秒后显示 “咚!”。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：await 实际上会暂停函数的执行，直到 promise 状态变为 完成，然后以 promise 的结果继续执行。这个行为不会耗费任何 CPU 资源，因为 JavaScript 引擎可以同时处理其他任务：执行其他脚本，处理事件等。</p>\n</blockquote>\n<h2 id=\"三、综合应用\"><a href=\"#三、综合应用\" class=\"headerlink\" title=\"三、综合应用\"></a>三、综合应用</h2><p>有了async/await就去除了到处都是 .then() 代码块，因为await会等待了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> response = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;c.jpg&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> myBlob = <span class=\"keyword\">await</span> response.<span class=\"title function_\">blob</span>();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> objectURL = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(myBlob);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> image = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;img&#x27;</span>);</span><br><span class=\"line\">  image.<span class=\"property\">src</span> = objectURL;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(image);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"title function_\">A</span>()</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;问题: &#x27;</span> + e.<span class=\"property\">message</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>用更少的.then()块来封装代码，同时它看起来很像同步代码，所以它非常直观。这样用的很爽！</p>\n<p>到此这篇关于JS的async/await怎么使用的文章就介绍到这了,更多相关JS的async/await 用法内容请搜索68HTML以前的文章或继续浏览下面的相关文章希望大家以后多多支持68HTML！</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>这篇文章主要介绍了JS的async/await怎么使用,简单来说，async/await是基于promises的语法糖，使异步代码更易于编写和阅读,下面来看详细的介绍内容吧。需要的小伙伴也可以参考一下</p>\n</blockquote>\n<h2 id=\"一、async\"><a href=\"#一、async\" class=\"headerlink\" title=\"一、async\"></a>一、async</h2><p>async创建一个异步函数来定义一个代码块，在其中运行异步代码;</p>\n<p>怎样变成异步函数呢？以 async 这个关键字开始，它可以被放置在一个函数前面</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"title function_\">f</span>().<span class=\"title function_\">then</span>(alert); <span class=\"comment\">// 1</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//上下结果一样</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"title function_\">f</span>().<span class=\"title function_\">then</span>(alert); <span class=\"comment\">// 1</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//也可以用箭头函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">hello</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123; <span class=\"keyword\">return</span> <span class=\"string\">&quot;1&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"title function_\">hello</span>().<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value))</span><br><span class=\"line\"><span class=\"comment\">//返回值也可以简化成这样</span></span><br><span class=\"line\"><span class=\"title function_\">hello</span>().<span class=\"title function_\">then</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br></pre></td></tr></table></figure>\n<p>异步函数的特征之一：保证函数的返回值为 promise。</p>\n<p>将 async 关键字加到函数申明中，可以告诉它们返回的是 promise，而不是直接返回值。此外，它避免了同步函数为支持使用 await 带来的任何潜在开销。</p>\n<h2 id=\"二、await\"><a href=\"#二、await\" class=\"headerlink\" title=\"二、await:\"></a>二、await:</h2><p>await 只在异步函数里面才起作用。它可以放在任何异步的，关键字 await 让 JavaScript 引擎等待直到 promise 完成并返回结果。在等待promise的同时，其他正在等待执行的代码就有机会执行了。</p>\n<p>您可以在调用任何返回Promise的函数时使用 await，包括Web API函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;咚!&quot;</span>), <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> promise; <span class=\"comment\">// 等待执行，直到 promise resolve 执行完</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(result); <span class=\"comment\">// &quot;咚!&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"title function_\">f</span>();<span class=\"comment\">//拿到 result 作为结果继续往下执行。所以上面这段代码在1秒后显示 “咚!”。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：await 实际上会暂停函数的执行，直到 promise 状态变为 完成，然后以 promise 的结果继续执行。这个行为不会耗费任何 CPU 资源，因为 JavaScript 引擎可以同时处理其他任务：执行其他脚本，处理事件等。</p>\n</blockquote>\n<h2 id=\"三、综合应用\"><a href=\"#三、综合应用\" class=\"headerlink\" title=\"三、综合应用\"></a>三、综合应用</h2><p>有了async/await就去除了到处都是 .then() 代码块，因为await会等待了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> response = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;c.jpg&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> myBlob = <span class=\"keyword\">await</span> response.<span class=\"title function_\">blob</span>();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> objectURL = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(myBlob);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> image = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;img&#x27;</span>);</span><br><span class=\"line\">  image.<span class=\"property\">src</span> = objectURL;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(image);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"title function_\">A</span>()</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;问题: &#x27;</span> + e.<span class=\"property\">message</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>用更少的.then()块来封装代码，同时它看起来很像同步代码，所以它非常直观。这样用的很爽！</p>\n<p>到此这篇关于JS的async/await怎么使用的文章就介绍到这了,更多相关JS的async/await 用法内容请搜索68HTML以前的文章或继续浏览下面的相关文章希望大家以后多多支持68HTML！</p>\n"},{"title":"js实现数组扁平化","author":"68HTML","date":"2022-04-05T09:28:33.000Z","_content":"## 数组扁平化的方式\n什么是数组扁平化？\n\n数组扁平化：指将一个多维数组转化为一个一维数组。\n\n例：将下面数组扁平化处理。\n```javascript\nconst arr = [1, [2, 3, [4, 5]]] // ---> [ 1, 2, 3, 4, 5 ]\n```\n#### 1.使用flat()\n> flat() 方法是ES10提出的，它会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。（flat意为“水平的；平坦的”）\n```javascript\nconst result1 = arr.flat(Infinity) // 指定深度为无限\nconsole.log(result1) // [ 1, 2, 3, 4, 5 ]\n\nconst result2 = arr.flat(1) // 指定深度为1\nconsole.log(result2) // [ 1, 2, 3, [ 4, 5 ] ]\n\nconst result3 = arr.flat(2) // 指定深度为2\nconsole.log(result3) // [ 1, 2, 3, 4, 5 ]\n```\n#### 2.使用正则\n以下做法得到的数组元素都会变成字符串，不建议使用；\n```javascript\nconst result1 = JSON.stringify(arr).replace(/\\[|\\]/g, '').split(',')\nconsole.log(result1) // [ '1', '2', '3', '4', '5' ] 数组元素都变成了字符串\n```\n对以上方法进行优化处理；\n```javascript\nconst result2 = JSON.parse('[' + JSON.stringify(arr).replace(/\\[|\\]/g, '') + ']')\nconsole.log(result2) // [ 1, 2, 3, 4, 5 ]\n```\n#### 3.使用reduce()+concat()\n> 使用reduce拿到数组的当前值和前一项值，判断当前值是否为数组，初始值设置为[]，然后使用concat进行数组合并。\n\nreduce()方法：对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。\n\nconcat()方法：用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。\n```javascript\nfunction flatten(arr) {\n  return arr.reduce((pre, current) => {\n    return pre.concat(Array.isArray(current) ? flatten(current) : current)\n  }, [])\n}\n\nconst result = flatten(arr)\nconsole.log(result) // [ 1, 2, 3, 4, 5 ]\n```\n#### 4.使用函数递归\n> 循环遍历数组，发现含有数组元素就进行递归处理，最终将数组转为一维数组。\n```javascript\nconst result = []\nfunction exec(arr) {\n  arr.forEach(item => {\n    if (Array.isArray(item)) {\n      exec(item)\n    } else {\n      result.push(item)\n    }\n  })\n}\n\nexec(arr)\nconsole.log(result) // [ 1, 2, 3, 4, 5 ]\n```\n#### 5.使用扩展运算符+concat()\n> ES6新推出的扩展运算符能对数组进行降维处理（一次降一维），循环判断是否含有数组，进行concat合并。\n\nsome()方法：测试数组中是不是至少有1个元素通过了被提供的函数测试（它返回的是一个Boolean类型的值）。\n```javascript\nfunction flatten(arr) {\n  while (arr.some(item => Array.isArray(item))) {\n    arr = [].concat(...arr)\n  }\n\n  return arr\n}\n\nconst result = flatten(arr)\nconsole.log(result) // [ 1, 2, 3, 4, 5 ]\n```\n","source":"_posts/javascript/JS_ShiXianShuZuBianPingHua.md","raw":"title: js实现数组扁平化\nauthor: 68HTML\ndate: 2022-04-05 17:28:33\ntags: [\"JS相关\",\"JavaScript\"]\ncategories: [\"前端\"]\n---\n## 数组扁平化的方式\n什么是数组扁平化？\n\n数组扁平化：指将一个多维数组转化为一个一维数组。\n\n例：将下面数组扁平化处理。\n```javascript\nconst arr = [1, [2, 3, [4, 5]]] // ---> [ 1, 2, 3, 4, 5 ]\n```\n#### 1.使用flat()\n> flat() 方法是ES10提出的，它会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。（flat意为“水平的；平坦的”）\n```javascript\nconst result1 = arr.flat(Infinity) // 指定深度为无限\nconsole.log(result1) // [ 1, 2, 3, 4, 5 ]\n\nconst result2 = arr.flat(1) // 指定深度为1\nconsole.log(result2) // [ 1, 2, 3, [ 4, 5 ] ]\n\nconst result3 = arr.flat(2) // 指定深度为2\nconsole.log(result3) // [ 1, 2, 3, 4, 5 ]\n```\n#### 2.使用正则\n以下做法得到的数组元素都会变成字符串，不建议使用；\n```javascript\nconst result1 = JSON.stringify(arr).replace(/\\[|\\]/g, '').split(',')\nconsole.log(result1) // [ '1', '2', '3', '4', '5' ] 数组元素都变成了字符串\n```\n对以上方法进行优化处理；\n```javascript\nconst result2 = JSON.parse('[' + JSON.stringify(arr).replace(/\\[|\\]/g, '') + ']')\nconsole.log(result2) // [ 1, 2, 3, 4, 5 ]\n```\n#### 3.使用reduce()+concat()\n> 使用reduce拿到数组的当前值和前一项值，判断当前值是否为数组，初始值设置为[]，然后使用concat进行数组合并。\n\nreduce()方法：对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。\n\nconcat()方法：用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。\n```javascript\nfunction flatten(arr) {\n  return arr.reduce((pre, current) => {\n    return pre.concat(Array.isArray(current) ? flatten(current) : current)\n  }, [])\n}\n\nconst result = flatten(arr)\nconsole.log(result) // [ 1, 2, 3, 4, 5 ]\n```\n#### 4.使用函数递归\n> 循环遍历数组，发现含有数组元素就进行递归处理，最终将数组转为一维数组。\n```javascript\nconst result = []\nfunction exec(arr) {\n  arr.forEach(item => {\n    if (Array.isArray(item)) {\n      exec(item)\n    } else {\n      result.push(item)\n    }\n  })\n}\n\nexec(arr)\nconsole.log(result) // [ 1, 2, 3, 4, 5 ]\n```\n#### 5.使用扩展运算符+concat()\n> ES6新推出的扩展运算符能对数组进行降维处理（一次降一维），循环判断是否含有数组，进行concat合并。\n\nsome()方法：测试数组中是不是至少有1个元素通过了被提供的函数测试（它返回的是一个Boolean类型的值）。\n```javascript\nfunction flatten(arr) {\n  while (arr.some(item => Array.isArray(item))) {\n    arr = [].concat(...arr)\n  }\n\n  return arr\n}\n\nconst result = flatten(arr)\nconsole.log(result) // [ 1, 2, 3, 4, 5 ]\n```\n","slug":"javascript/JS_ShiXianShuZuBianPingHua","published":1,"updated":"2022-05-07T07:06:07.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2vixl8h000ad8j0911e5jh3","content":"<h2 id=\"数组扁平化的方式\"><a href=\"#数组扁平化的方式\" class=\"headerlink\" title=\"数组扁平化的方式\"></a>数组扁平化的方式</h2><p>什么是数组扁平化？</p>\n<p>数组扁平化：指将一个多维数组转化为一个一维数组。</p>\n<p>例：将下面数组扁平化处理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>]]] <span class=\"comment\">// ---&gt; [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"1-使用flat\"><a href=\"#1-使用flat\" class=\"headerlink\" title=\"1.使用flat()\"></a>1.使用flat()</h4><blockquote>\n<p>flat() 方法是ES10提出的，它会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。（flat意为“水平的；平坦的”）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result1 = arr.<span class=\"title function_\">flat</span>(<span class=\"title class_\">Infinity</span>) <span class=\"comment\">// 指定深度为无限</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result1) <span class=\"comment\">// [ 1, 2, 3, 4, 5 ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result2 = arr.<span class=\"title function_\">flat</span>(<span class=\"number\">1</span>) <span class=\"comment\">// 指定深度为1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result2) <span class=\"comment\">// [ 1, 2, 3, [ 4, 5 ] ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result3 = arr.<span class=\"title function_\">flat</span>(<span class=\"number\">2</span>) <span class=\"comment\">// 指定深度为2</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result3) <span class=\"comment\">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-使用正则\"><a href=\"#2-使用正则\" class=\"headerlink\" title=\"2.使用正则\"></a>2.使用正则</h4><p>以下做法得到的数组元素都会变成字符串，不建议使用；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result1 = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\[|\\]/g</span>, <span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result1) <span class=\"comment\">// [ &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27; ] 数组元素都变成了字符串</span></span><br></pre></td></tr></table></figure>\n<p>对以上方法进行优化处理；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result2 = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"string\">&#x27;[&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\[|\\]/g</span>, <span class=\"string\">&#x27;&#x27;</span>) + <span class=\"string\">&#x27;]&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result2) <span class=\"comment\">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-使用reduce-concat\"><a href=\"#3-使用reduce-concat\" class=\"headerlink\" title=\"3.使用reduce()+concat()\"></a>3.使用reduce()+concat()</h4><blockquote>\n<p>使用reduce拿到数组的当前值和前一项值，判断当前值是否为数组，初始值设置为[]，然后使用concat进行数组合并。</p>\n</blockquote>\n<p>reduce()方法：对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。</p>\n<p>concat()方法：用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flatten</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">pre, current</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre.<span class=\"title function_\">concat</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(current) ? <span class=\"title function_\">flatten</span>(current) : current)</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">flatten</span>(arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-使用函数递归\"><a href=\"#4-使用函数递归\" class=\"headerlink\" title=\"4.使用函数递归\"></a>4.使用函数递归</h4><blockquote>\n<p>循环遍历数组，发现含有数组元素就进行递归处理，最终将数组转为一维数组。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result = []</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">exec</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  arr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(item)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">exec</span>(item)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      result.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">exec</span>(arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"5-使用扩展运算符-concat\"><a href=\"#5-使用扩展运算符-concat\" class=\"headerlink\" title=\"5.使用扩展运算符+concat()\"></a>5.使用扩展运算符+concat()</h4><blockquote>\n<p>ES6新推出的扩展运算符能对数组进行降维处理（一次降一维），循环判断是否含有数组，进行concat合并。</p>\n</blockquote>\n<p>some()方法：测试数组中是不是至少有1个元素通过了被提供的函数测试（它返回的是一个Boolean类型的值）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flatten</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (arr.<span class=\"title function_\">some</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(item))) &#123;</span><br><span class=\"line\">    arr = [].<span class=\"title function_\">concat</span>(...arr)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">flatten</span>(arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数组扁平化的方式\"><a href=\"#数组扁平化的方式\" class=\"headerlink\" title=\"数组扁平化的方式\"></a>数组扁平化的方式</h2><p>什么是数组扁平化？</p>\n<p>数组扁平化：指将一个多维数组转化为一个一维数组。</p>\n<p>例：将下面数组扁平化处理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>]]] <span class=\"comment\">// ---&gt; [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"1-使用flat\"><a href=\"#1-使用flat\" class=\"headerlink\" title=\"1.使用flat()\"></a>1.使用flat()</h4><blockquote>\n<p>flat() 方法是ES10提出的，它会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。（flat意为“水平的；平坦的”）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result1 = arr.<span class=\"title function_\">flat</span>(<span class=\"title class_\">Infinity</span>) <span class=\"comment\">// 指定深度为无限</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result1) <span class=\"comment\">// [ 1, 2, 3, 4, 5 ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result2 = arr.<span class=\"title function_\">flat</span>(<span class=\"number\">1</span>) <span class=\"comment\">// 指定深度为1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result2) <span class=\"comment\">// [ 1, 2, 3, [ 4, 5 ] ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result3 = arr.<span class=\"title function_\">flat</span>(<span class=\"number\">2</span>) <span class=\"comment\">// 指定深度为2</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result3) <span class=\"comment\">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-使用正则\"><a href=\"#2-使用正则\" class=\"headerlink\" title=\"2.使用正则\"></a>2.使用正则</h4><p>以下做法得到的数组元素都会变成字符串，不建议使用；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result1 = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\[|\\]/g</span>, <span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result1) <span class=\"comment\">// [ &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27; ] 数组元素都变成了字符串</span></span><br></pre></td></tr></table></figure>\n<p>对以上方法进行优化处理；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result2 = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"string\">&#x27;[&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\[|\\]/g</span>, <span class=\"string\">&#x27;&#x27;</span>) + <span class=\"string\">&#x27;]&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result2) <span class=\"comment\">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-使用reduce-concat\"><a href=\"#3-使用reduce-concat\" class=\"headerlink\" title=\"3.使用reduce()+concat()\"></a>3.使用reduce()+concat()</h4><blockquote>\n<p>使用reduce拿到数组的当前值和前一项值，判断当前值是否为数组，初始值设置为[]，然后使用concat进行数组合并。</p>\n</blockquote>\n<p>reduce()方法：对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。</p>\n<p>concat()方法：用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flatten</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">pre, current</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre.<span class=\"title function_\">concat</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(current) ? <span class=\"title function_\">flatten</span>(current) : current)</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">flatten</span>(arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-使用函数递归\"><a href=\"#4-使用函数递归\" class=\"headerlink\" title=\"4.使用函数递归\"></a>4.使用函数递归</h4><blockquote>\n<p>循环遍历数组，发现含有数组元素就进行递归处理，最终将数组转为一维数组。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result = []</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">exec</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  arr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(item)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">exec</span>(item)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      result.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">exec</span>(arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"5-使用扩展运算符-concat\"><a href=\"#5-使用扩展运算符-concat\" class=\"headerlink\" title=\"5.使用扩展运算符+concat()\"></a>5.使用扩展运算符+concat()</h4><blockquote>\n<p>ES6新推出的扩展运算符能对数组进行降维处理（一次降一维），循环判断是否含有数组，进行concat合并。</p>\n</blockquote>\n<p>some()方法：测试数组中是不是至少有1个元素通过了被提供的函数测试（它返回的是一个Boolean类型的值）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flatten</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (arr.<span class=\"title function_\">some</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(item))) &#123;</span><br><span class=\"line\">    arr = [].<span class=\"title function_\">concat</span>(...arr)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">flatten</span>(arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>\n"},{"title":"js实现数组去重的方式(7种)","author":"68HTML","date":"2022-04-06T09:17:39.000Z","_content":"## JS数组去重的方式\n\n例：将下面数组去除重复元素（以多种数据类型为例）\n\n```javascript\nconst arr = [1, 2, 2, 'abc', 'abc', true, true, false, false, undefined, undefined, NaN, NaN]\n```\n#### 1.利用Set()+Array.from()\n\nSet对象：是值的集合，你可以按照插入的顺序迭代它的元素。 Set中的元素只会出现一次，即Set中的元素是唯一的。\nArray.from() 方法：对一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。\n```javascript\nconst result = Array.from(new Set(arr))\nconsole.log(result) // [ 1, 2, 'abc', true, false, undefined, NaN ]\n```\n注意：以上去方式对NaN和undefined类型去重也是有效的，是因为NaN和undefined都可以被存储在Set中， NaN之间被视为相同的值（尽管在js中：NaN !== NaN）。\n#### 2.利用两层循环+数组的splice方法\n> 通过两层循环对数组元素进行逐一比较，然后通过splice方法来删除重复的元素。此方法对NaN是无法进行去重的，因为进行比较时NaN !== NaN。\n\n```javascript\nfunction removeDuplicate(arr) {\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[i] === arr[j]) {\n        arr.splice(j, 1)\n        len-- // 减少循环次数提高性能\n        j-- // 保证j的值自加后不变\n      }\n    }\n  }\n  return arr\n}\n\nconst result = removeDuplicate(arr)\nconsole.log(result) // [ 1, 2, 'abc', true, false, undefined, NaN, NaN ]\n```\n#### 3.利用数组的indexOf方法\n> 新建一个空数组，遍历需要去重的数组，将数组元素存入新数组中，存放前判断数组中是否已经含有当前元素，没有则存入。此方法也无法对NaN去重。\n\nindexOf() 方法：返回调用它的String对象中第一次出现的指定值的索引，从 fromIndex 处进行搜索。如果未找到该值，则返回 -1。\n\n```javascript\nfunction removeDuplicate(arr) {\n  const newArr = []\n  arr.forEach(item => {\n    if (newArr.indexOf(item) === -1) {\n      newArr.push(item)\n    }\n  })\n  return newArr // 返回一个新数组\n}\n\nconst result = removeDuplicate(arr)\nconsole.log(result) // [ 1, 2, 'abc', true, false, undefined, NaN, NaN ]\n```\n#### 4.利用数组的includes方法\n> 此方法逻辑与indexOf方法去重异曲同工，只是用includes方法来判断是否包含重复元素。\n\nincludes()方法：用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回 false。\n```javascript\nfunction removeDuplicate(arr) {\n  const newArr = []\n  arr.forEach(item => {\n    if (!newArr.includes(item)) {\n      newArr.push(item)\n    }\n  })\n  return newArr\n}\n\nconst result = removeDuplicate(arr)\nconsole.log(result) // [ 1, 2, 'abc', true, false, undefined, NaN ]\n```\n注意：为什么includes能够检测到数组中包含NaN，其涉及到includes底层的实现。如下图为includes实现的部分代码，在进行判断是否包含某元素时会调用sameValueZero方法进行比较，如果为NaN，则会使用isNaN()进行转化。\n\n具体实现可参考：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\n![](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/70833182-7721-44ba-b4ef-c0e82878fc92.png \"\")\n简单测试includes()对NaN的判断：\n```javascript\nconst testArr = [1, 'a', NaN]\nconsole.log(testArr.includes(NaN)) // true\n```\n#### 5.利用数组的filter()+indexOf()\n> filter方法会对满足条件的元素存放到一个新数组中，结合indexOf方法进行判断。\n\nfilter() 方法：会创建一个新数组，其包含通过所提供函数实现的测试的所有元素。\n```javascript\nfunction removeDuplicate(arr) {\n  return arr.filter((item, index) => {\n    return arr.indexOf(item) === index\n  })\n}\n\nconst result = removeDuplicate(arr)\nconsole.log(result) // [ 1, 2, 'abc', true, false, undefined ]\n```\n注意：这里的输出结果中不包含NaN，是因为indexOf()无法对NaN进行判断，即arr.indexOf(item) === index返回结果为false。测试如下：\n```javascript\nconst testArr = [1, 'a', NaN]\nconsole.log(testArr.indexOf(NaN)) // -1\n```\n#### 6.利用Map()\n> Map对象是JavaScript提供的一种数据结构，结构为键值对形式，将数组元素作为map的键存入，然后结合has()和set()方法判断键是否重复。\n\nMap 对象：用于保存键值对，并且能够记住键的原始插入顺序。任何值（对象或者原始值）都可以作为一个键或一个值。\n```javascript\nfunction removeDuplicate(arr) {\n  const map = new Map()\n  const newArr = []\n\n  arr.forEach(item => {\n    if (!map.has(item)) { // has()用于判断map是否包为item的属性值\n      map.set(item, true) // 使用set()将item设置到map中，并设置其属性值为true\n      newArr.push(item)\n    }\n  })\n\n  return newArr\n}\n\nconst result = removeDuplicate(arr)\nconsole.log(result) // [ 1, 2, 'abc', true, false, undefined, NaN ]\n```\n注意：使用Map()也可对NaN去重，原因是Map进行判断时认为NaN是与NaN相等的，剩下所有其它的值是根据 === 运算符的结果判断是否相等。\n#### 7.利用对象\n> 其实现思想和Map()是差不多的，主要是利用了对象的属性名不可重复这一特性。\n```javascript\nfunction removeDuplicate(arr) {\n  const newArr = []\n  const obj = {}\n\n  arr.forEach(item => {\n    if (!obj[item]) {\n      newArr.push(item)\n      obj[item] = true\n    }\n  })\n\n  return newArr\n}\n\nconst result = removeDuplicate(arr)\nconsole.log(result) // [ 1, 2, 'abc', true, false, undefined, NaN ]\n```\n","source":"_posts/javascript/JS_ShiXianShuZuQuChong.md","raw":"title: js实现数组去重的方式(7种)\nauthor: 68HTML\ndate: 2022-04-06 17:17:39\ntags: [\"JS相关\",\"JavaScript\"]\ncategories: [\"前端\"]\n---\n## JS数组去重的方式\n\n例：将下面数组去除重复元素（以多种数据类型为例）\n\n```javascript\nconst arr = [1, 2, 2, 'abc', 'abc', true, true, false, false, undefined, undefined, NaN, NaN]\n```\n#### 1.利用Set()+Array.from()\n\nSet对象：是值的集合，你可以按照插入的顺序迭代它的元素。 Set中的元素只会出现一次，即Set中的元素是唯一的。\nArray.from() 方法：对一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。\n```javascript\nconst result = Array.from(new Set(arr))\nconsole.log(result) // [ 1, 2, 'abc', true, false, undefined, NaN ]\n```\n注意：以上去方式对NaN和undefined类型去重也是有效的，是因为NaN和undefined都可以被存储在Set中， NaN之间被视为相同的值（尽管在js中：NaN !== NaN）。\n#### 2.利用两层循环+数组的splice方法\n> 通过两层循环对数组元素进行逐一比较，然后通过splice方法来删除重复的元素。此方法对NaN是无法进行去重的，因为进行比较时NaN !== NaN。\n\n```javascript\nfunction removeDuplicate(arr) {\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[i] === arr[j]) {\n        arr.splice(j, 1)\n        len-- // 减少循环次数提高性能\n        j-- // 保证j的值自加后不变\n      }\n    }\n  }\n  return arr\n}\n\nconst result = removeDuplicate(arr)\nconsole.log(result) // [ 1, 2, 'abc', true, false, undefined, NaN, NaN ]\n```\n#### 3.利用数组的indexOf方法\n> 新建一个空数组，遍历需要去重的数组，将数组元素存入新数组中，存放前判断数组中是否已经含有当前元素，没有则存入。此方法也无法对NaN去重。\n\nindexOf() 方法：返回调用它的String对象中第一次出现的指定值的索引，从 fromIndex 处进行搜索。如果未找到该值，则返回 -1。\n\n```javascript\nfunction removeDuplicate(arr) {\n  const newArr = []\n  arr.forEach(item => {\n    if (newArr.indexOf(item) === -1) {\n      newArr.push(item)\n    }\n  })\n  return newArr // 返回一个新数组\n}\n\nconst result = removeDuplicate(arr)\nconsole.log(result) // [ 1, 2, 'abc', true, false, undefined, NaN, NaN ]\n```\n#### 4.利用数组的includes方法\n> 此方法逻辑与indexOf方法去重异曲同工，只是用includes方法来判断是否包含重复元素。\n\nincludes()方法：用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回 false。\n```javascript\nfunction removeDuplicate(arr) {\n  const newArr = []\n  arr.forEach(item => {\n    if (!newArr.includes(item)) {\n      newArr.push(item)\n    }\n  })\n  return newArr\n}\n\nconst result = removeDuplicate(arr)\nconsole.log(result) // [ 1, 2, 'abc', true, false, undefined, NaN ]\n```\n注意：为什么includes能够检测到数组中包含NaN，其涉及到includes底层的实现。如下图为includes实现的部分代码，在进行判断是否包含某元素时会调用sameValueZero方法进行比较，如果为NaN，则会使用isNaN()进行转化。\n\n具体实现可参考：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\n![](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/70833182-7721-44ba-b4ef-c0e82878fc92.png \"\")\n简单测试includes()对NaN的判断：\n```javascript\nconst testArr = [1, 'a', NaN]\nconsole.log(testArr.includes(NaN)) // true\n```\n#### 5.利用数组的filter()+indexOf()\n> filter方法会对满足条件的元素存放到一个新数组中，结合indexOf方法进行判断。\n\nfilter() 方法：会创建一个新数组，其包含通过所提供函数实现的测试的所有元素。\n```javascript\nfunction removeDuplicate(arr) {\n  return arr.filter((item, index) => {\n    return arr.indexOf(item) === index\n  })\n}\n\nconst result = removeDuplicate(arr)\nconsole.log(result) // [ 1, 2, 'abc', true, false, undefined ]\n```\n注意：这里的输出结果中不包含NaN，是因为indexOf()无法对NaN进行判断，即arr.indexOf(item) === index返回结果为false。测试如下：\n```javascript\nconst testArr = [1, 'a', NaN]\nconsole.log(testArr.indexOf(NaN)) // -1\n```\n#### 6.利用Map()\n> Map对象是JavaScript提供的一种数据结构，结构为键值对形式，将数组元素作为map的键存入，然后结合has()和set()方法判断键是否重复。\n\nMap 对象：用于保存键值对，并且能够记住键的原始插入顺序。任何值（对象或者原始值）都可以作为一个键或一个值。\n```javascript\nfunction removeDuplicate(arr) {\n  const map = new Map()\n  const newArr = []\n\n  arr.forEach(item => {\n    if (!map.has(item)) { // has()用于判断map是否包为item的属性值\n      map.set(item, true) // 使用set()将item设置到map中，并设置其属性值为true\n      newArr.push(item)\n    }\n  })\n\n  return newArr\n}\n\nconst result = removeDuplicate(arr)\nconsole.log(result) // [ 1, 2, 'abc', true, false, undefined, NaN ]\n```\n注意：使用Map()也可对NaN去重，原因是Map进行判断时认为NaN是与NaN相等的，剩下所有其它的值是根据 === 运算符的结果判断是否相等。\n#### 7.利用对象\n> 其实现思想和Map()是差不多的，主要是利用了对象的属性名不可重复这一特性。\n```javascript\nfunction removeDuplicate(arr) {\n  const newArr = []\n  const obj = {}\n\n  arr.forEach(item => {\n    if (!obj[item]) {\n      newArr.push(item)\n      obj[item] = true\n    }\n  })\n\n  return newArr\n}\n\nconst result = removeDuplicate(arr)\nconsole.log(result) // [ 1, 2, 'abc', true, false, undefined, NaN ]\n```\n","slug":"javascript/JS_ShiXianShuZuQuChong","published":1,"updated":"2022-05-07T07:06:07.501Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2vixl8h000bd8j0holo9s95","content":"<h2 id=\"JS数组去重的方式\"><a href=\"#JS数组去重的方式\" class=\"headerlink\" title=\"JS数组去重的方式\"></a>JS数组去重的方式</h2><p>例：将下面数组去除重复元素（以多种数据类型为例）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"string\">&#x27;abc&#x27;</span>, <span class=\"string\">&#x27;abc&#x27;</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, <span class=\"title class_\">NaN</span>, <span class=\"title class_\">NaN</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-利用Set-Array-from\"><a href=\"#1-利用Set-Array-from\" class=\"headerlink\" title=\"1.利用Set()+Array.from()\"></a>1.利用Set()+Array.from()</h4><p>Set对象：是值的集合，你可以按照插入的顺序迭代它的元素。 Set中的元素只会出现一次，即Set中的元素是唯一的。<br>Array.from() 方法：对一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(arr))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined, NaN ]</span></span><br></pre></td></tr></table></figure>\n<p>注意：以上去方式对NaN和undefined类型去重也是有效的，是因为NaN和undefined都可以被存储在Set中， NaN之间被视为相同的值（尽管在js中：NaN !== NaN）。</p>\n<h4 id=\"2-利用两层循环-数组的splice方法\"><a href=\"#2-利用两层循环-数组的splice方法\" class=\"headerlink\" title=\"2.利用两层循环+数组的splice方法\"></a>2.利用两层循环+数组的splice方法</h4><blockquote>\n<p>通过两层循环对数组元素进行逐一比较，然后通过splice方法来删除重复的元素。此方法对NaN是无法进行去重的，因为进行比较时NaN !== NaN。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">removeDuplicate</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = arr.<span class=\"property\">length</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[i] === arr[j]) &#123;</span><br><span class=\"line\">        arr.<span class=\"title function_\">splice</span>(j, <span class=\"number\">1</span>)</span><br><span class=\"line\">        len-- <span class=\"comment\">// 减少循环次数提高性能</span></span><br><span class=\"line\">        j-- <span class=\"comment\">// 保证j的值自加后不变</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">removeDuplicate</span>(arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined, NaN, NaN ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-利用数组的indexOf方法\"><a href=\"#3-利用数组的indexOf方法\" class=\"headerlink\" title=\"3.利用数组的indexOf方法\"></a>3.利用数组的indexOf方法</h4><blockquote>\n<p>新建一个空数组，遍历需要去重的数组，将数组元素存入新数组中，存放前判断数组中是否已经含有当前元素，没有则存入。此方法也无法对NaN去重。</p>\n</blockquote>\n<p>indexOf() 方法：返回调用它的String对象中第一次出现的指定值的索引，从 fromIndex 处进行搜索。如果未找到该值，则返回 -1。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">removeDuplicate</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newArr = []</span><br><span class=\"line\">  arr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newArr.<span class=\"title function_\">indexOf</span>(item) === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      newArr.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr <span class=\"comment\">// 返回一个新数组</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">removeDuplicate</span>(arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined, NaN, NaN ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-利用数组的includes方法\"><a href=\"#4-利用数组的includes方法\" class=\"headerlink\" title=\"4.利用数组的includes方法\"></a>4.利用数组的includes方法</h4><blockquote>\n<p>此方法逻辑与indexOf方法去重异曲同工，只是用includes方法来判断是否包含重复元素。</p>\n</blockquote>\n<p>includes()方法：用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回 false。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">removeDuplicate</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newArr = []</span><br><span class=\"line\">  arr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!newArr.<span class=\"title function_\">includes</span>(item)) &#123;</span><br><span class=\"line\">      newArr.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">removeDuplicate</span>(arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined, NaN ]</span></span><br></pre></td></tr></table></figure>\n<p>注意：为什么includes能够检测到数组中包含NaN，其涉及到includes底层的实现。如下图为includes实现的部分代码，在进行判断是否包含某元素时会调用sameValueZero方法进行比较，如果为NaN，则会使用isNaN()进行转化。</p>\n<p>具体实现可参考：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes</a><br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/70833182-7721-44ba-b4ef-c0e82878fc92.png\"><br>简单测试includes()对NaN的判断：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> testArr = [<span class=\"number\">1</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"title class_\">NaN</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(testArr.<span class=\"title function_\">includes</span>(<span class=\"title class_\">NaN</span>)) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"5-利用数组的filter-indexOf\"><a href=\"#5-利用数组的filter-indexOf\" class=\"headerlink\" title=\"5.利用数组的filter()+indexOf()\"></a>5.利用数组的filter()+indexOf()</h4><blockquote>\n<p>filter方法会对满足条件的元素存放到一个新数组中，结合indexOf方法进行判断。</p>\n</blockquote>\n<p>filter() 方法：会创建一个新数组，其包含通过所提供函数实现的测试的所有元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">removeDuplicate</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.<span class=\"title function_\">indexOf</span>(item) === index</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">removeDuplicate</span>(arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined ]</span></span><br></pre></td></tr></table></figure>\n<p>注意：这里的输出结果中不包含NaN，是因为indexOf()无法对NaN进行判断，即arr.indexOf(item) === index返回结果为false。测试如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> testArr = [<span class=\"number\">1</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"title class_\">NaN</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(testArr.<span class=\"title function_\">indexOf</span>(<span class=\"title class_\">NaN</span>)) <span class=\"comment\">// -1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-利用Map\"><a href=\"#6-利用Map\" class=\"headerlink\" title=\"6.利用Map()\"></a>6.利用Map()</h4><blockquote>\n<p>Map对象是JavaScript提供的一种数据结构，结构为键值对形式，将数组元素作为map的键存入，然后结合has()和set()方法判断键是否重复。</p>\n</blockquote>\n<p>Map 对象：用于保存键值对，并且能够记住键的原始插入顺序。任何值（对象或者原始值）都可以作为一个键或一个值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">removeDuplicate</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newArr = []</span><br><span class=\"line\"></span><br><span class=\"line\">  arr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!map.<span class=\"title function_\">has</span>(item)) &#123; <span class=\"comment\">// has()用于判断map是否包为item的属性值</span></span><br><span class=\"line\">      map.<span class=\"title function_\">set</span>(item, <span class=\"literal\">true</span>) <span class=\"comment\">// 使用set()将item设置到map中，并设置其属性值为true</span></span><br><span class=\"line\">      newArr.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">removeDuplicate</span>(arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined, NaN ]</span></span><br></pre></td></tr></table></figure>\n<p>注意：使用Map()也可对NaN去重，原因是Map进行判断时认为NaN是与NaN相等的，剩下所有其它的值是根据 === 运算符的结果判断是否相等。</p>\n<h4 id=\"7-利用对象\"><a href=\"#7-利用对象\" class=\"headerlink\" title=\"7.利用对象\"></a>7.利用对象</h4><blockquote>\n<p>其实现思想和Map()是差不多的，主要是利用了对象的属性名不可重复这一特性。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">removeDuplicate</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newArr = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> obj = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  arr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!obj[item]) &#123;</span><br><span class=\"line\">      newArr.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">      obj[item] = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">removeDuplicate</span>(arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined, NaN ]</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JS数组去重的方式\"><a href=\"#JS数组去重的方式\" class=\"headerlink\" title=\"JS数组去重的方式\"></a>JS数组去重的方式</h2><p>例：将下面数组去除重复元素（以多种数据类型为例）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"string\">&#x27;abc&#x27;</span>, <span class=\"string\">&#x27;abc&#x27;</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, <span class=\"title class_\">NaN</span>, <span class=\"title class_\">NaN</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-利用Set-Array-from\"><a href=\"#1-利用Set-Array-from\" class=\"headerlink\" title=\"1.利用Set()+Array.from()\"></a>1.利用Set()+Array.from()</h4><p>Set对象：是值的集合，你可以按照插入的顺序迭代它的元素。 Set中的元素只会出现一次，即Set中的元素是唯一的。<br>Array.from() 方法：对一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(arr))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined, NaN ]</span></span><br></pre></td></tr></table></figure>\n<p>注意：以上去方式对NaN和undefined类型去重也是有效的，是因为NaN和undefined都可以被存储在Set中， NaN之间被视为相同的值（尽管在js中：NaN !== NaN）。</p>\n<h4 id=\"2-利用两层循环-数组的splice方法\"><a href=\"#2-利用两层循环-数组的splice方法\" class=\"headerlink\" title=\"2.利用两层循环+数组的splice方法\"></a>2.利用两层循环+数组的splice方法</h4><blockquote>\n<p>通过两层循环对数组元素进行逐一比较，然后通过splice方法来删除重复的元素。此方法对NaN是无法进行去重的，因为进行比较时NaN !== NaN。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">removeDuplicate</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = arr.<span class=\"property\">length</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[i] === arr[j]) &#123;</span><br><span class=\"line\">        arr.<span class=\"title function_\">splice</span>(j, <span class=\"number\">1</span>)</span><br><span class=\"line\">        len-- <span class=\"comment\">// 减少循环次数提高性能</span></span><br><span class=\"line\">        j-- <span class=\"comment\">// 保证j的值自加后不变</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">removeDuplicate</span>(arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined, NaN, NaN ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-利用数组的indexOf方法\"><a href=\"#3-利用数组的indexOf方法\" class=\"headerlink\" title=\"3.利用数组的indexOf方法\"></a>3.利用数组的indexOf方法</h4><blockquote>\n<p>新建一个空数组，遍历需要去重的数组，将数组元素存入新数组中，存放前判断数组中是否已经含有当前元素，没有则存入。此方法也无法对NaN去重。</p>\n</blockquote>\n<p>indexOf() 方法：返回调用它的String对象中第一次出现的指定值的索引，从 fromIndex 处进行搜索。如果未找到该值，则返回 -1。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">removeDuplicate</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newArr = []</span><br><span class=\"line\">  arr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newArr.<span class=\"title function_\">indexOf</span>(item) === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      newArr.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr <span class=\"comment\">// 返回一个新数组</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">removeDuplicate</span>(arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined, NaN, NaN ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-利用数组的includes方法\"><a href=\"#4-利用数组的includes方法\" class=\"headerlink\" title=\"4.利用数组的includes方法\"></a>4.利用数组的includes方法</h4><blockquote>\n<p>此方法逻辑与indexOf方法去重异曲同工，只是用includes方法来判断是否包含重复元素。</p>\n</blockquote>\n<p>includes()方法：用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回 false。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">removeDuplicate</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newArr = []</span><br><span class=\"line\">  arr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!newArr.<span class=\"title function_\">includes</span>(item)) &#123;</span><br><span class=\"line\">      newArr.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">removeDuplicate</span>(arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined, NaN ]</span></span><br></pre></td></tr></table></figure>\n<p>注意：为什么includes能够检测到数组中包含NaN，其涉及到includes底层的实现。如下图为includes实现的部分代码，在进行判断是否包含某元素时会调用sameValueZero方法进行比较，如果为NaN，则会使用isNaN()进行转化。</p>\n<p>具体实现可参考：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes</a><br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/70833182-7721-44ba-b4ef-c0e82878fc92.png\"><br>简单测试includes()对NaN的判断：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> testArr = [<span class=\"number\">1</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"title class_\">NaN</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(testArr.<span class=\"title function_\">includes</span>(<span class=\"title class_\">NaN</span>)) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"5-利用数组的filter-indexOf\"><a href=\"#5-利用数组的filter-indexOf\" class=\"headerlink\" title=\"5.利用数组的filter()+indexOf()\"></a>5.利用数组的filter()+indexOf()</h4><blockquote>\n<p>filter方法会对满足条件的元素存放到一个新数组中，结合indexOf方法进行判断。</p>\n</blockquote>\n<p>filter() 方法：会创建一个新数组，其包含通过所提供函数实现的测试的所有元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">removeDuplicate</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.<span class=\"title function_\">indexOf</span>(item) === index</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">removeDuplicate</span>(arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined ]</span></span><br></pre></td></tr></table></figure>\n<p>注意：这里的输出结果中不包含NaN，是因为indexOf()无法对NaN进行判断，即arr.indexOf(item) === index返回结果为false。测试如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> testArr = [<span class=\"number\">1</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"title class_\">NaN</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(testArr.<span class=\"title function_\">indexOf</span>(<span class=\"title class_\">NaN</span>)) <span class=\"comment\">// -1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-利用Map\"><a href=\"#6-利用Map\" class=\"headerlink\" title=\"6.利用Map()\"></a>6.利用Map()</h4><blockquote>\n<p>Map对象是JavaScript提供的一种数据结构，结构为键值对形式，将数组元素作为map的键存入，然后结合has()和set()方法判断键是否重复。</p>\n</blockquote>\n<p>Map 对象：用于保存键值对，并且能够记住键的原始插入顺序。任何值（对象或者原始值）都可以作为一个键或一个值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">removeDuplicate</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newArr = []</span><br><span class=\"line\"></span><br><span class=\"line\">  arr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!map.<span class=\"title function_\">has</span>(item)) &#123; <span class=\"comment\">// has()用于判断map是否包为item的属性值</span></span><br><span class=\"line\">      map.<span class=\"title function_\">set</span>(item, <span class=\"literal\">true</span>) <span class=\"comment\">// 使用set()将item设置到map中，并设置其属性值为true</span></span><br><span class=\"line\">      newArr.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">removeDuplicate</span>(arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined, NaN ]</span></span><br></pre></td></tr></table></figure>\n<p>注意：使用Map()也可对NaN去重，原因是Map进行判断时认为NaN是与NaN相等的，剩下所有其它的值是根据 === 运算符的结果判断是否相等。</p>\n<h4 id=\"7-利用对象\"><a href=\"#7-利用对象\" class=\"headerlink\" title=\"7.利用对象\"></a>7.利用对象</h4><blockquote>\n<p>其实现思想和Map()是差不多的，主要是利用了对象的属性名不可重复这一特性。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">removeDuplicate</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newArr = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> obj = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  arr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!obj[item]) &#123;</span><br><span class=\"line\">      newArr.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">      obj[item] = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">removeDuplicate</span>(arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined, NaN ]</span></span><br></pre></td></tr></table></figure>\n"},{"title":"JS字符串截取函数","author":"68HTML","date":"2022-04-07T01:13:42.000Z","_content":"## Bcrypt密码在线生成计算器\n\n> 这篇文章主要介绍了JS字符串截取函数实例，有需要的朋友可以参考一下\n\n使用 substring()或者slice()\n\n函数：split()\n功能：使用一个指定的分隔符把一个字符串分割存储到数组\n例子：\n```javascript\nstr=”jpg|bmp|gif|ico|png”;\narr=theString.split(”|”);\n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组\n```\n函数：John()\n功能：使用您选择的分隔符将一个数组合并为一个字符串\n例子：\n```javascript\nvar delimitedString=myArray.join(delimiter);\nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”);\nvar portableList=myList.join(”|”);\n//结果是jpg|bmp|gif|ico|png\n```\n函数：substring()\n功能：字符串截取，比如想从”MinidxSearchEngine”中得到”Minidx”就要用到substring(0,6)\n函数：indexOf()\n功能：返回字符串中匹配子串的第一个字符的下标\n```javascript\nvar myString=”JavaScript”;\nvar w=myString.indexOf(”v”);w will be 2\nvar x=myString.indexOf(”S”);x will be 4\nvar y=myString.indexOf(”Script”);y will also be 4\nvar z=myString.indexOf(”key”);z will be -1\n```\n","source":"_posts/javascript/JS_ZiFuCuanJieQuHanShu.md","raw":"title: JS字符串截取函数\nauthor: 68HTML\ndate: 2022-04-07 09:13:42\ntags: [\"Js相关\",\"JavaScript\"]\ncategories: [\"前端\"]\n---\n## Bcrypt密码在线生成计算器\n\n> 这篇文章主要介绍了JS字符串截取函数实例，有需要的朋友可以参考一下\n\n使用 substring()或者slice()\n\n函数：split()\n功能：使用一个指定的分隔符把一个字符串分割存储到数组\n例子：\n```javascript\nstr=”jpg|bmp|gif|ico|png”;\narr=theString.split(”|”);\n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组\n```\n函数：John()\n功能：使用您选择的分隔符将一个数组合并为一个字符串\n例子：\n```javascript\nvar delimitedString=myArray.join(delimiter);\nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”);\nvar portableList=myList.join(”|”);\n//结果是jpg|bmp|gif|ico|png\n```\n函数：substring()\n功能：字符串截取，比如想从”MinidxSearchEngine”中得到”Minidx”就要用到substring(0,6)\n函数：indexOf()\n功能：返回字符串中匹配子串的第一个字符的下标\n```javascript\nvar myString=”JavaScript”;\nvar w=myString.indexOf(”v”);w will be 2\nvar x=myString.indexOf(”S”);x will be 4\nvar y=myString.indexOf(”Script”);y will also be 4\nvar z=myString.indexOf(”key”);z will be -1\n```\n","slug":"javascript/JS_ZiFuCuanJieQuHanShu","published":1,"updated":"2022-05-07T07:06:07.165Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2vixl8j000fd8j0g29obwxo","content":"<h2 id=\"Bcrypt密码在线生成计算器\"><a href=\"#Bcrypt密码在线生成计算器\" class=\"headerlink\" title=\"Bcrypt密码在线生成计算器\"></a>Bcrypt密码在线生成计算器</h2><blockquote>\n<p>这篇文章主要介绍了JS字符串截取函数实例，有需要的朋友可以参考一下</p>\n</blockquote>\n<p>使用 substring()或者slice()</p>\n<p>函数：split()<br>功能：使用一个指定的分隔符把一个字符串分割存储到数组<br>例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str=”jpg|bmp|gif|ico|png”;</span><br><span class=\"line\">arr=theString.<span class=\"title function_\">split</span>(”|”);</span><br><span class=\"line\"><span class=\"comment\">//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组</span></span><br></pre></td></tr></table></figure>\n<p>函数：John()<br>功能：使用您选择的分隔符将一个数组合并为一个字符串<br>例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> delimitedString=myArray.<span class=\"title function_\">join</span>(delimiter);</span><br><span class=\"line\"><span class=\"keyword\">var</span> myList=<span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(”jpg”,”bmp”,”gif”,”ico”,”png”);</span><br><span class=\"line\"><span class=\"keyword\">var</span> portableList=myList.<span class=\"title function_\">join</span>(”|”);</span><br><span class=\"line\"><span class=\"comment\">//结果是jpg|bmp|gif|ico|png</span></span><br></pre></td></tr></table></figure>\n<p>函数：substring()<br>功能：字符串截取，比如想从”MinidxSearchEngine”中得到”Minidx”就要用到substring(0,6)<br>函数：indexOf()<br>功能：返回字符串中匹配子串的第一个字符的下标</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myString=”<span class=\"title class_\">JavaScript</span>”;</span><br><span class=\"line\"><span class=\"keyword\">var</span> w=myString.<span class=\"title function_\">indexOf</span>(”v”);w will be <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x=myString.<span class=\"title function_\">indexOf</span>(”S”);x will be <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> y=myString.<span class=\"title function_\">indexOf</span>(”<span class=\"title class_\">Script</span>”);y will also be <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> z=myString.<span class=\"title function_\">indexOf</span>(”key”);z will be -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Bcrypt密码在线生成计算器\"><a href=\"#Bcrypt密码在线生成计算器\" class=\"headerlink\" title=\"Bcrypt密码在线生成计算器\"></a>Bcrypt密码在线生成计算器</h2><blockquote>\n<p>这篇文章主要介绍了JS字符串截取函数实例，有需要的朋友可以参考一下</p>\n</blockquote>\n<p>使用 substring()或者slice()</p>\n<p>函数：split()<br>功能：使用一个指定的分隔符把一个字符串分割存储到数组<br>例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str=”jpg|bmp|gif|ico|png”;</span><br><span class=\"line\">arr=theString.<span class=\"title function_\">split</span>(”|”);</span><br><span class=\"line\"><span class=\"comment\">//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组</span></span><br></pre></td></tr></table></figure>\n<p>函数：John()<br>功能：使用您选择的分隔符将一个数组合并为一个字符串<br>例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> delimitedString=myArray.<span class=\"title function_\">join</span>(delimiter);</span><br><span class=\"line\"><span class=\"keyword\">var</span> myList=<span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(”jpg”,”bmp”,”gif”,”ico”,”png”);</span><br><span class=\"line\"><span class=\"keyword\">var</span> portableList=myList.<span class=\"title function_\">join</span>(”|”);</span><br><span class=\"line\"><span class=\"comment\">//结果是jpg|bmp|gif|ico|png</span></span><br></pre></td></tr></table></figure>\n<p>函数：substring()<br>功能：字符串截取，比如想从”MinidxSearchEngine”中得到”Minidx”就要用到substring(0,6)<br>函数：indexOf()<br>功能：返回字符串中匹配子串的第一个字符的下标</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myString=”<span class=\"title class_\">JavaScript</span>”;</span><br><span class=\"line\"><span class=\"keyword\">var</span> w=myString.<span class=\"title function_\">indexOf</span>(”v”);w will be <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x=myString.<span class=\"title function_\">indexOf</span>(”S”);x will be <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> y=myString.<span class=\"title function_\">indexOf</span>(”<span class=\"title class_\">Script</span>”);y will also be <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> z=myString.<span class=\"title function_\">indexOf</span>(”key”);z will be -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n"},{"title":"JS 闭包","author":"68HTML","date":"2022-04-06T09:36:52.000Z","_content":"## JS 闭包\n\n> 如果一个函数能访问另一个函数中的变量，则这个函数就称为闭包。最直接的是：函数a中定义了一个函数b，且在函数a外能够调用这个函数b，就会形成闭包。\n\n注意：闭包只能取得包含函数的变量的最后一个值，如:\n```javascript\nfunction getButton(){\n      for(var i=0;i<3;i++){\n          var element=document.createElement(\"button\");\n          var elem_text=document.createTextNode(\"Button\"+i);\n          element.appendChild(elem_text);\n          document.body.appendChild(element);\n\n          element.onclick=function(){    //闭包\n              alert(i);\n          };\n      }\n  }\ngetButton();\n```\n点击按钮时弹出的警告框的值都为3.将代码做如下修改：\n```javascript\nfunction getButton(){\n      for(var i=0;i<3;i++){\n          var element=document.createElement(\"button\");\n          var elem_text=document.createTextNode(\"Button\"+i);\n          element.appendChild(elem_text);\n          document.body.appendChild(element);\n\n          element.onclick=(function(num){\n              return function(){\n                  alert(num);\n              };\n          })(i);  //强制将参数i传递进去并立即调用执行\n      }\n  }\n  getButton();\n```\n当然有多种方法，将红色部分也可改为：\n```javascript\n(function(num){element.onclick=function(){   \n  alert(num);\n };  //这样也可以\n})(i);\n```\n再举个例子：\n```javascript\nvar arr = ['第一次','第二次','第三次'];\nfor(var i=0;i<arr.length;i++){\n  setTimeout(function(){\n     document.getElementById('info').innerHTML = arr[i];\n    },i*1000);\n}\n```\n则三次输出结果都为undefined，原因同样是闭包只能取得包含函数的变量中的最后一个值。for循环执行完毕后，i的值为3，而arr[3]=undefined;对函数进行修改如下：\n```javascript\nvar arr = ['第一次','第二次','第三次'];\n\nfor(var i=0;i<arr.length;i++){\n  (function(num){\n     setTimeout(function(){\n          document.getElementById('info').innerHTML = arr[i];\n     },i*1000);\n  })(i);\n}\n```\n结果，刚打开页面时显示\"第一次\"，再过1秒显示“第二次”，再过2秒显示“第三次”。\n","source":"_posts/javascript/JS_bibao.md","raw":"title: JS 闭包\nauthor: 68HTML\ndate: 2022-04-06 17:36:52\ntags: [\"JavaScript\"]\ncategories: [\"前端\"]\n---\n## JS 闭包\n\n> 如果一个函数能访问另一个函数中的变量，则这个函数就称为闭包。最直接的是：函数a中定义了一个函数b，且在函数a外能够调用这个函数b，就会形成闭包。\n\n注意：闭包只能取得包含函数的变量的最后一个值，如:\n```javascript\nfunction getButton(){\n      for(var i=0;i<3;i++){\n          var element=document.createElement(\"button\");\n          var elem_text=document.createTextNode(\"Button\"+i);\n          element.appendChild(elem_text);\n          document.body.appendChild(element);\n\n          element.onclick=function(){    //闭包\n              alert(i);\n          };\n      }\n  }\ngetButton();\n```\n点击按钮时弹出的警告框的值都为3.将代码做如下修改：\n```javascript\nfunction getButton(){\n      for(var i=0;i<3;i++){\n          var element=document.createElement(\"button\");\n          var elem_text=document.createTextNode(\"Button\"+i);\n          element.appendChild(elem_text);\n          document.body.appendChild(element);\n\n          element.onclick=(function(num){\n              return function(){\n                  alert(num);\n              };\n          })(i);  //强制将参数i传递进去并立即调用执行\n      }\n  }\n  getButton();\n```\n当然有多种方法，将红色部分也可改为：\n```javascript\n(function(num){element.onclick=function(){   \n  alert(num);\n };  //这样也可以\n})(i);\n```\n再举个例子：\n```javascript\nvar arr = ['第一次','第二次','第三次'];\nfor(var i=0;i<arr.length;i++){\n  setTimeout(function(){\n     document.getElementById('info').innerHTML = arr[i];\n    },i*1000);\n}\n```\n则三次输出结果都为undefined，原因同样是闭包只能取得包含函数的变量中的最后一个值。for循环执行完毕后，i的值为3，而arr[3]=undefined;对函数进行修改如下：\n```javascript\nvar arr = ['第一次','第二次','第三次'];\n\nfor(var i=0;i<arr.length;i++){\n  (function(num){\n     setTimeout(function(){\n          document.getElementById('info').innerHTML = arr[i];\n     },i*1000);\n  })(i);\n}\n```\n结果，刚打开页面时显示\"第一次\"，再过1秒显示“第二次”，再过2秒显示“第三次”。\n","slug":"javascript/JS_bibao","published":1,"updated":"2022-05-07T07:06:07.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2vixl8l000gd8j05meoay8t","content":"<h2 id=\"JS-闭包\"><a href=\"#JS-闭包\" class=\"headerlink\" title=\"JS 闭包\"></a>JS 闭包</h2><blockquote>\n<p>如果一个函数能访问另一个函数中的变量，则这个函数就称为闭包。最直接的是：函数a中定义了一个函数b，且在函数a外能够调用这个函数b，就会形成闭包。</p>\n</blockquote>\n<p>注意：闭包只能取得包含函数的变量的最后一个值，如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getButton</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> element=<span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;button&quot;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">var</span> elem_text=<span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(<span class=\"string\">&quot;Button&quot;</span>+i);</span><br><span class=\"line\">          element.<span class=\"title function_\">appendChild</span>(elem_text);</span><br><span class=\"line\">          <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(element);</span><br><span class=\"line\"></span><br><span class=\"line\">          element.<span class=\"property\">onclick</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;    <span class=\"comment\">//闭包</span></span><br><span class=\"line\">              <span class=\"title function_\">alert</span>(i);</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"title function_\">getButton</span>();</span><br></pre></td></tr></table></figure>\n<p>点击按钮时弹出的警告框的值都为3.将代码做如下修改：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getButton</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> element=<span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;button&quot;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">var</span> elem_text=<span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(<span class=\"string\">&quot;Button&quot;</span>+i);</span><br><span class=\"line\">          element.<span class=\"title function_\">appendChild</span>(elem_text);</span><br><span class=\"line\">          <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(element);</span><br><span class=\"line\"></span><br><span class=\"line\">          element.<span class=\"property\">onclick</span>=(<span class=\"keyword\">function</span>(<span class=\"params\">num</span>)&#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                  <span class=\"title function_\">alert</span>(num);</span><br><span class=\"line\">              &#125;;</span><br><span class=\"line\">          &#125;)(i);  <span class=\"comment\">//强制将参数i传递进去并立即调用执行</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">getButton</span>();</span><br></pre></td></tr></table></figure>\n<p>当然有多种方法，将红色部分也可改为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\">num</span>)&#123;element.<span class=\"property\">onclick</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;   </span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(num);</span><br><span class=\"line\"> &#125;;  <span class=\"comment\">//这样也可以</span></span><br><span class=\"line\">&#125;)(i);</span><br></pre></td></tr></table></figure>\n<p>再举个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;第一次&#x27;</span>,<span class=\"string\">&#x27;第二次&#x27;</span>,<span class=\"string\">&#x27;第三次&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.<span class=\"property\">length</span>;i++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">     <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;info&#x27;</span>).<span class=\"property\">innerHTML</span> = arr[i];</span><br><span class=\"line\">    &#125;,i*<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>则三次输出结果都为undefined，原因同样是闭包只能取得包含函数的变量中的最后一个值。for循环执行完毕后，i的值为3，而arr[3]=undefined;对函数进行修改如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;第一次&#x27;</span>,<span class=\"string\">&#x27;第二次&#x27;</span>,<span class=\"string\">&#x27;第三次&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.<span class=\"property\">length</span>;i++)&#123;</span><br><span class=\"line\">  (<span class=\"keyword\">function</span>(<span class=\"params\">num</span>)&#123;</span><br><span class=\"line\">     <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;info&#x27;</span>).<span class=\"property\">innerHTML</span> = arr[i];</span><br><span class=\"line\">     &#125;,i*<span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;)(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果，刚打开页面时显示”第一次”，再过1秒显示“第二次”，再过2秒显示“第三次”。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JS-闭包\"><a href=\"#JS-闭包\" class=\"headerlink\" title=\"JS 闭包\"></a>JS 闭包</h2><blockquote>\n<p>如果一个函数能访问另一个函数中的变量，则这个函数就称为闭包。最直接的是：函数a中定义了一个函数b，且在函数a外能够调用这个函数b，就会形成闭包。</p>\n</blockquote>\n<p>注意：闭包只能取得包含函数的变量的最后一个值，如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getButton</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> element=<span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;button&quot;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">var</span> elem_text=<span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(<span class=\"string\">&quot;Button&quot;</span>+i);</span><br><span class=\"line\">          element.<span class=\"title function_\">appendChild</span>(elem_text);</span><br><span class=\"line\">          <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(element);</span><br><span class=\"line\"></span><br><span class=\"line\">          element.<span class=\"property\">onclick</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;    <span class=\"comment\">//闭包</span></span><br><span class=\"line\">              <span class=\"title function_\">alert</span>(i);</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"title function_\">getButton</span>();</span><br></pre></td></tr></table></figure>\n<p>点击按钮时弹出的警告框的值都为3.将代码做如下修改：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getButton</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> element=<span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;button&quot;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">var</span> elem_text=<span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(<span class=\"string\">&quot;Button&quot;</span>+i);</span><br><span class=\"line\">          element.<span class=\"title function_\">appendChild</span>(elem_text);</span><br><span class=\"line\">          <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(element);</span><br><span class=\"line\"></span><br><span class=\"line\">          element.<span class=\"property\">onclick</span>=(<span class=\"keyword\">function</span>(<span class=\"params\">num</span>)&#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                  <span class=\"title function_\">alert</span>(num);</span><br><span class=\"line\">              &#125;;</span><br><span class=\"line\">          &#125;)(i);  <span class=\"comment\">//强制将参数i传递进去并立即调用执行</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">getButton</span>();</span><br></pre></td></tr></table></figure>\n<p>当然有多种方法，将红色部分也可改为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\">num</span>)&#123;element.<span class=\"property\">onclick</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;   </span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(num);</span><br><span class=\"line\"> &#125;;  <span class=\"comment\">//这样也可以</span></span><br><span class=\"line\">&#125;)(i);</span><br></pre></td></tr></table></figure>\n<p>再举个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;第一次&#x27;</span>,<span class=\"string\">&#x27;第二次&#x27;</span>,<span class=\"string\">&#x27;第三次&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.<span class=\"property\">length</span>;i++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">     <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;info&#x27;</span>).<span class=\"property\">innerHTML</span> = arr[i];</span><br><span class=\"line\">    &#125;,i*<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>则三次输出结果都为undefined，原因同样是闭包只能取得包含函数的变量中的最后一个值。for循环执行完毕后，i的值为3，而arr[3]=undefined;对函数进行修改如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;第一次&#x27;</span>,<span class=\"string\">&#x27;第二次&#x27;</span>,<span class=\"string\">&#x27;第三次&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.<span class=\"property\">length</span>;i++)&#123;</span><br><span class=\"line\">  (<span class=\"keyword\">function</span>(<span class=\"params\">num</span>)&#123;</span><br><span class=\"line\">     <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;info&#x27;</span>).<span class=\"property\">innerHTML</span> = arr[i];</span><br><span class=\"line\">     &#125;,i*<span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;)(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果，刚打开页面时显示”第一次”，再过1秒显示“第二次”，再过2秒显示“第三次”。</p>\n"},{"title":"JavaScript的防抖与节流","date":"2022-04-07T02:52:00.000Z","_content":"\n> 这篇文章主要介绍了什么是JavaScript的防抖与节流,防抖是在频繁触发某一个事件时，一段时间内不再触发该事件后才会去调用对应的回调函数，在设定间隔时间内如果下一次事件被触发， 那么就重新开始定时器，直到事件触发结束，节流看下面文章的具体介绍吧\n\n## 一、函数防抖（debounce）\n### 1. 什么是防抖？\n> 函数防抖： 在频繁触发某一个事件时，一段时间内不再触发该事件后才会去调用对应的回调函数，在设定间隔时间内如果下一次事件被触发， 那么就重新开始定时器，直到事件触发结束。\n\n规定时间内没有继续触发事件的前提下，再去调用事件处理函数；\n\n具体如下面的例子所示：\n\n```javascript\n/*定义防抖函数\n * func：传入一个函数，事件不再持续触发时会调用该函数\n * delay:定义持续多久后执行传入的回调函数\n * */\n function debounce(func,delay) {\n  let timer = null  // 用于保存定时器\n  return function (...args) {\n   // 如果定时器存在，清除定时器，随后重新设置timer\n   if(timer !== null) clearTimeout(timer)\n   timer = setTimeout(func, delay)  // 超过delay为接收到事件会调用这里的func   必要的额时候可以修改func的this指向  由于timer对外部存在引用，因此不会被销毁\n  }\n }\n \n /*事件处理函数*/\n function testDeBounce(){\n  console.log('你看我执行了几次？？')\n }\n \n // 接收debounce返回的函数\n const temp = debounce(testDeBounce(),1000)\n \n /*绑定事件，测试防抖函数*/\n window.addEventListener('scroll',()=>{\n  temp()\n }); // 这样写最少调用一次事件处理函数，最多也不会多余下面的写法执行的次数\n window.addEventListener('scroll', testDeBounce); // 如果这样写的话，每当页面滚动就会调用事件处理函数\n```\n总结一下思路：\n\n1. 定义一个节流函数\n2. 函数内部使用一个变量保存定时器\n3. 返回一个函数，函数内部定义：如果定时器已经存在就清除定时器，重新设置定时器\n4. 定义一个变量来接收debounce返回的函数\n5. 在事件的回调函数中直接调用上一步的变量接收的方法\n\n## 二、函数节流\n\n>函数节流： 在事件持续触发的前提下，保证一定时间段内只调用一次事件处理函数，就是函数节流；\n\n函数节流实现的方式： 定时器、时间戳、定时器+时间戳；\n\n### 2.1 定时器实现\n思路：\n\n1. 定义节流函数throttle\n2. 定义timer保存定时器\n3. 返回一个函数。函数内部定义：如果定时器不存在，设置定时器，间隔某一时间后将timer设置为null，如果在这之前事件再次触发，则定时器中的回调无效\n```<button>这是一个孤独的按钮</button>```\n```javascript\n/*\n * 定义定时器节流函数\n * func:传入事件处理函数\n * delay：在delay指定的时间内定时器回调无效\n * */\n function throttle(func,delay) {\n  let timer = null\n  const context = this\n  return function(...args){\n   // 如果定时器不存在\n   if(!timer){\n    timer = setTimeout(()=>{\n     func.apply(context,args) // 考虑返回的函数调用的环境，因此这里不直接使用this\n     timer = null // delay之后清除定时器\n    },delay)\n   }\n  }\n }\n \n function test() {\n  console.log('啊啊啊！')\n }\n \n const temp = throttle(test,1000)\n \n document.querySelector('button').addEventListener('click',()=>{\n  temp()\n })\n```\n### 2.2 时间戳实现\n```javascript\nvar throttle = function(func, delay) {            \n　　var prev = Date.now();            \n　　return function() {                \n　　　　var context = this;                \n　　　　var args = arguments;                \n　　　　var now = Date.now();                \n　　　　if (now - prev >= delay) {                    \n　　　　　　func.apply(context, args);                    \n　　　　　　prev = Date.now();                \n　　　　}            \n　　}        \n}    \n \nfunction handle() {            \n　　console.log(Math.random());        \n}        \n \nwindow.addEventListener('scroll', throttle(handle, 1000));\n```\n### 2.3 时间戳+定时器\n```javascript\n// 节流throttle代码（时间戳+定时器）：\nvar throttle = function(func, delay) {     \n    var timer = null;     \n    var startTime = Date.now();     \n    return function() {             \n        var curTime = Date.now();             \n        var remaining = delay - (curTime - startTime);             \n        var context = this;             \n        var args = arguments;             \n        clearTimeout(timer);              \n        if (remaining <= 0) {                    \n            func.apply(context, args);                    \n            startTime = Date.now();              \n        } else {                    \n            timer = setTimeout(func, remaining);              \n        }      \n    }\n}\n \nfunction handle() {      \n    console.log(Math.random());\n} \n \nwindow.addEventListener('scroll', throttle(handle, 1000));\n```\n到此这篇关于什么是JavaScript的防抖与节流的文章就介绍到这了,更多相关JavaScript的防抖与节流内容请搜索68HTML以前的文章或继续浏览下面的相关文章希望大家以后多多支持68HTML！\n\n","source":"_posts/javascript/JavaScriptDeFangDouYuJieLiu.md","raw":"---\ntitle: JavaScript的防抖与节流\ndate: 2022-04-07 10:52:00\ntags: [\"JavaScript\",\"js防抖\",\"js节流\"]\ncategories: [\"JavaScript\"]\n---\n\n> 这篇文章主要介绍了什么是JavaScript的防抖与节流,防抖是在频繁触发某一个事件时，一段时间内不再触发该事件后才会去调用对应的回调函数，在设定间隔时间内如果下一次事件被触发， 那么就重新开始定时器，直到事件触发结束，节流看下面文章的具体介绍吧\n\n## 一、函数防抖（debounce）\n### 1. 什么是防抖？\n> 函数防抖： 在频繁触发某一个事件时，一段时间内不再触发该事件后才会去调用对应的回调函数，在设定间隔时间内如果下一次事件被触发， 那么就重新开始定时器，直到事件触发结束。\n\n规定时间内没有继续触发事件的前提下，再去调用事件处理函数；\n\n具体如下面的例子所示：\n\n```javascript\n/*定义防抖函数\n * func：传入一个函数，事件不再持续触发时会调用该函数\n * delay:定义持续多久后执行传入的回调函数\n * */\n function debounce(func,delay) {\n  let timer = null  // 用于保存定时器\n  return function (...args) {\n   // 如果定时器存在，清除定时器，随后重新设置timer\n   if(timer !== null) clearTimeout(timer)\n   timer = setTimeout(func, delay)  // 超过delay为接收到事件会调用这里的func   必要的额时候可以修改func的this指向  由于timer对外部存在引用，因此不会被销毁\n  }\n }\n \n /*事件处理函数*/\n function testDeBounce(){\n  console.log('你看我执行了几次？？')\n }\n \n // 接收debounce返回的函数\n const temp = debounce(testDeBounce(),1000)\n \n /*绑定事件，测试防抖函数*/\n window.addEventListener('scroll',()=>{\n  temp()\n }); // 这样写最少调用一次事件处理函数，最多也不会多余下面的写法执行的次数\n window.addEventListener('scroll', testDeBounce); // 如果这样写的话，每当页面滚动就会调用事件处理函数\n```\n总结一下思路：\n\n1. 定义一个节流函数\n2. 函数内部使用一个变量保存定时器\n3. 返回一个函数，函数内部定义：如果定时器已经存在就清除定时器，重新设置定时器\n4. 定义一个变量来接收debounce返回的函数\n5. 在事件的回调函数中直接调用上一步的变量接收的方法\n\n## 二、函数节流\n\n>函数节流： 在事件持续触发的前提下，保证一定时间段内只调用一次事件处理函数，就是函数节流；\n\n函数节流实现的方式： 定时器、时间戳、定时器+时间戳；\n\n### 2.1 定时器实现\n思路：\n\n1. 定义节流函数throttle\n2. 定义timer保存定时器\n3. 返回一个函数。函数内部定义：如果定时器不存在，设置定时器，间隔某一时间后将timer设置为null，如果在这之前事件再次触发，则定时器中的回调无效\n```<button>这是一个孤独的按钮</button>```\n```javascript\n/*\n * 定义定时器节流函数\n * func:传入事件处理函数\n * delay：在delay指定的时间内定时器回调无效\n * */\n function throttle(func,delay) {\n  let timer = null\n  const context = this\n  return function(...args){\n   // 如果定时器不存在\n   if(!timer){\n    timer = setTimeout(()=>{\n     func.apply(context,args) // 考虑返回的函数调用的环境，因此这里不直接使用this\n     timer = null // delay之后清除定时器\n    },delay)\n   }\n  }\n }\n \n function test() {\n  console.log('啊啊啊！')\n }\n \n const temp = throttle(test,1000)\n \n document.querySelector('button').addEventListener('click',()=>{\n  temp()\n })\n```\n### 2.2 时间戳实现\n```javascript\nvar throttle = function(func, delay) {            \n　　var prev = Date.now();            \n　　return function() {                \n　　　　var context = this;                \n　　　　var args = arguments;                \n　　　　var now = Date.now();                \n　　　　if (now - prev >= delay) {                    \n　　　　　　func.apply(context, args);                    \n　　　　　　prev = Date.now();                \n　　　　}            \n　　}        \n}    \n \nfunction handle() {            \n　　console.log(Math.random());        \n}        \n \nwindow.addEventListener('scroll', throttle(handle, 1000));\n```\n### 2.3 时间戳+定时器\n```javascript\n// 节流throttle代码（时间戳+定时器）：\nvar throttle = function(func, delay) {     \n    var timer = null;     \n    var startTime = Date.now();     \n    return function() {             \n        var curTime = Date.now();             \n        var remaining = delay - (curTime - startTime);             \n        var context = this;             \n        var args = arguments;             \n        clearTimeout(timer);              \n        if (remaining <= 0) {                    \n            func.apply(context, args);                    \n            startTime = Date.now();              \n        } else {                    \n            timer = setTimeout(func, remaining);              \n        }      \n    }\n}\n \nfunction handle() {      \n    console.log(Math.random());\n} \n \nwindow.addEventListener('scroll', throttle(handle, 1000));\n```\n到此这篇关于什么是JavaScript的防抖与节流的文章就介绍到这了,更多相关JavaScript的防抖与节流内容请搜索68HTML以前的文章或继续浏览下面的相关文章希望大家以后多多支持68HTML！\n\n","slug":"javascript/JavaScriptDeFangDouYuJieLiu","published":1,"updated":"2022-04-07T07:02:28.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2vixl8m000kd8j0gupi0p3u","content":"<blockquote>\n<p>这篇文章主要介绍了什么是JavaScript的防抖与节流,防抖是在频繁触发某一个事件时，一段时间内不再触发该事件后才会去调用对应的回调函数，在设定间隔时间内如果下一次事件被触发， 那么就重新开始定时器，直到事件触发结束，节流看下面文章的具体介绍吧</p>\n</blockquote>\n<h2 id=\"一、函数防抖（debounce）\"><a href=\"#一、函数防抖（debounce）\" class=\"headerlink\" title=\"一、函数防抖（debounce）\"></a>一、函数防抖（debounce）</h2><h3 id=\"1-什么是防抖？\"><a href=\"#1-什么是防抖？\" class=\"headerlink\" title=\"1. 什么是防抖？\"></a>1. 什么是防抖？</h3><blockquote>\n<p>函数防抖： 在频繁触发某一个事件时，一段时间内不再触发该事件后才会去调用对应的回调函数，在设定间隔时间内如果下一次事件被触发， 那么就重新开始定时器，直到事件触发结束。</p>\n</blockquote>\n<p>规定时间内没有继续触发事件的前提下，再去调用事件处理函数；</p>\n<p>具体如下面的例子所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*定义防抖函数</span></span><br><span class=\"line\"><span class=\"comment\"> * func：传入一个函数，事件不再持续触发时会调用该函数</span></span><br><span class=\"line\"><span class=\"comment\"> * delay:定义持续多久后执行传入的回调函数</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">func,delay</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>  <span class=\"comment\">// 用于保存定时器</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 如果定时器存在，清除定时器，随后重新设置timer</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span>(timer !== <span class=\"literal\">null</span>) <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">   timer = <span class=\"built_in\">setTimeout</span>(func, delay)  <span class=\"comment\">// 超过delay为接收到事件会调用这里的func   必要的额时候可以修改func的this指向  由于timer对外部存在引用，因此不会被销毁</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">/*事件处理函数*/</span></span><br><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">testDeBounce</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;你看我执行了几次？？&#x27;</span>)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">// 接收debounce返回的函数</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span> temp = <span class=\"title function_\">debounce</span>(<span class=\"title function_\">testDeBounce</span>(),<span class=\"number\">1000</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">/*绑定事件，测试防抖函数*/</span></span><br><span class=\"line\"> <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;scroll&#x27;</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"title function_\">temp</span>()</span><br><span class=\"line\"> &#125;); <span class=\"comment\">// 这样写最少调用一次事件处理函数，最多也不会多余下面的写法执行的次数</span></span><br><span class=\"line\"> <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;scroll&#x27;</span>, testDeBounce); <span class=\"comment\">// 如果这样写的话，每当页面滚动就会调用事件处理函数</span></span><br></pre></td></tr></table></figure>\n<p>总结一下思路：</p>\n<ol>\n<li>定义一个节流函数</li>\n<li>函数内部使用一个变量保存定时器</li>\n<li>返回一个函数，函数内部定义：如果定时器已经存在就清除定时器，重新设置定时器</li>\n<li>定义一个变量来接收debounce返回的函数</li>\n<li>在事件的回调函数中直接调用上一步的变量接收的方法</li>\n</ol>\n<h2 id=\"二、函数节流\"><a href=\"#二、函数节流\" class=\"headerlink\" title=\"二、函数节流\"></a>二、函数节流</h2><blockquote>\n<p>函数节流： 在事件持续触发的前提下，保证一定时间段内只调用一次事件处理函数，就是函数节流；</p>\n</blockquote>\n<p>函数节流实现的方式： 定时器、时间戳、定时器+时间戳；</p>\n<h3 id=\"2-1-定时器实现\"><a href=\"#2-1-定时器实现\" class=\"headerlink\" title=\"2.1 定时器实现\"></a>2.1 定时器实现</h3><p>思路：</p>\n<ol>\n<li>定义节流函数throttle</li>\n<li>定义timer保存定时器</li>\n<li>返回一个函数。函数内部定义：如果定时器不存在，设置定时器，间隔某一时间后将timer设置为null，如果在这之前事件再次触发，则定时器中的回调无效<br><code>&lt;button&gt;这是一个孤独的按钮&lt;/button&gt;</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义定时器节流函数</span></span><br><span class=\"line\"><span class=\"comment\"> * func:传入事件处理函数</span></span><br><span class=\"line\"><span class=\"comment\"> * delay：在delay指定的时间内定时器回调无效</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">func,delay</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> context = <span class=\"variable language_\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">...args</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 如果定时器不存在</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span>(!timer)&#123;</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">     func.<span class=\"title function_\">apply</span>(context,args) <span class=\"comment\">// 考虑返回的函数调用的环境，因此这里不直接使用this</span></span><br><span class=\"line\">     timer = <span class=\"literal\">null</span> <span class=\"comment\">// delay之后清除定时器</span></span><br><span class=\"line\">    &#125;,delay)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;啊啊啊！&#x27;</span>)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">const</span> temp = <span class=\"title function_\">throttle</span>(test,<span class=\"number\">1000</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;button&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"title function_\">temp</span>()</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-时间戳实现\"><a href=\"#2-2-时间戳实现\" class=\"headerlink\" title=\"2.2 时间戳实现\"></a>2.2 时间戳实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"keyword\">function</span>(<span class=\"params\">func, delay</span>) &#123;            </span><br><span class=\"line\">　　<span class=\"keyword\">var</span> prev = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();            </span><br><span class=\"line\">　　<span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;                </span><br><span class=\"line\">　　　　<span class=\"keyword\">var</span> context = <span class=\"variable language_\">this</span>;                </span><br><span class=\"line\">　　　　<span class=\"keyword\">var</span> args = <span class=\"variable language_\">arguments</span>;                </span><br><span class=\"line\">　　　　<span class=\"keyword\">var</span> now = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();                </span><br><span class=\"line\">　　　　<span class=\"keyword\">if</span> (now - prev &gt;= delay) &#123;                    </span><br><span class=\"line\">　　　　　　func.<span class=\"title function_\">apply</span>(context, args);                    </span><br><span class=\"line\">　　　　　　prev = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();                </span><br><span class=\"line\">　　　　&#125;            </span><br><span class=\"line\">　　&#125;        </span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handle</span>(<span class=\"params\"></span>) &#123;            </span><br><span class=\"line\">　　<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>());        </span><br><span class=\"line\">&#125;        </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;scroll&#x27;</span>, <span class=\"title function_\">throttle</span>(handle, <span class=\"number\">1000</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-时间戳-定时器\"><a href=\"#2-3-时间戳-定时器\" class=\"headerlink\" title=\"2.3 时间戳+定时器\"></a>2.3 时间戳+定时器</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 节流throttle代码（时间戳+定时器）：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"keyword\">function</span>(<span class=\"params\">func, delay</span>) &#123;     </span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;     </span><br><span class=\"line\">    <span class=\"keyword\">var</span> startTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();     </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;             </span><br><span class=\"line\">        <span class=\"keyword\">var</span> curTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();             </span><br><span class=\"line\">        <span class=\"keyword\">var</span> remaining = delay - (curTime - startTime);             </span><br><span class=\"line\">        <span class=\"keyword\">var</span> context = <span class=\"variable language_\">this</span>;             </span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"variable language_\">arguments</span>;             </span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timer);              </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (remaining &lt;= <span class=\"number\">0</span>) &#123;                    </span><br><span class=\"line\">            func.<span class=\"title function_\">apply</span>(context, args);                    </span><br><span class=\"line\">            startTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();              </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;                    </span><br><span class=\"line\">            timer = <span class=\"built_in\">setTimeout</span>(func, remaining);              </span><br><span class=\"line\">        &#125;      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handle</span>(<span class=\"params\"></span>) &#123;      </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>());</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;scroll&#x27;</span>, <span class=\"title function_\">throttle</span>(handle, <span class=\"number\">1000</span>));</span><br></pre></td></tr></table></figure>\n到此这篇关于什么是JavaScript的防抖与节流的文章就介绍到这了,更多相关JavaScript的防抖与节流内容请搜索68HTML以前的文章或继续浏览下面的相关文章希望大家以后多多支持68HTML！</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>这篇文章主要介绍了什么是JavaScript的防抖与节流,防抖是在频繁触发某一个事件时，一段时间内不再触发该事件后才会去调用对应的回调函数，在设定间隔时间内如果下一次事件被触发， 那么就重新开始定时器，直到事件触发结束，节流看下面文章的具体介绍吧</p>\n</blockquote>\n<h2 id=\"一、函数防抖（debounce）\"><a href=\"#一、函数防抖（debounce）\" class=\"headerlink\" title=\"一、函数防抖（debounce）\"></a>一、函数防抖（debounce）</h2><h3 id=\"1-什么是防抖？\"><a href=\"#1-什么是防抖？\" class=\"headerlink\" title=\"1. 什么是防抖？\"></a>1. 什么是防抖？</h3><blockquote>\n<p>函数防抖： 在频繁触发某一个事件时，一段时间内不再触发该事件后才会去调用对应的回调函数，在设定间隔时间内如果下一次事件被触发， 那么就重新开始定时器，直到事件触发结束。</p>\n</blockquote>\n<p>规定时间内没有继续触发事件的前提下，再去调用事件处理函数；</p>\n<p>具体如下面的例子所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*定义防抖函数</span></span><br><span class=\"line\"><span class=\"comment\"> * func：传入一个函数，事件不再持续触发时会调用该函数</span></span><br><span class=\"line\"><span class=\"comment\"> * delay:定义持续多久后执行传入的回调函数</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">func,delay</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>  <span class=\"comment\">// 用于保存定时器</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 如果定时器存在，清除定时器，随后重新设置timer</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span>(timer !== <span class=\"literal\">null</span>) <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">   timer = <span class=\"built_in\">setTimeout</span>(func, delay)  <span class=\"comment\">// 超过delay为接收到事件会调用这里的func   必要的额时候可以修改func的this指向  由于timer对外部存在引用，因此不会被销毁</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">/*事件处理函数*/</span></span><br><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">testDeBounce</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;你看我执行了几次？？&#x27;</span>)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">// 接收debounce返回的函数</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span> temp = <span class=\"title function_\">debounce</span>(<span class=\"title function_\">testDeBounce</span>(),<span class=\"number\">1000</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">/*绑定事件，测试防抖函数*/</span></span><br><span class=\"line\"> <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;scroll&#x27;</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"title function_\">temp</span>()</span><br><span class=\"line\"> &#125;); <span class=\"comment\">// 这样写最少调用一次事件处理函数，最多也不会多余下面的写法执行的次数</span></span><br><span class=\"line\"> <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;scroll&#x27;</span>, testDeBounce); <span class=\"comment\">// 如果这样写的话，每当页面滚动就会调用事件处理函数</span></span><br></pre></td></tr></table></figure>\n<p>总结一下思路：</p>\n<ol>\n<li>定义一个节流函数</li>\n<li>函数内部使用一个变量保存定时器</li>\n<li>返回一个函数，函数内部定义：如果定时器已经存在就清除定时器，重新设置定时器</li>\n<li>定义一个变量来接收debounce返回的函数</li>\n<li>在事件的回调函数中直接调用上一步的变量接收的方法</li>\n</ol>\n<h2 id=\"二、函数节流\"><a href=\"#二、函数节流\" class=\"headerlink\" title=\"二、函数节流\"></a>二、函数节流</h2><blockquote>\n<p>函数节流： 在事件持续触发的前提下，保证一定时间段内只调用一次事件处理函数，就是函数节流；</p>\n</blockquote>\n<p>函数节流实现的方式： 定时器、时间戳、定时器+时间戳；</p>\n<h3 id=\"2-1-定时器实现\"><a href=\"#2-1-定时器实现\" class=\"headerlink\" title=\"2.1 定时器实现\"></a>2.1 定时器实现</h3><p>思路：</p>\n<ol>\n<li>定义节流函数throttle</li>\n<li>定义timer保存定时器</li>\n<li>返回一个函数。函数内部定义：如果定时器不存在，设置定时器，间隔某一时间后将timer设置为null，如果在这之前事件再次触发，则定时器中的回调无效<br><code>&lt;button&gt;这是一个孤独的按钮&lt;/button&gt;</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义定时器节流函数</span></span><br><span class=\"line\"><span class=\"comment\"> * func:传入事件处理函数</span></span><br><span class=\"line\"><span class=\"comment\"> * delay：在delay指定的时间内定时器回调无效</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">func,delay</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> context = <span class=\"variable language_\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">...args</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 如果定时器不存在</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span>(!timer)&#123;</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">     func.<span class=\"title function_\">apply</span>(context,args) <span class=\"comment\">// 考虑返回的函数调用的环境，因此这里不直接使用this</span></span><br><span class=\"line\">     timer = <span class=\"literal\">null</span> <span class=\"comment\">// delay之后清除定时器</span></span><br><span class=\"line\">    &#125;,delay)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;啊啊啊！&#x27;</span>)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">const</span> temp = <span class=\"title function_\">throttle</span>(test,<span class=\"number\">1000</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;button&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"title function_\">temp</span>()</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-时间戳实现\"><a href=\"#2-2-时间戳实现\" class=\"headerlink\" title=\"2.2 时间戳实现\"></a>2.2 时间戳实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"keyword\">function</span>(<span class=\"params\">func, delay</span>) &#123;            </span><br><span class=\"line\">　　<span class=\"keyword\">var</span> prev = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();            </span><br><span class=\"line\">　　<span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;                </span><br><span class=\"line\">　　　　<span class=\"keyword\">var</span> context = <span class=\"variable language_\">this</span>;                </span><br><span class=\"line\">　　　　<span class=\"keyword\">var</span> args = <span class=\"variable language_\">arguments</span>;                </span><br><span class=\"line\">　　　　<span class=\"keyword\">var</span> now = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();                </span><br><span class=\"line\">　　　　<span class=\"keyword\">if</span> (now - prev &gt;= delay) &#123;                    </span><br><span class=\"line\">　　　　　　func.<span class=\"title function_\">apply</span>(context, args);                    </span><br><span class=\"line\">　　　　　　prev = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();                </span><br><span class=\"line\">　　　　&#125;            </span><br><span class=\"line\">　　&#125;        </span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handle</span>(<span class=\"params\"></span>) &#123;            </span><br><span class=\"line\">　　<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>());        </span><br><span class=\"line\">&#125;        </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;scroll&#x27;</span>, <span class=\"title function_\">throttle</span>(handle, <span class=\"number\">1000</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-时间戳-定时器\"><a href=\"#2-3-时间戳-定时器\" class=\"headerlink\" title=\"2.3 时间戳+定时器\"></a>2.3 时间戳+定时器</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 节流throttle代码（时间戳+定时器）：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"keyword\">function</span>(<span class=\"params\">func, delay</span>) &#123;     </span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;     </span><br><span class=\"line\">    <span class=\"keyword\">var</span> startTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();     </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;             </span><br><span class=\"line\">        <span class=\"keyword\">var</span> curTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();             </span><br><span class=\"line\">        <span class=\"keyword\">var</span> remaining = delay - (curTime - startTime);             </span><br><span class=\"line\">        <span class=\"keyword\">var</span> context = <span class=\"variable language_\">this</span>;             </span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"variable language_\">arguments</span>;             </span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timer);              </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (remaining &lt;= <span class=\"number\">0</span>) &#123;                    </span><br><span class=\"line\">            func.<span class=\"title function_\">apply</span>(context, args);                    </span><br><span class=\"line\">            startTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();              </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;                    </span><br><span class=\"line\">            timer = <span class=\"built_in\">setTimeout</span>(func, remaining);              </span><br><span class=\"line\">        &#125;      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handle</span>(<span class=\"params\"></span>) &#123;      </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>());</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;scroll&#x27;</span>, <span class=\"title function_\">throttle</span>(handle, <span class=\"number\">1000</span>));</span><br></pre></td></tr></table></figure>\n到此这篇关于什么是JavaScript的防抖与节流的文章就介绍到这了,更多相关JavaScript的防抖与节流内容请搜索68HTML以前的文章或继续浏览下面的相关文章希望大家以后多多支持68HTML！</li>\n</ol>\n"},{"title":"MD语法入门","author":"68HTML","date":"2022-04-03T07:34:54.000Z","_content":".md即markdown文件的基本常用编写语法,是一种快速标记、快速排版语言，现在很多前段项目中的说明文件readme等都是用.md文件编写的，而且很多企业也在在鼓励使用这种编辑方式，特别作为一个前端从业者更要学会使用这种语言。下面就简单和大家分享一些.md基本语法\n\n## 一、基本符号：* - +. >\n基本上所有的markdown标记都是基于这四个符号或组合，需要注意的是，如果以基本符号开头的标记，注意基本符号后有一个用于分割标记符和内容的空格。\n\n## 二、标题\n1.前面带#号，后面带文字，分别表示h1-h6,只到h6，而且h1下面会有一条横线\n\n```\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n## 五级标题\n### 六级标题\n```\n\n2.相当于标签闭合\n\n```\n# 一级标题 #\n## 二级标题 ##\n### 三级标题 ###\n#### 四级标题 ####\n## 五级标题 ##\n### 六级标题 ##\n```\n效果如下：\n![标题.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/9718d9a5-0b73-4496-a1a9-9bed247b51b5.webp \"标题\")\n\n## 三、列表\n无序列表\n```\n//形式一\n+ a\n+ b\n+ c\n//形式二\n- d\n- e\n- f\n//形式三\n* g\n* h\n* i\n```\n以上三种形式，效果其实都是一样的：\n![无序列表.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/d037e24f-f0aa-4d8c-9b1e-a91784fedf89.webp \"无序列表\")\n\n有序列表\n```\n//正常形式\n1. abc\n2. bcd\n3. cde\n//错序效果\n2. fgh\n3. ghi\n5. hij\n```\n效果图：\n![有序列表及错序效果图.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/8123cec4-89e3-4c20-8132-6f1049b0d8b4.webp \"有序列表及错序效果图\")\n\n> 如图，注意，数字后面的点只能是英文的点，有序列表的序号是根据第一行列表的数字顺序来的，\n错序列表的序号本来是序号是乱的， 但是还是显示 2 3 5\n\n嵌套列表\n```\n//无序列表嵌套\n+ 123\n    + abc\n    + bcd\n    + cde\n+ 465\n+ 789\n//有序列表嵌套\n1. abcd\n    1. abcde\n    2. abcde\n    3. abcde\n2. bcde\n3. cdef\n```\n效果图：\n![有序列表及错序效果图.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/b66bb201-dfb0-432d-a07e-5c29c29349c9.webp \"有序列表及错序效果图\")\n> 列表可以嵌套，使用时在嵌套列表前按 tab 或 空格 来缩进,去控制列表的层数\n\n## 四、引用说明区块\n对某个部分做的内容做一些说明或者引用某某的话等，可以用这个语法。\n\n正常形式\n```\n> 引用内容、说明内容。在语句前面加一个 > ，注意是英文的那个右尖括号，注意空格，引用因为是一个区块，理论上是应该什么内容都可以放，比如说：标题，列表，引用等等。\n```\n效果图：\n![区块.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/9ea626c3-d294-48ae-b216-7eaf9854d455.webp \"区块\")\n\n嵌套区块\n\n这里我只介绍一下我常用的方法，也是个人认为比较规范的一种方法，就是给区块的下一级区块多加一个右尖括号\n```\n> 一级引用\n>> 二级引用\n>>> 三级引用\n>>>> 四级引用\n>>>>> 五级引用\n>>>>>> 六级引用\n```\n效果图：\n![嵌套区块.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/5683dc0f-80f5-4084-94b4-6be6ca1af573.webp \"嵌套区块\")\n## 五、代码块\n在发布一些技术文章会涉及展示代码的问题，这时候代码块就显得尤为重要。\n\n少量代码，单行使用，直接用`包裹起来就行了\n```\n` shaoliangdaima,danhangshiyong `\n```\n效果图：\n![单行代码块.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/3d28e400-33d0-4139-9bcc-d7a81e3d6eff.webp \"单行代码块\")\n\n大量代码，需要多行使用，用```包裹起来\n```\n        daliangdaima,xuyaoduohangshiyong\n        daliangdaima,xuyaoduohangshiyong\n        daliangdaima,xuyaoduohangshiyong\n        daliangdaima,xuyaoduohangshiyong\n        daliangdaima,xuyaoduohangshiyong\n```\n效果图：\n![多行代码.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/89232b39-b6a3-4b3c-9da8-8afc2a693967.webp \"多行代码\")\n\n## 六、链接\n行内式\n链接的文字放在[]中，链接地址放在随后的()中，链接也可以带title属性，链接地址后面空一格，然后用引号引起来\n```\n[68HTML](https://www.jianshu.com \"创作你的创作\"),\n是一个创作社区,任何人均可以在其上进行创作。用户在简书上面可以方便的创作自己的作品,互相交流。 \n```\n参数式\n链接的文字放在[]中，链接地址放在随后的:后，链接地址后面空一格，然后用引号引起来\n```\n[68HTML]: https://www.jianshu.com \"创作你的创作\"\n[68HTML]是一个创作社区,任何人均可以在其上进行创作。用户在简书上面可以方便的创作自己的作品,互相交流。\n//参数定义的其他写法\n[68HTML]: https://www.jianshu.com '创作你的创作'\n[68HTML]: https://www.jianshu.com (创作你的创作)\n[68HTML]: <https://www.jianshu.com> \"创作你的创作\"\n```\n以上两种方式其效果图都是一样的，如下：\n![链接.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/ab8a3736-baa7-433f-9ca3-b9fe45c519ca.webp \"链接\")\n## 七、图片\n行内式\n和链接的形式差不多，图片的名字放在[]中，图片地址放在随后的()中，title属性（图片地址后面空一格，然后用引号引起来）,注意的是[]前要加上!\n```\n![my-logo.png](https://upload-images.jianshu.io/upload_images/13623636-6d878e3d3ef63825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"my-logo\")\n```\n参数式\n图片的文字放在[]中，图片地址放在随后的:后，title属性（图片地址后面空一格，然后用引号引起来）,注意引用图片的时候在[]前要加上!\n```\n[my-logo.png]: https://upload-images.jianshu.io/upload_images/13623636-6d878e3d3ef63825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"my-logo\"\n![my-logo.png]\n//参数定义的其他写法\n[my-logo.png]: https://upload-images.jianshu.io/upload_images/13623636-6d878e3d3ef63825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 'my-logo'\n[my-logo.png]: https://upload-images.jianshu.io/upload_images/13623636-6d878e3d3ef63825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 (my-logo)\n[my-logo.png]: <https://upload-images.jianshu.io/upload_images/13623636-6d878e3d3ef63825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240> \"my-logo\"\n```\n以上两种方式其效果图都是一样的，如下：\n![my-logo.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/9ec3f832-7a9c-406c-b81b-caa54b9f7484.webp \"my-logo\")\n## 八、分割线\n分割线可以由* - _（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以\n```\n---\n- - -\n------\n***\n* * *\n******\n___\n_ _ _\n______\n```\n以上代码的效果图均为：\n![分割线.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/7c253eaa-308d-4fb1-aa67-1073a3602482.webp \"分割线\")\n## 九、其他\n强调字体\n一个星号或者是一个下划线包起来，会转换为<em>倾斜，如果是2个，会转换为<strong>加粗\n```\n  *md*    \n  **md**\n  _md_   \n  __md__\n```\n效果图：\n![强调字体.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/ac2a865f-6a28-46c5-af97-12df97d02978.webp \"强调字体\")\n转义\n基本上和js转义一样,\\加需要转义的字符\n```\n\\\\\n\\*\n\\+\n\\-\n\\`\n\\_\n```\n删除线\n用~~把需要显示删除线的字符包裹起来\n```\n~~删除~~\n```\n效果图：\n![删除线.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/9d5191d3-57d2-439d-a5e7-b13411ccfaa1.webp \"删除线\")\n\n## 十、表格\n```\n//例子一\n|123|234|345|\n|:-|:-:|-:|\n|abc|bcd|cde|\n|abc|bcd|cde|\n|abc|bcd|cde|\n//例子二\n|123|234|345|\n|:---|:---:|---:|\n|abc|bcd|cde|\n|abc|bcd|cde|\n|abc|bcd|cde|\n//例子三\n123|234|345\n:-|:-:|-:\nabc|bcd|cde\nabc|bcd|cde\nabc|bcd|cde\n```\n>上面三个例子的效果一样，由此可得：\n>1. 表格的格式不一定要对的非常起，但是为了良好的变成风格，尽量对齐是最好的\n>2. 分割线后面的冒号表示对齐方式，写在左边表示左对齐，右边为右对齐，两边都写表示居中\n\n效果图如下：\n![表格.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/ce9df783-0efc-4a0c-a119-9116b2ca1bdc.webp \"表格\")\n\n>这篇文章的编写借鉴了很多前辈的经验，同时鉴赏我自己的总结，跟大家一起分享了。\n>即使遇到了不幸的灾难，已经开始了的事情决不放弃。\n","source":"_posts/md/MdYuFaRuMen.md","raw":"title: MD语法入门\nauthor: 68HTML\ndate: 2022-04-03 15:34:54\ntags: [\"md\",\"md基本语法\",\"md入门\"]\ncategories: [\"md\"]\n---\n.md即markdown文件的基本常用编写语法,是一种快速标记、快速排版语言，现在很多前段项目中的说明文件readme等都是用.md文件编写的，而且很多企业也在在鼓励使用这种编辑方式，特别作为一个前端从业者更要学会使用这种语言。下面就简单和大家分享一些.md基本语法\n\n## 一、基本符号：* - +. >\n基本上所有的markdown标记都是基于这四个符号或组合，需要注意的是，如果以基本符号开头的标记，注意基本符号后有一个用于分割标记符和内容的空格。\n\n## 二、标题\n1.前面带#号，后面带文字，分别表示h1-h6,只到h6，而且h1下面会有一条横线\n\n```\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n## 五级标题\n### 六级标题\n```\n\n2.相当于标签闭合\n\n```\n# 一级标题 #\n## 二级标题 ##\n### 三级标题 ###\n#### 四级标题 ####\n## 五级标题 ##\n### 六级标题 ##\n```\n效果如下：\n![标题.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/9718d9a5-0b73-4496-a1a9-9bed247b51b5.webp \"标题\")\n\n## 三、列表\n无序列表\n```\n//形式一\n+ a\n+ b\n+ c\n//形式二\n- d\n- e\n- f\n//形式三\n* g\n* h\n* i\n```\n以上三种形式，效果其实都是一样的：\n![无序列表.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/d037e24f-f0aa-4d8c-9b1e-a91784fedf89.webp \"无序列表\")\n\n有序列表\n```\n//正常形式\n1. abc\n2. bcd\n3. cde\n//错序效果\n2. fgh\n3. ghi\n5. hij\n```\n效果图：\n![有序列表及错序效果图.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/8123cec4-89e3-4c20-8132-6f1049b0d8b4.webp \"有序列表及错序效果图\")\n\n> 如图，注意，数字后面的点只能是英文的点，有序列表的序号是根据第一行列表的数字顺序来的，\n错序列表的序号本来是序号是乱的， 但是还是显示 2 3 5\n\n嵌套列表\n```\n//无序列表嵌套\n+ 123\n    + abc\n    + bcd\n    + cde\n+ 465\n+ 789\n//有序列表嵌套\n1. abcd\n    1. abcde\n    2. abcde\n    3. abcde\n2. bcde\n3. cdef\n```\n效果图：\n![有序列表及错序效果图.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/b66bb201-dfb0-432d-a07e-5c29c29349c9.webp \"有序列表及错序效果图\")\n> 列表可以嵌套，使用时在嵌套列表前按 tab 或 空格 来缩进,去控制列表的层数\n\n## 四、引用说明区块\n对某个部分做的内容做一些说明或者引用某某的话等，可以用这个语法。\n\n正常形式\n```\n> 引用内容、说明内容。在语句前面加一个 > ，注意是英文的那个右尖括号，注意空格，引用因为是一个区块，理论上是应该什么内容都可以放，比如说：标题，列表，引用等等。\n```\n效果图：\n![区块.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/9ea626c3-d294-48ae-b216-7eaf9854d455.webp \"区块\")\n\n嵌套区块\n\n这里我只介绍一下我常用的方法，也是个人认为比较规范的一种方法，就是给区块的下一级区块多加一个右尖括号\n```\n> 一级引用\n>> 二级引用\n>>> 三级引用\n>>>> 四级引用\n>>>>> 五级引用\n>>>>>> 六级引用\n```\n效果图：\n![嵌套区块.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/5683dc0f-80f5-4084-94b4-6be6ca1af573.webp \"嵌套区块\")\n## 五、代码块\n在发布一些技术文章会涉及展示代码的问题，这时候代码块就显得尤为重要。\n\n少量代码，单行使用，直接用`包裹起来就行了\n```\n` shaoliangdaima,danhangshiyong `\n```\n效果图：\n![单行代码块.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/3d28e400-33d0-4139-9bcc-d7a81e3d6eff.webp \"单行代码块\")\n\n大量代码，需要多行使用，用```包裹起来\n```\n        daliangdaima,xuyaoduohangshiyong\n        daliangdaima,xuyaoduohangshiyong\n        daliangdaima,xuyaoduohangshiyong\n        daliangdaima,xuyaoduohangshiyong\n        daliangdaima,xuyaoduohangshiyong\n```\n效果图：\n![多行代码.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/89232b39-b6a3-4b3c-9da8-8afc2a693967.webp \"多行代码\")\n\n## 六、链接\n行内式\n链接的文字放在[]中，链接地址放在随后的()中，链接也可以带title属性，链接地址后面空一格，然后用引号引起来\n```\n[68HTML](https://www.jianshu.com \"创作你的创作\"),\n是一个创作社区,任何人均可以在其上进行创作。用户在简书上面可以方便的创作自己的作品,互相交流。 \n```\n参数式\n链接的文字放在[]中，链接地址放在随后的:后，链接地址后面空一格，然后用引号引起来\n```\n[68HTML]: https://www.jianshu.com \"创作你的创作\"\n[68HTML]是一个创作社区,任何人均可以在其上进行创作。用户在简书上面可以方便的创作自己的作品,互相交流。\n//参数定义的其他写法\n[68HTML]: https://www.jianshu.com '创作你的创作'\n[68HTML]: https://www.jianshu.com (创作你的创作)\n[68HTML]: <https://www.jianshu.com> \"创作你的创作\"\n```\n以上两种方式其效果图都是一样的，如下：\n![链接.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/ab8a3736-baa7-433f-9ca3-b9fe45c519ca.webp \"链接\")\n## 七、图片\n行内式\n和链接的形式差不多，图片的名字放在[]中，图片地址放在随后的()中，title属性（图片地址后面空一格，然后用引号引起来）,注意的是[]前要加上!\n```\n![my-logo.png](https://upload-images.jianshu.io/upload_images/13623636-6d878e3d3ef63825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"my-logo\")\n```\n参数式\n图片的文字放在[]中，图片地址放在随后的:后，title属性（图片地址后面空一格，然后用引号引起来）,注意引用图片的时候在[]前要加上!\n```\n[my-logo.png]: https://upload-images.jianshu.io/upload_images/13623636-6d878e3d3ef63825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"my-logo\"\n![my-logo.png]\n//参数定义的其他写法\n[my-logo.png]: https://upload-images.jianshu.io/upload_images/13623636-6d878e3d3ef63825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 'my-logo'\n[my-logo.png]: https://upload-images.jianshu.io/upload_images/13623636-6d878e3d3ef63825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 (my-logo)\n[my-logo.png]: <https://upload-images.jianshu.io/upload_images/13623636-6d878e3d3ef63825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240> \"my-logo\"\n```\n以上两种方式其效果图都是一样的，如下：\n![my-logo.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/9ec3f832-7a9c-406c-b81b-caa54b9f7484.webp \"my-logo\")\n## 八、分割线\n分割线可以由* - _（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以\n```\n---\n- - -\n------\n***\n* * *\n******\n___\n_ _ _\n______\n```\n以上代码的效果图均为：\n![分割线.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/7c253eaa-308d-4fb1-aa67-1073a3602482.webp \"分割线\")\n## 九、其他\n强调字体\n一个星号或者是一个下划线包起来，会转换为<em>倾斜，如果是2个，会转换为<strong>加粗\n```\n  *md*    \n  **md**\n  _md_   \n  __md__\n```\n效果图：\n![强调字体.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/ac2a865f-6a28-46c5-af97-12df97d02978.webp \"强调字体\")\n转义\n基本上和js转义一样,\\加需要转义的字符\n```\n\\\\\n\\*\n\\+\n\\-\n\\`\n\\_\n```\n删除线\n用~~把需要显示删除线的字符包裹起来\n```\n~~删除~~\n```\n效果图：\n![删除线.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/9d5191d3-57d2-439d-a5e7-b13411ccfaa1.webp \"删除线\")\n\n## 十、表格\n```\n//例子一\n|123|234|345|\n|:-|:-:|-:|\n|abc|bcd|cde|\n|abc|bcd|cde|\n|abc|bcd|cde|\n//例子二\n|123|234|345|\n|:---|:---:|---:|\n|abc|bcd|cde|\n|abc|bcd|cde|\n|abc|bcd|cde|\n//例子三\n123|234|345\n:-|:-:|-:\nabc|bcd|cde\nabc|bcd|cde\nabc|bcd|cde\n```\n>上面三个例子的效果一样，由此可得：\n>1. 表格的格式不一定要对的非常起，但是为了良好的变成风格，尽量对齐是最好的\n>2. 分割线后面的冒号表示对齐方式，写在左边表示左对齐，右边为右对齐，两边都写表示居中\n\n效果图如下：\n![表格.png](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/ce9df783-0efc-4a0c-a119-9116b2ca1bdc.webp \"表格\")\n\n>这篇文章的编写借鉴了很多前辈的经验，同时鉴赏我自己的总结，跟大家一起分享了。\n>即使遇到了不幸的灾难，已经开始了的事情决不放弃。\n","slug":"md/MdYuFaRuMen","published":1,"updated":"2022-05-07T07:06:06.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2vixl8n000nd8j0h6ib2ye7","content":"<p>.md即markdown文件的基本常用编写语法,是一种快速标记、快速排版语言，现在很多前段项目中的说明文件readme等都是用.md文件编写的，而且很多企业也在在鼓励使用这种编辑方式，特别作为一个前端从业者更要学会使用这种语言。下面就简单和大家分享一些.md基本语法</p>\n<h2 id=\"一、基本符号：-gt\"><a href=\"#一、基本符号：-gt\" class=\"headerlink\" title=\"一、基本符号：* - +. &gt;\"></a>一、基本符号：* - +. &gt;</h2><p>基本上所有的markdown标记都是基于这四个符号或组合，需要注意的是，如果以基本符号开头的标记，注意基本符号后有一个用于分割标记符和内容的空格。</p>\n<h2 id=\"二、标题\"><a href=\"#二、标题\" class=\"headerlink\" title=\"二、标题\"></a>二、标题</h2><p>1.前面带#号，后面带文字，分别表示h1-h6,只到h6，而且h1下面会有一条横线</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 一级标题</span><br><span class=\"line\">## 二级标题</span><br><span class=\"line\">### 三级标题</span><br><span class=\"line\">#### 四级标题</span><br><span class=\"line\">## 五级标题</span><br><span class=\"line\">### 六级标题</span><br></pre></td></tr></table></figure>\n\n<p>2.相当于标签闭合</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 一级标题 #</span><br><span class=\"line\">## 二级标题 ##</span><br><span class=\"line\">### 三级标题 ###</span><br><span class=\"line\">#### 四级标题 ####</span><br><span class=\"line\">## 五级标题 ##</span><br><span class=\"line\">### 六级标题 ##</span><br></pre></td></tr></table></figure>\n<p>效果如下：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/9718d9a5-0b73-4496-a1a9-9bed247b51b5.webp\" alt=\"标题.png\" title=\"标题\"></p>\n<h2 id=\"三、列表\"><a href=\"#三、列表\" class=\"headerlink\" title=\"三、列表\"></a>三、列表</h2><p>无序列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//形式一</span><br><span class=\"line\">+ a</span><br><span class=\"line\">+ b</span><br><span class=\"line\">+ c</span><br><span class=\"line\">//形式二</span><br><span class=\"line\">- d</span><br><span class=\"line\">- e</span><br><span class=\"line\">- f</span><br><span class=\"line\">//形式三</span><br><span class=\"line\">* g</span><br><span class=\"line\">* h</span><br><span class=\"line\">* i</span><br></pre></td></tr></table></figure>\n<p>以上三种形式，效果其实都是一样的：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/d037e24f-f0aa-4d8c-9b1e-a91784fedf89.webp\" alt=\"无序列表.png\" title=\"无序列表\"></p>\n<p>有序列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//正常形式</span><br><span class=\"line\">1. abc</span><br><span class=\"line\">2. bcd</span><br><span class=\"line\">3. cde</span><br><span class=\"line\">//错序效果</span><br><span class=\"line\">2. fgh</span><br><span class=\"line\">3. ghi</span><br><span class=\"line\">5. hij</span><br></pre></td></tr></table></figure>\n<p>效果图：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/8123cec4-89e3-4c20-8132-6f1049b0d8b4.webp\" alt=\"有序列表及错序效果图.png\" title=\"有序列表及错序效果图\"></p>\n<blockquote>\n<p>如图，注意，数字后面的点只能是英文的点，有序列表的序号是根据第一行列表的数字顺序来的，<br>错序列表的序号本来是序号是乱的， 但是还是显示 2 3 5</p>\n</blockquote>\n<p>嵌套列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//无序列表嵌套</span><br><span class=\"line\">+ 123</span><br><span class=\"line\">    + abc</span><br><span class=\"line\">    + bcd</span><br><span class=\"line\">    + cde</span><br><span class=\"line\">+ 465</span><br><span class=\"line\">+ 789</span><br><span class=\"line\">//有序列表嵌套</span><br><span class=\"line\">1. abcd</span><br><span class=\"line\">    1. abcde</span><br><span class=\"line\">    2. abcde</span><br><span class=\"line\">    3. abcde</span><br><span class=\"line\">2. bcde</span><br><span class=\"line\">3. cdef</span><br></pre></td></tr></table></figure>\n<p>效果图：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/b66bb201-dfb0-432d-a07e-5c29c29349c9.webp\" alt=\"有序列表及错序效果图.png\" title=\"有序列表及错序效果图\"></p>\n<blockquote>\n<p>列表可以嵌套，使用时在嵌套列表前按 tab 或 空格 来缩进,去控制列表的层数</p>\n</blockquote>\n<h2 id=\"四、引用说明区块\"><a href=\"#四、引用说明区块\" class=\"headerlink\" title=\"四、引用说明区块\"></a>四、引用说明区块</h2><p>对某个部分做的内容做一些说明或者引用某某的话等，可以用这个语法。</p>\n<p>正常形式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 引用内容、说明内容。在语句前面加一个 &gt; ，注意是英文的那个右尖括号，注意空格，引用因为是一个区块，理论上是应该什么内容都可以放，比如说：标题，列表，引用等等。</span><br></pre></td></tr></table></figure>\n<p>效果图：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/9ea626c3-d294-48ae-b216-7eaf9854d455.webp\" alt=\"区块.png\" title=\"区块\"></p>\n<p>嵌套区块</p>\n<p>这里我只介绍一下我常用的方法，也是个人认为比较规范的一种方法，就是给区块的下一级区块多加一个右尖括号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 一级引用</span><br><span class=\"line\">&gt;&gt; 二级引用</span><br><span class=\"line\">&gt;&gt;&gt; 三级引用</span><br><span class=\"line\">&gt;&gt;&gt;&gt; 四级引用</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt; 五级引用</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt; 六级引用</span><br></pre></td></tr></table></figure>\n<p>效果图：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/5683dc0f-80f5-4084-94b4-6be6ca1af573.webp\" alt=\"嵌套区块.png\" title=\"嵌套区块\"></p>\n<h2 id=\"五、代码块\"><a href=\"#五、代码块\" class=\"headerlink\" title=\"五、代码块\"></a>五、代码块</h2><p>在发布一些技术文章会涉及展示代码的问题，这时候代码块就显得尤为重要。</p>\n<p>少量代码，单行使用，直接用`包裹起来就行了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">` shaoliangdaima,danhangshiyong `</span><br></pre></td></tr></table></figure>\n<p>效果图：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/3d28e400-33d0-4139-9bcc-d7a81e3d6eff.webp\" alt=\"单行代码块.png\" title=\"单行代码块\"></p>\n<p>大量代码，需要多行使用，用```包裹起来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daliangdaima,xuyaoduohangshiyong</span><br><span class=\"line\">daliangdaima,xuyaoduohangshiyong</span><br><span class=\"line\">daliangdaima,xuyaoduohangshiyong</span><br><span class=\"line\">daliangdaima,xuyaoduohangshiyong</span><br><span class=\"line\">daliangdaima,xuyaoduohangshiyong</span><br></pre></td></tr></table></figure>\n<p>效果图：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/89232b39-b6a3-4b3c-9da8-8afc2a693967.webp\" alt=\"多行代码.png\" title=\"多行代码\"></p>\n<h2 id=\"六、链接\"><a href=\"#六、链接\" class=\"headerlink\" title=\"六、链接\"></a>六、链接</h2><p>行内式<br>链接的文字放在[]中，链接地址放在随后的()中，链接也可以带title属性，链接地址后面空一格，然后用引号引起来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[68HTML](https://www.jianshu.com &quot;创作你的创作&quot;),</span><br><span class=\"line\">是一个创作社区,任何人均可以在其上进行创作。用户在简书上面可以方便的创作自己的作品,互相交流。 </span><br></pre></td></tr></table></figure>\n<p>参数式<br>链接的文字放在[]中，链接地址放在随后的:后，链接地址后面空一格，然后用引号引起来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[68HTML]: https://www.jianshu.com &quot;创作你的创作&quot;</span><br><span class=\"line\">[68HTML]是一个创作社区,任何人均可以在其上进行创作。用户在简书上面可以方便的创作自己的作品,互相交流。</span><br><span class=\"line\">//参数定义的其他写法</span><br><span class=\"line\">[68HTML]: https://www.jianshu.com &#x27;创作你的创作&#x27;</span><br><span class=\"line\">[68HTML]: https://www.jianshu.com (创作你的创作)</span><br><span class=\"line\">[68HTML]: &lt;https://www.jianshu.com&gt; &quot;创作你的创作&quot;</span><br></pre></td></tr></table></figure>\n<p>以上两种方式其效果图都是一样的，如下：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/ab8a3736-baa7-433f-9ca3-b9fe45c519ca.webp\" alt=\"链接.png\" title=\"链接\"></p>\n<h2 id=\"七、图片\"><a href=\"#七、图片\" class=\"headerlink\" title=\"七、图片\"></a>七、图片</h2><p>行内式<br>和链接的形式差不多，图片的名字放在[]中，图片地址放在随后的()中，title属性（图片地址后面空一格，然后用引号引起来）,注意的是[]前要加上!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![my-logo.png](https://upload-images.jianshu.io/upload_images/13623636-6d878e3d3ef63825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 &quot;my-logo&quot;)</span><br></pre></td></tr></table></figure>\n<p>参数式<br>图片的文字放在[]中，图片地址放在随后的:后，title属性（图片地址后面空一格，然后用引号引起来）,注意引用图片的时候在[]前要加上!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[my-logo.png]: https://upload-images.jianshu.io/upload_images/13623636-6d878e3d3ef63825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 &quot;my-logo&quot;</span><br><span class=\"line\">![my-logo.png]</span><br><span class=\"line\">//参数定义的其他写法</span><br><span class=\"line\">[my-logo.png]: https://upload-images.jianshu.io/upload_images/13623636-6d878e3d3ef63825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 &#x27;my-logo&#x27;</span><br><span class=\"line\">[my-logo.png]: https://upload-images.jianshu.io/upload_images/13623636-6d878e3d3ef63825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 (my-logo)</span><br><span class=\"line\">[my-logo.png]: &lt;https://upload-images.jianshu.io/upload_images/13623636-6d878e3d3ef63825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&gt; &quot;my-logo&quot;</span><br></pre></td></tr></table></figure>\n<p>以上两种方式其效果图都是一样的，如下：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/9ec3f832-7a9c-406c-b81b-caa54b9f7484.webp\" alt=\"my-logo.png\" title=\"my-logo\"></p>\n<h2 id=\"八、分割线\"><a href=\"#八、分割线\" class=\"headerlink\" title=\"八、分割线\"></a>八、分割线</h2><p>分割线可以由* - _（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- - -</span><br><span class=\"line\">------</span><br><span class=\"line\">***</span><br><span class=\"line\">* * *</span><br><span class=\"line\">******</span><br><span class=\"line\">___</span><br><span class=\"line\">_ _ _</span><br><span class=\"line\">______</span><br></pre></td></tr></table></figure>\n<p>以上代码的效果图均为：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/7c253eaa-308d-4fb1-aa67-1073a3602482.webp\" alt=\"分割线.png\" title=\"分割线\"></p>\n<h2 id=\"九、其他\"><a href=\"#九、其他\" class=\"headerlink\" title=\"九、其他\"></a>九、其他</h2><p>强调字体<br>一个星号或者是一个下划线包起来，会转换为<em>倾斜，如果是2个，会转换为<strong>加粗</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*md*    </span><br><span class=\"line\">**md**</span><br><span class=\"line\">_md_   </span><br><span class=\"line\">__md__</span><br></pre></td></tr></table></figure>\n<p>效果图：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/ac2a865f-6a28-46c5-af97-12df97d02978.webp\" alt=\"强调字体.png\" title=\"强调字体\"><br>转义<br>基本上和js转义一样,\\加需要转义的字符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\\\</span><br><span class=\"line\">\\*</span><br><span class=\"line\">\\+</span><br><span class=\"line\">\\-</span><br><span class=\"line\">\\`</span><br><span class=\"line\">\\_</span><br></pre></td></tr></table></figure>\n<p>删除线<br>用~~把需要显示删除线的字符包裹起来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~删除~~</span><br></pre></td></tr></table></figure>\n<p>效果图：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/9d5191d3-57d2-439d-a5e7-b13411ccfaa1.webp\" alt=\"删除线.png\" title=\"删除线\"></p>\n<h2 id=\"十、表格\"><a href=\"#十、表格\" class=\"headerlink\" title=\"十、表格\"></a>十、表格</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//例子一</span><br><span class=\"line\">|123|234|345|</span><br><span class=\"line\">|:-|:-:|-:|</span><br><span class=\"line\">|abc|bcd|cde|</span><br><span class=\"line\">|abc|bcd|cde|</span><br><span class=\"line\">|abc|bcd|cde|</span><br><span class=\"line\">//例子二</span><br><span class=\"line\">|123|234|345|</span><br><span class=\"line\">|:---|:---:|---:|</span><br><span class=\"line\">|abc|bcd|cde|</span><br><span class=\"line\">|abc|bcd|cde|</span><br><span class=\"line\">|abc|bcd|cde|</span><br><span class=\"line\">//例子三</span><br><span class=\"line\">123|234|345</span><br><span class=\"line\">:-|:-:|-:</span><br><span class=\"line\">abc|bcd|cde</span><br><span class=\"line\">abc|bcd|cde</span><br><span class=\"line\">abc|bcd|cde</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面三个例子的效果一样，由此可得：</p>\n<ol>\n<li>表格的格式不一定要对的非常起，但是为了良好的变成风格，尽量对齐是最好的</li>\n<li>分割线后面的冒号表示对齐方式，写在左边表示左对齐，右边为右对齐，两边都写表示居中</li>\n</ol>\n</blockquote>\n<p>效果图如下：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/ce9df783-0efc-4a0c-a119-9116b2ca1bdc.webp\" alt=\"表格.png\" title=\"表格\"></p>\n<blockquote>\n<p>这篇文章的编写借鉴了很多前辈的经验，同时鉴赏我自己的总结，跟大家一起分享了。<br>即使遇到了不幸的灾难，已经开始了的事情决不放弃。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>.md即markdown文件的基本常用编写语法,是一种快速标记、快速排版语言，现在很多前段项目中的说明文件readme等都是用.md文件编写的，而且很多企业也在在鼓励使用这种编辑方式，特别作为一个前端从业者更要学会使用这种语言。下面就简单和大家分享一些.md基本语法</p>\n<h2 id=\"一、基本符号：-gt\"><a href=\"#一、基本符号：-gt\" class=\"headerlink\" title=\"一、基本符号：* - +. &gt;\"></a>一、基本符号：* - +. &gt;</h2><p>基本上所有的markdown标记都是基于这四个符号或组合，需要注意的是，如果以基本符号开头的标记，注意基本符号后有一个用于分割标记符和内容的空格。</p>\n<h2 id=\"二、标题\"><a href=\"#二、标题\" class=\"headerlink\" title=\"二、标题\"></a>二、标题</h2><p>1.前面带#号，后面带文字，分别表示h1-h6,只到h6，而且h1下面会有一条横线</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 一级标题</span><br><span class=\"line\">## 二级标题</span><br><span class=\"line\">### 三级标题</span><br><span class=\"line\">#### 四级标题</span><br><span class=\"line\">## 五级标题</span><br><span class=\"line\">### 六级标题</span><br></pre></td></tr></table></figure>\n\n<p>2.相当于标签闭合</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 一级标题 #</span><br><span class=\"line\">## 二级标题 ##</span><br><span class=\"line\">### 三级标题 ###</span><br><span class=\"line\">#### 四级标题 ####</span><br><span class=\"line\">## 五级标题 ##</span><br><span class=\"line\">### 六级标题 ##</span><br></pre></td></tr></table></figure>\n<p>效果如下：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/9718d9a5-0b73-4496-a1a9-9bed247b51b5.webp\" alt=\"标题.png\" title=\"标题\"></p>\n<h2 id=\"三、列表\"><a href=\"#三、列表\" class=\"headerlink\" title=\"三、列表\"></a>三、列表</h2><p>无序列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//形式一</span><br><span class=\"line\">+ a</span><br><span class=\"line\">+ b</span><br><span class=\"line\">+ c</span><br><span class=\"line\">//形式二</span><br><span class=\"line\">- d</span><br><span class=\"line\">- e</span><br><span class=\"line\">- f</span><br><span class=\"line\">//形式三</span><br><span class=\"line\">* g</span><br><span class=\"line\">* h</span><br><span class=\"line\">* i</span><br></pre></td></tr></table></figure>\n<p>以上三种形式，效果其实都是一样的：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/d037e24f-f0aa-4d8c-9b1e-a91784fedf89.webp\" alt=\"无序列表.png\" title=\"无序列表\"></p>\n<p>有序列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//正常形式</span><br><span class=\"line\">1. abc</span><br><span class=\"line\">2. bcd</span><br><span class=\"line\">3. cde</span><br><span class=\"line\">//错序效果</span><br><span class=\"line\">2. fgh</span><br><span class=\"line\">3. ghi</span><br><span class=\"line\">5. hij</span><br></pre></td></tr></table></figure>\n<p>效果图：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/8123cec4-89e3-4c20-8132-6f1049b0d8b4.webp\" alt=\"有序列表及错序效果图.png\" title=\"有序列表及错序效果图\"></p>\n<blockquote>\n<p>如图，注意，数字后面的点只能是英文的点，有序列表的序号是根据第一行列表的数字顺序来的，<br>错序列表的序号本来是序号是乱的， 但是还是显示 2 3 5</p>\n</blockquote>\n<p>嵌套列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//无序列表嵌套</span><br><span class=\"line\">+ 123</span><br><span class=\"line\">    + abc</span><br><span class=\"line\">    + bcd</span><br><span class=\"line\">    + cde</span><br><span class=\"line\">+ 465</span><br><span class=\"line\">+ 789</span><br><span class=\"line\">//有序列表嵌套</span><br><span class=\"line\">1. abcd</span><br><span class=\"line\">    1. abcde</span><br><span class=\"line\">    2. abcde</span><br><span class=\"line\">    3. abcde</span><br><span class=\"line\">2. bcde</span><br><span class=\"line\">3. cdef</span><br></pre></td></tr></table></figure>\n<p>效果图：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/b66bb201-dfb0-432d-a07e-5c29c29349c9.webp\" alt=\"有序列表及错序效果图.png\" title=\"有序列表及错序效果图\"></p>\n<blockquote>\n<p>列表可以嵌套，使用时在嵌套列表前按 tab 或 空格 来缩进,去控制列表的层数</p>\n</blockquote>\n<h2 id=\"四、引用说明区块\"><a href=\"#四、引用说明区块\" class=\"headerlink\" title=\"四、引用说明区块\"></a>四、引用说明区块</h2><p>对某个部分做的内容做一些说明或者引用某某的话等，可以用这个语法。</p>\n<p>正常形式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 引用内容、说明内容。在语句前面加一个 &gt; ，注意是英文的那个右尖括号，注意空格，引用因为是一个区块，理论上是应该什么内容都可以放，比如说：标题，列表，引用等等。</span><br></pre></td></tr></table></figure>\n<p>效果图：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/9ea626c3-d294-48ae-b216-7eaf9854d455.webp\" alt=\"区块.png\" title=\"区块\"></p>\n<p>嵌套区块</p>\n<p>这里我只介绍一下我常用的方法，也是个人认为比较规范的一种方法，就是给区块的下一级区块多加一个右尖括号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 一级引用</span><br><span class=\"line\">&gt;&gt; 二级引用</span><br><span class=\"line\">&gt;&gt;&gt; 三级引用</span><br><span class=\"line\">&gt;&gt;&gt;&gt; 四级引用</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt; 五级引用</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt; 六级引用</span><br></pre></td></tr></table></figure>\n<p>效果图：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/5683dc0f-80f5-4084-94b4-6be6ca1af573.webp\" alt=\"嵌套区块.png\" title=\"嵌套区块\"></p>\n<h2 id=\"五、代码块\"><a href=\"#五、代码块\" class=\"headerlink\" title=\"五、代码块\"></a>五、代码块</h2><p>在发布一些技术文章会涉及展示代码的问题，这时候代码块就显得尤为重要。</p>\n<p>少量代码，单行使用，直接用`包裹起来就行了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">` shaoliangdaima,danhangshiyong `</span><br></pre></td></tr></table></figure>\n<p>效果图：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/3d28e400-33d0-4139-9bcc-d7a81e3d6eff.webp\" alt=\"单行代码块.png\" title=\"单行代码块\"></p>\n<p>大量代码，需要多行使用，用```包裹起来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daliangdaima,xuyaoduohangshiyong</span><br><span class=\"line\">daliangdaima,xuyaoduohangshiyong</span><br><span class=\"line\">daliangdaima,xuyaoduohangshiyong</span><br><span class=\"line\">daliangdaima,xuyaoduohangshiyong</span><br><span class=\"line\">daliangdaima,xuyaoduohangshiyong</span><br></pre></td></tr></table></figure>\n<p>效果图：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/89232b39-b6a3-4b3c-9da8-8afc2a693967.webp\" alt=\"多行代码.png\" title=\"多行代码\"></p>\n<h2 id=\"六、链接\"><a href=\"#六、链接\" class=\"headerlink\" title=\"六、链接\"></a>六、链接</h2><p>行内式<br>链接的文字放在[]中，链接地址放在随后的()中，链接也可以带title属性，链接地址后面空一格，然后用引号引起来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[68HTML](https://www.jianshu.com &quot;创作你的创作&quot;),</span><br><span class=\"line\">是一个创作社区,任何人均可以在其上进行创作。用户在简书上面可以方便的创作自己的作品,互相交流。 </span><br></pre></td></tr></table></figure>\n<p>参数式<br>链接的文字放在[]中，链接地址放在随后的:后，链接地址后面空一格，然后用引号引起来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[68HTML]: https://www.jianshu.com &quot;创作你的创作&quot;</span><br><span class=\"line\">[68HTML]是一个创作社区,任何人均可以在其上进行创作。用户在简书上面可以方便的创作自己的作品,互相交流。</span><br><span class=\"line\">//参数定义的其他写法</span><br><span class=\"line\">[68HTML]: https://www.jianshu.com &#x27;创作你的创作&#x27;</span><br><span class=\"line\">[68HTML]: https://www.jianshu.com (创作你的创作)</span><br><span class=\"line\">[68HTML]: &lt;https://www.jianshu.com&gt; &quot;创作你的创作&quot;</span><br></pre></td></tr></table></figure>\n<p>以上两种方式其效果图都是一样的，如下：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/ab8a3736-baa7-433f-9ca3-b9fe45c519ca.webp\" alt=\"链接.png\" title=\"链接\"></p>\n<h2 id=\"七、图片\"><a href=\"#七、图片\" class=\"headerlink\" title=\"七、图片\"></a>七、图片</h2><p>行内式<br>和链接的形式差不多，图片的名字放在[]中，图片地址放在随后的()中，title属性（图片地址后面空一格，然后用引号引起来）,注意的是[]前要加上!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![my-logo.png](https://upload-images.jianshu.io/upload_images/13623636-6d878e3d3ef63825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 &quot;my-logo&quot;)</span><br></pre></td></tr></table></figure>\n<p>参数式<br>图片的文字放在[]中，图片地址放在随后的:后，title属性（图片地址后面空一格，然后用引号引起来）,注意引用图片的时候在[]前要加上!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[my-logo.png]: https://upload-images.jianshu.io/upload_images/13623636-6d878e3d3ef63825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 &quot;my-logo&quot;</span><br><span class=\"line\">![my-logo.png]</span><br><span class=\"line\">//参数定义的其他写法</span><br><span class=\"line\">[my-logo.png]: https://upload-images.jianshu.io/upload_images/13623636-6d878e3d3ef63825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 &#x27;my-logo&#x27;</span><br><span class=\"line\">[my-logo.png]: https://upload-images.jianshu.io/upload_images/13623636-6d878e3d3ef63825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 (my-logo)</span><br><span class=\"line\">[my-logo.png]: &lt;https://upload-images.jianshu.io/upload_images/13623636-6d878e3d3ef63825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&gt; &quot;my-logo&quot;</span><br></pre></td></tr></table></figure>\n<p>以上两种方式其效果图都是一样的，如下：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/9ec3f832-7a9c-406c-b81b-caa54b9f7484.webp\" alt=\"my-logo.png\" title=\"my-logo\"></p>\n<h2 id=\"八、分割线\"><a href=\"#八、分割线\" class=\"headerlink\" title=\"八、分割线\"></a>八、分割线</h2><p>分割线可以由* - _（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- - -</span><br><span class=\"line\">------</span><br><span class=\"line\">***</span><br><span class=\"line\">* * *</span><br><span class=\"line\">******</span><br><span class=\"line\">___</span><br><span class=\"line\">_ _ _</span><br><span class=\"line\">______</span><br></pre></td></tr></table></figure>\n<p>以上代码的效果图均为：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/7c253eaa-308d-4fb1-aa67-1073a3602482.webp\" alt=\"分割线.png\" title=\"分割线\"></p>\n<h2 id=\"九、其他\"><a href=\"#九、其他\" class=\"headerlink\" title=\"九、其他\"></a>九、其他</h2><p>强调字体<br>一个星号或者是一个下划线包起来，会转换为<em>倾斜，如果是2个，会转换为<strong>加粗</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*md*    </span><br><span class=\"line\">**md**</span><br><span class=\"line\">_md_   </span><br><span class=\"line\">__md__</span><br></pre></td></tr></table></figure>\n<p>效果图：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/ac2a865f-6a28-46c5-af97-12df97d02978.webp\" alt=\"强调字体.png\" title=\"强调字体\"><br>转义<br>基本上和js转义一样,\\加需要转义的字符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\\\</span><br><span class=\"line\">\\*</span><br><span class=\"line\">\\+</span><br><span class=\"line\">\\-</span><br><span class=\"line\">\\`</span><br><span class=\"line\">\\_</span><br></pre></td></tr></table></figure>\n<p>删除线<br>用~~把需要显示删除线的字符包裹起来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~删除~~</span><br></pre></td></tr></table></figure>\n<p>效果图：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/9d5191d3-57d2-439d-a5e7-b13411ccfaa1.webp\" alt=\"删除线.png\" title=\"删除线\"></p>\n<h2 id=\"十、表格\"><a href=\"#十、表格\" class=\"headerlink\" title=\"十、表格\"></a>十、表格</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//例子一</span><br><span class=\"line\">|123|234|345|</span><br><span class=\"line\">|:-|:-:|-:|</span><br><span class=\"line\">|abc|bcd|cde|</span><br><span class=\"line\">|abc|bcd|cde|</span><br><span class=\"line\">|abc|bcd|cde|</span><br><span class=\"line\">//例子二</span><br><span class=\"line\">|123|234|345|</span><br><span class=\"line\">|:---|:---:|---:|</span><br><span class=\"line\">|abc|bcd|cde|</span><br><span class=\"line\">|abc|bcd|cde|</span><br><span class=\"line\">|abc|bcd|cde|</span><br><span class=\"line\">//例子三</span><br><span class=\"line\">123|234|345</span><br><span class=\"line\">:-|:-:|-:</span><br><span class=\"line\">abc|bcd|cde</span><br><span class=\"line\">abc|bcd|cde</span><br><span class=\"line\">abc|bcd|cde</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面三个例子的效果一样，由此可得：</p>\n<ol>\n<li>表格的格式不一定要对的非常起，但是为了良好的变成风格，尽量对齐是最好的</li>\n<li>分割线后面的冒号表示对齐方式，写在左边表示左对齐，右边为右对齐，两边都写表示居中</li>\n</ol>\n</blockquote>\n<p>效果图如下：<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/ce9df783-0efc-4a0c-a119-9116b2ca1bdc.webp\" alt=\"表格.png\" title=\"表格\"></p>\n<blockquote>\n<p>这篇文章的编写借鉴了很多前辈的经验，同时鉴赏我自己的总结，跟大家一起分享了。<br>即使遇到了不幸的灾难，已经开始了的事情决不放弃。</p>\n</blockquote>\n"},{"title":"nuxt.js性能提升 asyncData一次性请求多个接口, asyncData批处理请求","author":"68HTML","date":"2022-04-15T06:37:13.000Z","_content":"\n## nuxt.js性能提升 asyncData一次性请求多个接口, asyncData批处理请求\n```vue\n<template>\n  <div class=\"container\">\n    <div>\n      <Logo />\n      <h1 class=\"title\">test_axios</h1>\n      <div class=\"links\">\n        <a\n          href=\"https://nuxtjs.org/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          class=\"button--green\"\n        >\n          Documentation\n        </a>\n        <a\n          href=\"https://github.com/nuxt/nuxt.js\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          class=\"button--grey\"\n        >\n          GitHub\n        </a>\n      </div>\n      <h1>新的</h1>\n      <h3>IP：{{ip}}</h3>\n      <h3>title:{{title}}</h3>\n      <ul>\n          <li v-for=\"(data,index) in list\" :key=\"index\">{{data.name}}+index:{{index}}</li>\n      </ul>\n    </div>\n  </div>\n</template>\n \n<script>\nexport default {\n  async asyncData ({ app }) {\n    const $axios = app.$axios\n    // 单个请求处理\n    const data = await $axios.$get('http://192.168.1.181:8001/static/js/JsonData.json')\n    const seo = data.head\n    const list = data.list\n    console.log(seo)\n    console.log(list)\n    // 多个请求批处理\n    const [data1, data2, data3] = await Promise.all([\n      $axios.$get('http://192.168.1.181:8001/static/js/JsonData.json'),\n      $axios.$get('http://192.168.1.181:8001/static/js/JsonData2.json'),\n      $axios.$get('http://192.168.1.181:8001/static/js/JsonData3.json')\n    ])\n    console.log(data1.head.title)\n    console.log(data2.head.title)\n    console.log(data3.head.title)\n    return { seo, list }\n  },\n  data () {\n    return {\n      title: '首页',\n      ip: '0.0.0.0',\n      list: []\n    }\n  },\n  head () {\n    return {\n      title: this.seo.title + '_' + this.title,\n      meta: [\n        { hid: 'keywords', name: 'keywords', content: this.seo.keywords },\n        { hid: 'description', name: 'description', content: this.seo.description }\n      ]\n    }\n  }\n}\n</script>\n \n<style>\n.container {\n  margin: 0 auto;\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n}\n \n.title {\n  font-family: \"Quicksand\", \"Source Sans Pro\", -apple-system, BlinkMacSystemFont,\n    \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n  display: block;\n  font-weight: 300;\n  font-size: 100px;\n  color: #35495e;\n  letter-spacing: 1px;\n}\n \n.subtitle {\n  font-weight: 300;\n  font-size: 42px;\n  color: #526488;\n  word-spacing: 5px;\n  padding-bottom: 15px;\n}\n \n.links {\n  padding-top: 15px;\n}\n</style>\n```\n","source":"_posts/nuxt/Nuxt.js_AsyncDataYiCiXingQingQiuDuoGeJieKou.md","raw":"title: nuxt.js性能提升 asyncData一次性请求多个接口, asyncData批处理请求\nauthor: 68HTML\ndate: 2022-04-15 14:37:13\ntags: [\"Nuxt\",\"asyncData\",\"asyncData批处理\"]\ncategories: [\"Nuxt\"]\n---\n\n## nuxt.js性能提升 asyncData一次性请求多个接口, asyncData批处理请求\n```vue\n<template>\n  <div class=\"container\">\n    <div>\n      <Logo />\n      <h1 class=\"title\">test_axios</h1>\n      <div class=\"links\">\n        <a\n          href=\"https://nuxtjs.org/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          class=\"button--green\"\n        >\n          Documentation\n        </a>\n        <a\n          href=\"https://github.com/nuxt/nuxt.js\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          class=\"button--grey\"\n        >\n          GitHub\n        </a>\n      </div>\n      <h1>新的</h1>\n      <h3>IP：{{ip}}</h3>\n      <h3>title:{{title}}</h3>\n      <ul>\n          <li v-for=\"(data,index) in list\" :key=\"index\">{{data.name}}+index:{{index}}</li>\n      </ul>\n    </div>\n  </div>\n</template>\n \n<script>\nexport default {\n  async asyncData ({ app }) {\n    const $axios = app.$axios\n    // 单个请求处理\n    const data = await $axios.$get('http://192.168.1.181:8001/static/js/JsonData.json')\n    const seo = data.head\n    const list = data.list\n    console.log(seo)\n    console.log(list)\n    // 多个请求批处理\n    const [data1, data2, data3] = await Promise.all([\n      $axios.$get('http://192.168.1.181:8001/static/js/JsonData.json'),\n      $axios.$get('http://192.168.1.181:8001/static/js/JsonData2.json'),\n      $axios.$get('http://192.168.1.181:8001/static/js/JsonData3.json')\n    ])\n    console.log(data1.head.title)\n    console.log(data2.head.title)\n    console.log(data3.head.title)\n    return { seo, list }\n  },\n  data () {\n    return {\n      title: '首页',\n      ip: '0.0.0.0',\n      list: []\n    }\n  },\n  head () {\n    return {\n      title: this.seo.title + '_' + this.title,\n      meta: [\n        { hid: 'keywords', name: 'keywords', content: this.seo.keywords },\n        { hid: 'description', name: 'description', content: this.seo.description }\n      ]\n    }\n  }\n}\n</script>\n \n<style>\n.container {\n  margin: 0 auto;\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n}\n \n.title {\n  font-family: \"Quicksand\", \"Source Sans Pro\", -apple-system, BlinkMacSystemFont,\n    \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n  display: block;\n  font-weight: 300;\n  font-size: 100px;\n  color: #35495e;\n  letter-spacing: 1px;\n}\n \n.subtitle {\n  font-weight: 300;\n  font-size: 42px;\n  color: #526488;\n  word-spacing: 5px;\n  padding-bottom: 15px;\n}\n \n.links {\n  padding-top: 15px;\n}\n</style>\n```\n","slug":"nuxt/Nuxt.js_AsyncDataYiCiXingQingQiuDuoGeJieKou","published":1,"updated":"2022-05-07T07:06:07.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2vixl8o000sd8j0dscwgkrw","content":"<h2 id=\"nuxt-js性能提升-asyncData一次性请求多个接口-asyncData批处理请求\"><a href=\"#nuxt-js性能提升-asyncData一次性请求多个接口-asyncData批处理请求\" class=\"headerlink\" title=\"nuxt.js性能提升 asyncData一次性请求多个接口, asyncData批处理请求\"></a>nuxt.js性能提升 asyncData一次性请求多个接口, asyncData批处理请求</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;Logo /&gt;</span><br><span class=\"line\">      &lt;h1 class=&quot;title&quot;&gt;test_axios&lt;/h1&gt;</span><br><span class=\"line\">      &lt;div class=&quot;links&quot;&gt;</span><br><span class=\"line\">        &lt;a</span><br><span class=\"line\">          href=&quot;https://nuxtjs.org/&quot;</span><br><span class=\"line\">          target=&quot;_blank&quot;</span><br><span class=\"line\">          rel=&quot;noopener noreferrer&quot;</span><br><span class=\"line\">          class=&quot;button--green&quot;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">          Documentation</span><br><span class=\"line\">        &lt;/a&gt;</span><br><span class=\"line\">        &lt;a</span><br><span class=\"line\">          href=&quot;https://github.com/nuxt/nuxt.js&quot;</span><br><span class=\"line\">          target=&quot;_blank&quot;</span><br><span class=\"line\">          rel=&quot;noopener noreferrer&quot;</span><br><span class=\"line\">          class=&quot;button--grey&quot;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">          GitHub</span><br><span class=\"line\">        &lt;/a&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;h1&gt;新的&lt;/h1&gt;</span><br><span class=\"line\">      &lt;h3&gt;IP：&#123;&#123;ip&#125;&#125;&lt;/h3&gt;</span><br><span class=\"line\">      &lt;h3&gt;title:&#123;&#123;title&#125;&#125;&lt;/h3&gt;</span><br><span class=\"line\">      &lt;ul&gt;</span><br><span class=\"line\">          &lt;li v-for=&quot;(data,index) in list&quot; :key=&quot;index&quot;&gt;&#123;&#123;data.name&#125;&#125;+index:&#123;&#123;index&#125;&#125;&lt;/li&gt;</span><br><span class=\"line\">      &lt;/ul&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  async asyncData (&#123; app &#125;) &#123;</span><br><span class=\"line\">    const $axios = app.$axios</span><br><span class=\"line\">    // 单个请求处理</span><br><span class=\"line\">    const data = await $axios.$get(&#x27;http://192.168.1.181:8001/static/js/JsonData.json&#x27;)</span><br><span class=\"line\">    const seo = data.head</span><br><span class=\"line\">    const list = data.list</span><br><span class=\"line\">    console.log(seo)</span><br><span class=\"line\">    console.log(list)</span><br><span class=\"line\">    // 多个请求批处理</span><br><span class=\"line\">    const [data1, data2, data3] = await Promise.all([</span><br><span class=\"line\">      $axios.$get(&#x27;http://192.168.1.181:8001/static/js/JsonData.json&#x27;),</span><br><span class=\"line\">      $axios.$get(&#x27;http://192.168.1.181:8001/static/js/JsonData2.json&#x27;),</span><br><span class=\"line\">      $axios.$get(&#x27;http://192.168.1.181:8001/static/js/JsonData3.json&#x27;)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    console.log(data1.head.title)</span><br><span class=\"line\">    console.log(data2.head.title)</span><br><span class=\"line\">    console.log(data3.head.title)</span><br><span class=\"line\">    return &#123; seo, list &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      title: &#x27;首页&#x27;,</span><br><span class=\"line\">      ip: &#x27;0.0.0.0&#x27;,</span><br><span class=\"line\">      list: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  head () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      title: this.seo.title + &#x27;_&#x27; + this.title,</span><br><span class=\"line\">      meta: [</span><br><span class=\"line\">        &#123; hid: &#x27;keywords&#x27;, name: &#x27;keywords&#x27;, content: this.seo.keywords &#125;,</span><br><span class=\"line\">        &#123; hid: &#x27;description&#x27;, name: &#x27;description&#x27;, content: this.seo.description &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.container &#123;</span><br><span class=\"line\">  margin: 0 auto;</span><br><span class=\"line\">  min-height: 100vh;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  justify-content: center;</span><br><span class=\"line\">  align-items: center;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">.title &#123;</span><br><span class=\"line\">  font-family: &quot;Quicksand&quot;, &quot;Source Sans Pro&quot;, -apple-system, BlinkMacSystemFont,</span><br><span class=\"line\">    &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif;</span><br><span class=\"line\">  display: block;</span><br><span class=\"line\">  font-weight: 300;</span><br><span class=\"line\">  font-size: 100px;</span><br><span class=\"line\">  color: #35495e;</span><br><span class=\"line\">  letter-spacing: 1px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">.subtitle &#123;</span><br><span class=\"line\">  font-weight: 300;</span><br><span class=\"line\">  font-size: 42px;</span><br><span class=\"line\">  color: #526488;</span><br><span class=\"line\">  word-spacing: 5px;</span><br><span class=\"line\">  padding-bottom: 15px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">.links &#123;</span><br><span class=\"line\">  padding-top: 15px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"nuxt-js性能提升-asyncData一次性请求多个接口-asyncData批处理请求\"><a href=\"#nuxt-js性能提升-asyncData一次性请求多个接口-asyncData批处理请求\" class=\"headerlink\" title=\"nuxt.js性能提升 asyncData一次性请求多个接口, asyncData批处理请求\"></a>nuxt.js性能提升 asyncData一次性请求多个接口, asyncData批处理请求</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;Logo /&gt;</span><br><span class=\"line\">      &lt;h1 class=&quot;title&quot;&gt;test_axios&lt;/h1&gt;</span><br><span class=\"line\">      &lt;div class=&quot;links&quot;&gt;</span><br><span class=\"line\">        &lt;a</span><br><span class=\"line\">          href=&quot;https://nuxtjs.org/&quot;</span><br><span class=\"line\">          target=&quot;_blank&quot;</span><br><span class=\"line\">          rel=&quot;noopener noreferrer&quot;</span><br><span class=\"line\">          class=&quot;button--green&quot;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">          Documentation</span><br><span class=\"line\">        &lt;/a&gt;</span><br><span class=\"line\">        &lt;a</span><br><span class=\"line\">          href=&quot;https://github.com/nuxt/nuxt.js&quot;</span><br><span class=\"line\">          target=&quot;_blank&quot;</span><br><span class=\"line\">          rel=&quot;noopener noreferrer&quot;</span><br><span class=\"line\">          class=&quot;button--grey&quot;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">          GitHub</span><br><span class=\"line\">        &lt;/a&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;h1&gt;新的&lt;/h1&gt;</span><br><span class=\"line\">      &lt;h3&gt;IP：&#123;&#123;ip&#125;&#125;&lt;/h3&gt;</span><br><span class=\"line\">      &lt;h3&gt;title:&#123;&#123;title&#125;&#125;&lt;/h3&gt;</span><br><span class=\"line\">      &lt;ul&gt;</span><br><span class=\"line\">          &lt;li v-for=&quot;(data,index) in list&quot; :key=&quot;index&quot;&gt;&#123;&#123;data.name&#125;&#125;+index:&#123;&#123;index&#125;&#125;&lt;/li&gt;</span><br><span class=\"line\">      &lt;/ul&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  async asyncData (&#123; app &#125;) &#123;</span><br><span class=\"line\">    const $axios = app.$axios</span><br><span class=\"line\">    // 单个请求处理</span><br><span class=\"line\">    const data = await $axios.$get(&#x27;http://192.168.1.181:8001/static/js/JsonData.json&#x27;)</span><br><span class=\"line\">    const seo = data.head</span><br><span class=\"line\">    const list = data.list</span><br><span class=\"line\">    console.log(seo)</span><br><span class=\"line\">    console.log(list)</span><br><span class=\"line\">    // 多个请求批处理</span><br><span class=\"line\">    const [data1, data2, data3] = await Promise.all([</span><br><span class=\"line\">      $axios.$get(&#x27;http://192.168.1.181:8001/static/js/JsonData.json&#x27;),</span><br><span class=\"line\">      $axios.$get(&#x27;http://192.168.1.181:8001/static/js/JsonData2.json&#x27;),</span><br><span class=\"line\">      $axios.$get(&#x27;http://192.168.1.181:8001/static/js/JsonData3.json&#x27;)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    console.log(data1.head.title)</span><br><span class=\"line\">    console.log(data2.head.title)</span><br><span class=\"line\">    console.log(data3.head.title)</span><br><span class=\"line\">    return &#123; seo, list &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      title: &#x27;首页&#x27;,</span><br><span class=\"line\">      ip: &#x27;0.0.0.0&#x27;,</span><br><span class=\"line\">      list: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  head () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      title: this.seo.title + &#x27;_&#x27; + this.title,</span><br><span class=\"line\">      meta: [</span><br><span class=\"line\">        &#123; hid: &#x27;keywords&#x27;, name: &#x27;keywords&#x27;, content: this.seo.keywords &#125;,</span><br><span class=\"line\">        &#123; hid: &#x27;description&#x27;, name: &#x27;description&#x27;, content: this.seo.description &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.container &#123;</span><br><span class=\"line\">  margin: 0 auto;</span><br><span class=\"line\">  min-height: 100vh;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  justify-content: center;</span><br><span class=\"line\">  align-items: center;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">.title &#123;</span><br><span class=\"line\">  font-family: &quot;Quicksand&quot;, &quot;Source Sans Pro&quot;, -apple-system, BlinkMacSystemFont,</span><br><span class=\"line\">    &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif;</span><br><span class=\"line\">  display: block;</span><br><span class=\"line\">  font-weight: 300;</span><br><span class=\"line\">  font-size: 100px;</span><br><span class=\"line\">  color: #35495e;</span><br><span class=\"line\">  letter-spacing: 1px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">.subtitle &#123;</span><br><span class=\"line\">  font-weight: 300;</span><br><span class=\"line\">  font-size: 42px;</span><br><span class=\"line\">  color: #526488;</span><br><span class=\"line\">  word-spacing: 5px;</span><br><span class=\"line\">  padding-bottom: 15px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">.links &#123;</span><br><span class=\"line\">  padding-top: 15px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"详解TypeScript的基础类型","date":"2022-04-07T01:41:46.000Z","_content":"\n> 这篇文章主要为大家介绍了TypeScript的基础类型，具有一定的参考价值，感兴趣的小伙伴们可以参考一下，希望能够给你带来帮助\n\n## 布尔类型\n```typescript\n// 布尔类型--->boolean\n// let 变量名：数据类型 = 值\nlet flag: boolean = true;\nconsole.log(flag)\n```\n## 数字类型\n```typescript\n// 数字类型--->number\nlet a1: number = 10 // 十进制\nlet a2: number = 0b1010 // 二进制\nlet a3: number = 0o12// 八进制\nlet a4: number = 0xa // 十六进制\nconsole.log(a1 + a2 + a3 + a4)\n```\n## 字符串类型\n```typescript\n// 字符串类型--->string\nlet str1: string = '床前明月光';\nlet str2: string = '地上鞋两双';\nconsole.log(str1 + ',' + str2)\n```\n## 字符串和数字进行拼接\n```typescript\nlet str3: string = '我现在的岁数：'\nlet a5: number = 24\nconsole.log(`${str3}${a5}`)\n```\n总结:ts中变量一开始是什么类型,那么后期赋值的时候,只能用这个类型的数据,是不允许用其他类型的数据赋值给当前的这个变量中\n## undefined和 null\n```typescript\n// undefined和 null都可以作为其他类型的子类璧,把undefined和nu1l赋值给其他类型的变量的,如: number类型的变量\nlet und: undefined = undefined\nlet n1l: null = null\nconsole.log(und)\nconsole.log(n1l)\n```\n## 数组类型\n```typescript\n// 方式一：let变量名:数据类型[]=[值1,值2,值3,...]\nlet arr1: number[] = [10, 20, 30, 40, 50]\nconsole.log(arr1);\n\n// 方式二：泛型的写法\n// 语法: let变量名: Array<数据类型>=[值1,值2,值3]\nlet arr2: Array<number> = [100, 200, 300]\nconsole.log(arr2);\n```\n注意问题:数组定义后,里面的数据的类型必须和定义数组的时候的类型是一致的,否则有错误提示信息,也不会编译通过的\n## 元组类型\n```typescript\n// 元组类型:在定义数组的时候,类型和数据的个数一开始就已经限定了\nlet arr3: [string, number, boolean] = ['小甜甜', 100, true];\nconsole.log(arr3)\n// 注意问题:元组类型在使用的时候,数据的类型的位置和数据的个数应该和在定义元组的时候的数据类型及位置应该是一致的\nconsole.log(arr3[0].split(''));\nconsole.log(arr3[1].toFixed(2));\n```\n## 枚举类型\n```typescript\nenum Color {\n       red,\n       green,\n       blue\n}\n// 定义一个Color的枚举类型的变量来接收枚举的值\nlet color: Color = Color.red\nconsole.log(color);\nconsole.log(Color[2])\n```\n## any类型\n```typescript\nlet str5: any = 100;\nstr5 = '宇智波带土'\nconsole.log(str5);\n// 当一个数组中要存储多个数据,个数不确定,类型不确定,此时也可以使用any类型来定义数组\nlet arr6: any = [100, '宇智波带土', true];\nconsole.log(arr6)\n// 这种情况下也没有错误的提示信息, any类型有优点,也有缺点\nconsole.log(arr6[1].split(''));\n```\n## void类型\n```typescript\nfunction getobj(obj: object): object {\n       console.log(obj);\n       return {\n           name: '卡卡西',\n           age: 27\n       }\n}\nconsole.log(getobj({ name: '佐助', age: 20 }))\n```\n## 联合类型\n```typescript\n// 需求1:定义一个函数得到一个数字或字符串值的字符串形式值\nfunction getString(str: number | string): string {\n      return str.toString();\n}\nconsole.log(getString('萨斯给'))\n  \n// 需求2:定义一个一个函数得到一个数字或字符串值的长度\nfunction getString1(str: number | string): number {\n      return str.toString().length\n      if ((<string>str).length) {\n          return (str as string).length\n      } else {\n          return str.toString().length\n      }\n}\nconsole.log(getString1(12345))\nconsole.log(getString1('12345'))\n```\n## 总结\n本篇文章就到这里了，希望能够给你带来帮助，也希望您能够多多关注68HTML的更多内容! \n\n","source":"_posts/typescript/XiangJieTypeScriptDeJiChuLeiXing.md","raw":"---\ntitle: 详解TypeScript的基础类型\ndate: 2022-04-07 09:41:46\ntags: [\"typescript\"]\ncategories: [\"TypeScript\"]\n---\n\n> 这篇文章主要为大家介绍了TypeScript的基础类型，具有一定的参考价值，感兴趣的小伙伴们可以参考一下，希望能够给你带来帮助\n\n## 布尔类型\n```typescript\n// 布尔类型--->boolean\n// let 变量名：数据类型 = 值\nlet flag: boolean = true;\nconsole.log(flag)\n```\n## 数字类型\n```typescript\n// 数字类型--->number\nlet a1: number = 10 // 十进制\nlet a2: number = 0b1010 // 二进制\nlet a3: number = 0o12// 八进制\nlet a4: number = 0xa // 十六进制\nconsole.log(a1 + a2 + a3 + a4)\n```\n## 字符串类型\n```typescript\n// 字符串类型--->string\nlet str1: string = '床前明月光';\nlet str2: string = '地上鞋两双';\nconsole.log(str1 + ',' + str2)\n```\n## 字符串和数字进行拼接\n```typescript\nlet str3: string = '我现在的岁数：'\nlet a5: number = 24\nconsole.log(`${str3}${a5}`)\n```\n总结:ts中变量一开始是什么类型,那么后期赋值的时候,只能用这个类型的数据,是不允许用其他类型的数据赋值给当前的这个变量中\n## undefined和 null\n```typescript\n// undefined和 null都可以作为其他类型的子类璧,把undefined和nu1l赋值给其他类型的变量的,如: number类型的变量\nlet und: undefined = undefined\nlet n1l: null = null\nconsole.log(und)\nconsole.log(n1l)\n```\n## 数组类型\n```typescript\n// 方式一：let变量名:数据类型[]=[值1,值2,值3,...]\nlet arr1: number[] = [10, 20, 30, 40, 50]\nconsole.log(arr1);\n\n// 方式二：泛型的写法\n// 语法: let变量名: Array<数据类型>=[值1,值2,值3]\nlet arr2: Array<number> = [100, 200, 300]\nconsole.log(arr2);\n```\n注意问题:数组定义后,里面的数据的类型必须和定义数组的时候的类型是一致的,否则有错误提示信息,也不会编译通过的\n## 元组类型\n```typescript\n// 元组类型:在定义数组的时候,类型和数据的个数一开始就已经限定了\nlet arr3: [string, number, boolean] = ['小甜甜', 100, true];\nconsole.log(arr3)\n// 注意问题:元组类型在使用的时候,数据的类型的位置和数据的个数应该和在定义元组的时候的数据类型及位置应该是一致的\nconsole.log(arr3[0].split(''));\nconsole.log(arr3[1].toFixed(2));\n```\n## 枚举类型\n```typescript\nenum Color {\n       red,\n       green,\n       blue\n}\n// 定义一个Color的枚举类型的变量来接收枚举的值\nlet color: Color = Color.red\nconsole.log(color);\nconsole.log(Color[2])\n```\n## any类型\n```typescript\nlet str5: any = 100;\nstr5 = '宇智波带土'\nconsole.log(str5);\n// 当一个数组中要存储多个数据,个数不确定,类型不确定,此时也可以使用any类型来定义数组\nlet arr6: any = [100, '宇智波带土', true];\nconsole.log(arr6)\n// 这种情况下也没有错误的提示信息, any类型有优点,也有缺点\nconsole.log(arr6[1].split(''));\n```\n## void类型\n```typescript\nfunction getobj(obj: object): object {\n       console.log(obj);\n       return {\n           name: '卡卡西',\n           age: 27\n       }\n}\nconsole.log(getobj({ name: '佐助', age: 20 }))\n```\n## 联合类型\n```typescript\n// 需求1:定义一个函数得到一个数字或字符串值的字符串形式值\nfunction getString(str: number | string): string {\n      return str.toString();\n}\nconsole.log(getString('萨斯给'))\n  \n// 需求2:定义一个一个函数得到一个数字或字符串值的长度\nfunction getString1(str: number | string): number {\n      return str.toString().length\n      if ((<string>str).length) {\n          return (str as string).length\n      } else {\n          return str.toString().length\n      }\n}\nconsole.log(getString1(12345))\nconsole.log(getString1('12345'))\n```\n## 总结\n本篇文章就到这里了，希望能够给你带来帮助，也希望您能够多多关注68HTML的更多内容! \n\n","slug":"typescript/XiangJieTypeScriptDeJiChuLeiXing","published":1,"updated":"2022-04-07T07:02:29.001Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2vixl8p000vd8j097rf03k0","content":"<blockquote>\n<p>这篇文章主要为大家介绍了TypeScript的基础类型，具有一定的参考价值，感兴趣的小伙伴们可以参考一下，希望能够给你带来帮助</p>\n</blockquote>\n<h2 id=\"布尔类型\"><a href=\"#布尔类型\" class=\"headerlink\" title=\"布尔类型\"></a>布尔类型</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 布尔类型---&gt;boolean</span></span><br><span class=\"line\"><span class=\"comment\">// let 变量名：数据类型 = 值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">flag</span>: <span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(flag)</span><br></pre></td></tr></table></figure>\n<h2 id=\"数字类型\"><a href=\"#数字类型\" class=\"headerlink\" title=\"数字类型\"></a>数字类型</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数字类型---&gt;number</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a1</span>: <span class=\"built_in\">number</span> = <span class=\"number\">10</span> <span class=\"comment\">// 十进制</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a2</span>: <span class=\"built_in\">number</span> = <span class=\"number\">0b1010</span> <span class=\"comment\">// 二进制</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a3</span>: <span class=\"built_in\">number</span> = <span class=\"number\">0o12</span><span class=\"comment\">// 八进制</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a4</span>: <span class=\"built_in\">number</span> = <span class=\"number\">0xa</span> <span class=\"comment\">// 十六进制</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a1 + a2 + a3 + a4)</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串类型\"><a href=\"#字符串类型\" class=\"headerlink\" title=\"字符串类型\"></a>字符串类型</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符串类型---&gt;string</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str1</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;床前明月光&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str2</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;地上鞋两双&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str1 + <span class=\"string\">&#x27;,&#x27;</span> + str2)</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串和数字进行拼接\"><a href=\"#字符串和数字进行拼接\" class=\"headerlink\" title=\"字符串和数字进行拼接\"></a>字符串和数字进行拼接</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str3</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;我现在的岁数：&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a5</span>: <span class=\"built_in\">number</span> = <span class=\"number\">24</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;str3&#125;</span><span class=\"subst\">$&#123;a5&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>\n<p>总结:ts中变量一开始是什么类型,那么后期赋值的时候,只能用这个类型的数据,是不允许用其他类型的数据赋值给当前的这个变量中</p>\n<h2 id=\"undefined和-null\"><a href=\"#undefined和-null\" class=\"headerlink\" title=\"undefined和 null\"></a>undefined和 null</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// undefined和 null都可以作为其他类型的子类璧,把undefined和nu1l赋值给其他类型的变量的,如: number类型的变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">und</span>: <span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">n1l</span>: <span class=\"literal\">null</span> = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(und)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(n1l)</span><br></pre></td></tr></table></figure>\n<h2 id=\"数组类型\"><a href=\"#数组类型\" class=\"headerlink\" title=\"数组类型\"></a>数组类型</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式一：let变量名:数据类型[]=[值1,值2,值3,...]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr1</span>: <span class=\"built_in\">number</span>[] = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式二：泛型的写法</span></span><br><span class=\"line\"><span class=\"comment\">// 语法: let变量名: Array&lt;数据类型&gt;=[值1,值2,值3]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr2</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">300</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr2);</span><br></pre></td></tr></table></figure>\n<p>注意问题:数组定义后,里面的数据的类型必须和定义数组的时候的类型是一致的,否则有错误提示信息,也不会编译通过的</p>\n<h2 id=\"元组类型\"><a href=\"#元组类型\" class=\"headerlink\" title=\"元组类型\"></a>元组类型</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 元组类型:在定义数组的时候,类型和数据的个数一开始就已经限定了</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr3</span>: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>, <span class=\"built_in\">boolean</span>] = [<span class=\"string\">&#x27;小甜甜&#x27;</span>, <span class=\"number\">100</span>, <span class=\"literal\">true</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr3)</span><br><span class=\"line\"><span class=\"comment\">// 注意问题:元组类型在使用的时候,数据的类型的位置和数据的个数应该和在定义元组的时候的数据类型及位置应该是一致的</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr3[<span class=\"number\">0</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr3[<span class=\"number\">1</span>].<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"枚举类型\"><a href=\"#枚举类型\" class=\"headerlink\" title=\"枚举类型\"></a>枚举类型</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Color</span> &#123;</span><br><span class=\"line\">       red,</span><br><span class=\"line\">       green,</span><br><span class=\"line\">       blue</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义一个Color的枚举类型的变量来接收枚举的值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">color</span>: <span class=\"title class_\">Color</span> = <span class=\"title class_\">Color</span>.<span class=\"property\">red</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(color);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Color</span>[<span class=\"number\">2</span>])</span><br></pre></td></tr></table></figure>\n<h2 id=\"any类型\"><a href=\"#any类型\" class=\"headerlink\" title=\"any类型\"></a>any类型</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str5</span>: <span class=\"built_in\">any</span> = <span class=\"number\">100</span>;</span><br><span class=\"line\">str5 = <span class=\"string\">&#x27;宇智波带土&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str5);</span><br><span class=\"line\"><span class=\"comment\">// 当一个数组中要存储多个数据,个数不确定,类型不确定,此时也可以使用any类型来定义数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr6</span>: <span class=\"built_in\">any</span> = [<span class=\"number\">100</span>, <span class=\"string\">&#x27;宇智波带土&#x27;</span>, <span class=\"literal\">true</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr6)</span><br><span class=\"line\"><span class=\"comment\">// 这种情况下也没有错误的提示信息, any类型有优点,也有缺点</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr6[<span class=\"number\">1</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"void类型\"><a href=\"#void类型\" class=\"headerlink\" title=\"void类型\"></a>void类型</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getobj</span>(<span class=\"params\">obj: <span class=\"built_in\">object</span></span>): <span class=\"built_in\">object</span> &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">           <span class=\"attr\">name</span>: <span class=\"string\">&#x27;卡卡西&#x27;</span>,</span><br><span class=\"line\">           <span class=\"attr\">age</span>: <span class=\"number\">27</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getobj</span>(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;佐助&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;))</span><br></pre></td></tr></table></figure>\n<h2 id=\"联合类型\"><a href=\"#联合类型\" class=\"headerlink\" title=\"联合类型\"></a>联合类型</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需求1:定义一个函数得到一个数字或字符串值的字符串形式值</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getString</span>(<span class=\"params\">str: <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span></span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> str.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getString</span>(<span class=\"string\">&#x27;萨斯给&#x27;</span>))</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 需求2:定义一个一个函数得到一个数字或字符串值的长度</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getString1</span>(<span class=\"params\">str: <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span></span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> str.<span class=\"title function_\">toString</span>().<span class=\"property\">length</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((&lt;<span class=\"built_in\">string</span>&gt;str).<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> (str <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>).<span class=\"property\">length</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> str.<span class=\"title function_\">toString</span>().<span class=\"property\">length</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getString1</span>(<span class=\"number\">12345</span>))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getString1</span>(<span class=\"string\">&#x27;12345&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本篇文章就到这里了，希望能够给你带来帮助，也希望您能够多多关注68HTML的更多内容! </p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>这篇文章主要为大家介绍了TypeScript的基础类型，具有一定的参考价值，感兴趣的小伙伴们可以参考一下，希望能够给你带来帮助</p>\n</blockquote>\n<h2 id=\"布尔类型\"><a href=\"#布尔类型\" class=\"headerlink\" title=\"布尔类型\"></a>布尔类型</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 布尔类型---&gt;boolean</span></span><br><span class=\"line\"><span class=\"comment\">// let 变量名：数据类型 = 值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">flag</span>: <span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(flag)</span><br></pre></td></tr></table></figure>\n<h2 id=\"数字类型\"><a href=\"#数字类型\" class=\"headerlink\" title=\"数字类型\"></a>数字类型</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数字类型---&gt;number</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a1</span>: <span class=\"built_in\">number</span> = <span class=\"number\">10</span> <span class=\"comment\">// 十进制</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a2</span>: <span class=\"built_in\">number</span> = <span class=\"number\">0b1010</span> <span class=\"comment\">// 二进制</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a3</span>: <span class=\"built_in\">number</span> = <span class=\"number\">0o12</span><span class=\"comment\">// 八进制</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a4</span>: <span class=\"built_in\">number</span> = <span class=\"number\">0xa</span> <span class=\"comment\">// 十六进制</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a1 + a2 + a3 + a4)</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串类型\"><a href=\"#字符串类型\" class=\"headerlink\" title=\"字符串类型\"></a>字符串类型</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符串类型---&gt;string</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str1</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;床前明月光&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str2</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;地上鞋两双&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str1 + <span class=\"string\">&#x27;,&#x27;</span> + str2)</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串和数字进行拼接\"><a href=\"#字符串和数字进行拼接\" class=\"headerlink\" title=\"字符串和数字进行拼接\"></a>字符串和数字进行拼接</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str3</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;我现在的岁数：&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a5</span>: <span class=\"built_in\">number</span> = <span class=\"number\">24</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;str3&#125;</span><span class=\"subst\">$&#123;a5&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>\n<p>总结:ts中变量一开始是什么类型,那么后期赋值的时候,只能用这个类型的数据,是不允许用其他类型的数据赋值给当前的这个变量中</p>\n<h2 id=\"undefined和-null\"><a href=\"#undefined和-null\" class=\"headerlink\" title=\"undefined和 null\"></a>undefined和 null</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// undefined和 null都可以作为其他类型的子类璧,把undefined和nu1l赋值给其他类型的变量的,如: number类型的变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">und</span>: <span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">n1l</span>: <span class=\"literal\">null</span> = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(und)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(n1l)</span><br></pre></td></tr></table></figure>\n<h2 id=\"数组类型\"><a href=\"#数组类型\" class=\"headerlink\" title=\"数组类型\"></a>数组类型</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式一：let变量名:数据类型[]=[值1,值2,值3,...]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr1</span>: <span class=\"built_in\">number</span>[] = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式二：泛型的写法</span></span><br><span class=\"line\"><span class=\"comment\">// 语法: let变量名: Array&lt;数据类型&gt;=[值1,值2,值3]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr2</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">300</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr2);</span><br></pre></td></tr></table></figure>\n<p>注意问题:数组定义后,里面的数据的类型必须和定义数组的时候的类型是一致的,否则有错误提示信息,也不会编译通过的</p>\n<h2 id=\"元组类型\"><a href=\"#元组类型\" class=\"headerlink\" title=\"元组类型\"></a>元组类型</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 元组类型:在定义数组的时候,类型和数据的个数一开始就已经限定了</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr3</span>: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>, <span class=\"built_in\">boolean</span>] = [<span class=\"string\">&#x27;小甜甜&#x27;</span>, <span class=\"number\">100</span>, <span class=\"literal\">true</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr3)</span><br><span class=\"line\"><span class=\"comment\">// 注意问题:元组类型在使用的时候,数据的类型的位置和数据的个数应该和在定义元组的时候的数据类型及位置应该是一致的</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr3[<span class=\"number\">0</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr3[<span class=\"number\">1</span>].<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"枚举类型\"><a href=\"#枚举类型\" class=\"headerlink\" title=\"枚举类型\"></a>枚举类型</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Color</span> &#123;</span><br><span class=\"line\">       red,</span><br><span class=\"line\">       green,</span><br><span class=\"line\">       blue</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义一个Color的枚举类型的变量来接收枚举的值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">color</span>: <span class=\"title class_\">Color</span> = <span class=\"title class_\">Color</span>.<span class=\"property\">red</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(color);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Color</span>[<span class=\"number\">2</span>])</span><br></pre></td></tr></table></figure>\n<h2 id=\"any类型\"><a href=\"#any类型\" class=\"headerlink\" title=\"any类型\"></a>any类型</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str5</span>: <span class=\"built_in\">any</span> = <span class=\"number\">100</span>;</span><br><span class=\"line\">str5 = <span class=\"string\">&#x27;宇智波带土&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str5);</span><br><span class=\"line\"><span class=\"comment\">// 当一个数组中要存储多个数据,个数不确定,类型不确定,此时也可以使用any类型来定义数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr6</span>: <span class=\"built_in\">any</span> = [<span class=\"number\">100</span>, <span class=\"string\">&#x27;宇智波带土&#x27;</span>, <span class=\"literal\">true</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr6)</span><br><span class=\"line\"><span class=\"comment\">// 这种情况下也没有错误的提示信息, any类型有优点,也有缺点</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr6[<span class=\"number\">1</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"void类型\"><a href=\"#void类型\" class=\"headerlink\" title=\"void类型\"></a>void类型</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getobj</span>(<span class=\"params\">obj: <span class=\"built_in\">object</span></span>): <span class=\"built_in\">object</span> &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">           <span class=\"attr\">name</span>: <span class=\"string\">&#x27;卡卡西&#x27;</span>,</span><br><span class=\"line\">           <span class=\"attr\">age</span>: <span class=\"number\">27</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getobj</span>(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;佐助&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;))</span><br></pre></td></tr></table></figure>\n<h2 id=\"联合类型\"><a href=\"#联合类型\" class=\"headerlink\" title=\"联合类型\"></a>联合类型</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需求1:定义一个函数得到一个数字或字符串值的字符串形式值</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getString</span>(<span class=\"params\">str: <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span></span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> str.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getString</span>(<span class=\"string\">&#x27;萨斯给&#x27;</span>))</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 需求2:定义一个一个函数得到一个数字或字符串值的长度</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getString1</span>(<span class=\"params\">str: <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span></span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> str.<span class=\"title function_\">toString</span>().<span class=\"property\">length</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((&lt;<span class=\"built_in\">string</span>&gt;str).<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> (str <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>).<span class=\"property\">length</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> str.<span class=\"title function_\">toString</span>().<span class=\"property\">length</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getString1</span>(<span class=\"number\">12345</span>))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getString1</span>(<span class=\"string\">&#x27;12345&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本篇文章就到这里了，希望能够给你带来帮助，也希望您能够多多关注68HTML的更多内容! </p>\n"},{"title":"Nuxt.js 报错 window is not defined || document is not defined","author":"68HTML","date":"2022-04-06T04:22:13.000Z","_content":"\n## Nuxt.js 报错 window is not defined || document is not defined\n### 情况1： 自己的写的函数里包含window等\n报错原因：因为Nuxt为服务器端渲染，所以在编译打包时会区分服务端渲染还是客户端渲染(浏览器)，在vue文件中使用window对象报错的原因是，webpack将其加入了服务端脚本中，所以会报错。所以在使用时，应该判断当前代码环境是否是浏览器环境。\n\n解决方案:\n> 1.通过 process.client 判断\n```\nif (process.client) {\n  ... // 这里就是操作window对象的代码\n}\n```\n> 2.将涉及到window的写在 mounted 生命周期里\n```\nmounted() {\n\t// window ...\n}\n```\n> 3.使用 no-ssr 组件\n```\n<template>\n    <div>\n        <kafuuchino/>\n        <no-ssrplaceholder=\"Loading...\">\n            <!-- 此组件仅在客户端呈现 -->\n            <comments/>\n        </no-ssr>\n    </div>\n</template>\n```\n### 情况2： 第三方插件里包含window等\n报错原因：还有一种就是项目里会引入很多第三方组件，这些组件里也有可能会包含window等一些服务端不支持的内容\n\n解决方案:\n>1.将插件设置为客户端渲染\n将 插件 文件路径配置到 nuxt.config.js 的 plugins 属性中，示例如下\n\n```\nmodule.exports = {\n\t //其它配置项...\n\tplugins: [\n\t    { \n\t    \tsrc: '~/plugins/kafuuchino',\n\t    \tssr: false // 此处的 ssr:false 就是将其改为非服务器端渲染\n\t    } \n\t],\n}\n```\n修改完配置文件需要重新启动项目！\n","source":"_posts/nuxt/Nuxt.js_BCWindowIsNotDefined_documentIsNotDefined.md","raw":"title: Nuxt.js 报错 window is not defined || document is not defined\nauthor: 68HTML\ndate: 2022-04-06 12:22:13\ntags: [\"Nuxt\",\"NuxtJs报错\"]\ncategories: [\"Nuxt\"]\n---\n\n## Nuxt.js 报错 window is not defined || document is not defined\n### 情况1： 自己的写的函数里包含window等\n报错原因：因为Nuxt为服务器端渲染，所以在编译打包时会区分服务端渲染还是客户端渲染(浏览器)，在vue文件中使用window对象报错的原因是，webpack将其加入了服务端脚本中，所以会报错。所以在使用时，应该判断当前代码环境是否是浏览器环境。\n\n解决方案:\n> 1.通过 process.client 判断\n```\nif (process.client) {\n  ... // 这里就是操作window对象的代码\n}\n```\n> 2.将涉及到window的写在 mounted 生命周期里\n```\nmounted() {\n\t// window ...\n}\n```\n> 3.使用 no-ssr 组件\n```\n<template>\n    <div>\n        <kafuuchino/>\n        <no-ssrplaceholder=\"Loading...\">\n            <!-- 此组件仅在客户端呈现 -->\n            <comments/>\n        </no-ssr>\n    </div>\n</template>\n```\n### 情况2： 第三方插件里包含window等\n报错原因：还有一种就是项目里会引入很多第三方组件，这些组件里也有可能会包含window等一些服务端不支持的内容\n\n解决方案:\n>1.将插件设置为客户端渲染\n将 插件 文件路径配置到 nuxt.config.js 的 plugins 属性中，示例如下\n\n```\nmodule.exports = {\n\t //其它配置项...\n\tplugins: [\n\t    { \n\t    \tsrc: '~/plugins/kafuuchino',\n\t    \tssr: false // 此处的 ssr:false 就是将其改为非服务器端渲染\n\t    } \n\t],\n}\n```\n修改完配置文件需要重新启动项目！\n","slug":"nuxt/Nuxt.js_BCWindowIsNotDefined_documentIsNotDefined","published":1,"updated":"2022-05-07T07:06:07.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2vixl8p000yd8j0fpi5hpdw","content":"<h2 id=\"Nuxt-js-报错-window-is-not-defined-document-is-not-defined\"><a href=\"#Nuxt-js-报错-window-is-not-defined-document-is-not-defined\" class=\"headerlink\" title=\"Nuxt.js 报错 window is not defined || document is not defined\"></a>Nuxt.js 报错 window is not defined || document is not defined</h2><h3 id=\"情况1：-自己的写的函数里包含window等\"><a href=\"#情况1：-自己的写的函数里包含window等\" class=\"headerlink\" title=\"情况1： 自己的写的函数里包含window等\"></a>情况1： 自己的写的函数里包含window等</h3><p>报错原因：因为Nuxt为服务器端渲染，所以在编译打包时会区分服务端渲染还是客户端渲染(浏览器)，在vue文件中使用window对象报错的原因是，webpack将其加入了服务端脚本中，所以会报错。所以在使用时，应该判断当前代码环境是否是浏览器环境。</p>\n<p>解决方案:</p>\n<blockquote>\n<p>1.通过 process.client 判断</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (process.client) &#123;</span><br><span class=\"line\">  ... // 这里就是操作window对象的代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>2.将涉及到window的写在 mounted 生命周期里</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted() &#123;</span><br><span class=\"line\">\t// window ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>3.使用 no-ssr 组件</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;kafuuchino/&gt;</span><br><span class=\"line\">        &lt;no-ssrplaceholder=&quot;Loading...&quot;&gt;</span><br><span class=\"line\">            &lt;!-- 此组件仅在客户端呈现 --&gt;</span><br><span class=\"line\">            &lt;comments/&gt;</span><br><span class=\"line\">        &lt;/no-ssr&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"情况2：-第三方插件里包含window等\"><a href=\"#情况2：-第三方插件里包含window等\" class=\"headerlink\" title=\"情况2： 第三方插件里包含window等\"></a>情况2： 第三方插件里包含window等</h3><p>报错原因：还有一种就是项目里会引入很多第三方组件，这些组件里也有可能会包含window等一些服务端不支持的内容</p>\n<p>解决方案:</p>\n<blockquote>\n<p>1.将插件设置为客户端渲染<br>将 插件 文件路径配置到 nuxt.config.js 的 plugins 属性中，示例如下</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">\t //其它配置项...</span><br><span class=\"line\">\tplugins: [</span><br><span class=\"line\">\t    &#123; </span><br><span class=\"line\">\t    \tsrc: &#x27;~/plugins/kafuuchino&#x27;,</span><br><span class=\"line\">\t    \tssr: false // 此处的 ssr:false 就是将其改为非服务器端渲染</span><br><span class=\"line\">\t    &#125; </span><br><span class=\"line\">\t],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改完配置文件需要重新启动项目！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Nuxt-js-报错-window-is-not-defined-document-is-not-defined\"><a href=\"#Nuxt-js-报错-window-is-not-defined-document-is-not-defined\" class=\"headerlink\" title=\"Nuxt.js 报错 window is not defined || document is not defined\"></a>Nuxt.js 报错 window is not defined || document is not defined</h2><h3 id=\"情况1：-自己的写的函数里包含window等\"><a href=\"#情况1：-自己的写的函数里包含window等\" class=\"headerlink\" title=\"情况1： 自己的写的函数里包含window等\"></a>情况1： 自己的写的函数里包含window等</h3><p>报错原因：因为Nuxt为服务器端渲染，所以在编译打包时会区分服务端渲染还是客户端渲染(浏览器)，在vue文件中使用window对象报错的原因是，webpack将其加入了服务端脚本中，所以会报错。所以在使用时，应该判断当前代码环境是否是浏览器环境。</p>\n<p>解决方案:</p>\n<blockquote>\n<p>1.通过 process.client 判断</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (process.client) &#123;</span><br><span class=\"line\">  ... // 这里就是操作window对象的代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>2.将涉及到window的写在 mounted 生命周期里</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted() &#123;</span><br><span class=\"line\">\t// window ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>3.使用 no-ssr 组件</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;kafuuchino/&gt;</span><br><span class=\"line\">        &lt;no-ssrplaceholder=&quot;Loading...&quot;&gt;</span><br><span class=\"line\">            &lt;!-- 此组件仅在客户端呈现 --&gt;</span><br><span class=\"line\">            &lt;comments/&gt;</span><br><span class=\"line\">        &lt;/no-ssr&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"情况2：-第三方插件里包含window等\"><a href=\"#情况2：-第三方插件里包含window等\" class=\"headerlink\" title=\"情况2： 第三方插件里包含window等\"></a>情况2： 第三方插件里包含window等</h3><p>报错原因：还有一种就是项目里会引入很多第三方组件，这些组件里也有可能会包含window等一些服务端不支持的内容</p>\n<p>解决方案:</p>\n<blockquote>\n<p>1.将插件设置为客户端渲染<br>将 插件 文件路径配置到 nuxt.config.js 的 plugins 属性中，示例如下</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">\t //其它配置项...</span><br><span class=\"line\">\tplugins: [</span><br><span class=\"line\">\t    &#123; </span><br><span class=\"line\">\t    \tsrc: &#x27;~/plugins/kafuuchino&#x27;,</span><br><span class=\"line\">\t    \tssr: false // 此处的 ssr:false 就是将其改为非服务器端渲染</span><br><span class=\"line\">\t    &#125; </span><br><span class=\"line\">\t],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改完配置文件需要重新启动项目！</p>\n"},{"title":"如何利用Typescript封装本地存储","date":"2022-04-07T01:48:12.000Z","_content":"\n## 前言\n> 本地存储是前端开发过程中经常会用到的技术，但是官方api在使用上多有不便，且有些功能并没有提供给我们相应的api，比如设置过期时间等。本文无意于介绍关于本地存储概念相关的知识，旨在使用typescript封装一个好用的本地存储类。\n\n## 本地存储使用场景\n+ 用户登录后token的存储\n+ 用户信息的存储\n+ 不同页面之间的通信\n+ 项目状态管理的持久化，如redux的持久化、vuex的持久化等\n+ 性能优化等\n+ ...\n## 使用中存在的问题\n+ 官方api不是很友好（过于冗长），且都是以字符串的形式存储，存取都要进行数据类型转换\n    + localStorage.setItem(key, value)\n    + ...\n+ 无法设置过期时间\n+ 以明文的形式存储，一些相对隐私的信息用户都能很轻松的在浏览器中查看到\n+ 同源项目共享本地存储空间，可能会引起数据错乱\n## 解决方案\n将上述问题的解决方法封装在一个类中，通过简单接口的形式暴露给用户直接调用。 类中将会封装以下功能：\n\n+ 数据类型的转换\n+ 过期时间\n+ 数据加密\n+ 统一的命名规范\n\n### 功能实现\n```typescript\n// storage.ts\n \nenum StorageType {\n  l = 'localStorage',\n  s = 'sessionStorage'\n}\n \nclass MyStorage {\n  storage: Storage\n \n  constructor(type: StorageType) {\n    this.storage = type === StorageType.l ? window.localStorage : window.sessionStorage\n  }\n \n  set(\n    key: string,\n    value: any\n  ) {\n    const data = JSON.stringify(value)\n    this.storage.setItem(key, data)\n  }\n \n  get(key: string) {\n    const value = this.storage.getItem(key)\n    if (value) {\n      return JSON.parse(value)\n  }\n \n  delete(key: string) {\n    this.storage.removeItem(key)\n  }\n \n  clear() {\n    this.storage.clear()\n  }\n}\n \nconst LStorage = new MyStorage(StorageType.l)\nconst SStorage = new MyStorage(StorageType.s)\n \nexport { LStorage, SStorage }\n```\n以上代码简单的实现了本地存储的基本功能，内部完成了存取时的数据类型转换操作，使用方式如下：\n```typescript\nimport { LStorage, SStorage } from './storage'\n \n...\n \nLStorage.set('data', { name: 'zhangsan' })\nLStorage.get('data') // { name: 'zhangsan' }\n```\n### 加入过期时间\n设置过期时间的思路为：在set的时候在数据中加入expires的字段，记录数据存储的时间，get的时候将取出的expires与当前时间进行比较，如果当前时间大于expires，则表示已经过期，此时清除该数据记录，并返回null，expires类型可以是boolean类型和number类型，默认为false，即不设置过期时间，当用户设置为true时，默认过期时间为1年，当用户设置为具体的数值时，则过期时间为用户设置的数值，代码实现如下：\n```typescript\ninterface IStoredItem {\n  value: any\n  expires?: number\n}\n...\nset(\n    key: string,\n    value: any,\n    expires: boolean | number = false,\n  ) {\n    const source: IStoredItem = { value: null }\n    if (expires) {\n    // 默认设置过期时间为1年，这个可以根据实际情况进行调整\n      source.expires =\n        new Date().getTime() +\n        (expires === true ? 1000 * 60 * 60 * 24 * 365 : expires)\n    }\n    source.value = value\n    const data = JSON.stringify(source)\n    this.storage.setItem(key, data)\n  }\n   \n  get(key: string) {\n    const value = this.storage.getItem(key)\n    if (value) {\n      const source: IStoredItem = JSON.parse(value)\n      const expires = source.expires\n      const now = new Date().getTime()\n      if (expires && now > expires) {\n        this.delete(key)\n        return null\n      }\n \n      return source.value\n    }\n  }\n```\n### 加入数据加密\n加密用到了crypto-js包，在类中封装encrypt,decrypt两个私有方法来处理数据的加密和解密，当然，用户也可以通过encryption字段设置是否对数据进行加密，默认为true，即默认是有加密的。另外可通过process.env.NODE_ENV获取当前的环境，如果是开发环境则不予加密，以方便开发调试，代码实现如下：\n```typescript\nimport CryptoJS from 'crypto-js'\n \nconst SECRET_KEY = 'nkldsx@#45#VDss9'\nconst IS_DEV = process.env.NODE_ENV === 'development'\n...\nclass MyStorage {\n  ...\n   \n  private encrypt(data: string) {\n    return CryptoJS.AES.encrypt(data, SECRET_KEY).toString()\n  }\n \n  private decrypt(data: string) {\n    const bytes = CryptoJS.AES.decrypt(data, SECRET_KEY)\n    return bytes.toString(CryptoJS.enc.Utf8)\n  }\n   \n  set(\n    key: string,\n    value: any,\n    expires: boolean | number = false,\n    encryption = true\n  ) {\n    const source: IStoredItem = { value: null }\n    if (expires) {\n      source.expires =\n        new Date().getTime() +\n        (expires === true ? 1000 * 60 * 60 * 24 * 365 : expires)\n    }\n    source.value = value\n    const data = JSON.stringify(source)\n    this.storage.setItem(key, IS_DEV ? data : encryption ? this.encrypt(data) : data\n    )\n  }\n   \n  get(key: string, encryption = true) {\n    const value = this.storage.getItem(key)\n    if (value) {\n      const source: IStoredItem = JSON.parse(value)\n      const expires = source.expires\n      const now = new Date().getTime()\n      if (expires && now > expires) {\n        this.delete(key)\n        return null\n      }\n \n      return IS_DEV\n        ? source.value\n        : encryption\n        ? this.decrypt(source.value)\n        : source.value\n    }\n  }\n   \n}\n```\n### 加入命名规范\n可以通过在key前面加上一个前缀来规范命名，如项目名_版本号_key类型的合成key，这个命名规范可自由设定，可以通过一个常量设置，也可以通过获取package.json中的name和version进行拼接，代码实现如下：\n```typescript\nconst config = require('../../package.json')\n \nconst PREFIX = config.name + '_' + config.version + '_'\n \n...\nclass MyStorage {\n \n  // 合成key\n  private synthesisKey(key: string) {\n    return PREFIX + key\n  }\n   \n  ...\n   \n set(\n    key: string,\n    value: any,\n    expires: boolean | number = false,\n    encryption = true\n  ) {\n    ...\n    this.storage.setItem(\n      this.synthesisKey(key),\n      IS_DEV ? data : encryption ? this.encrypt(data) : data\n    )\n  }\n   \n  get(key: string, encryption = true) {\n    const value = this.storage.getItem(this.synthesisKey(key))\n    ...\n  }\n \n}\n```\n### 完整代码\n```typescript\nimport CryptoJS from 'crypto-js'\nconst config = require('../../package.json')\n \nenum StorageType {\n  l = 'localStorage',\n  s = 'sessionStorage'\n}\n \ninterface IStoredItem {\n  value: any\n  expires?: number\n}\n \nconst SECRET_KEY = 'nkldsx@#45#VDss9'\nconst PREFIX = config.name + '_' + config.version + '_'\nconst IS_DEV = process.env.NODE_ENV === 'development'\n \nclass MyStorage {\n  storage: Storage\n \n  constructor(type: StorageType) {\n    this.storage =\n      type === StorageType.l ? window.localStorage : window.sessionStorage\n  }\n \n  private encrypt(data: string) {\n    return CryptoJS.AES.encrypt(data, SECRET_KEY).toString()\n  }\n \n  private decrypt(data: string) {\n    const bytes = CryptoJS.AES.decrypt(data, SECRET_KEY)\n    return bytes.toString(CryptoJS.enc.Utf8)\n  }\n \n  private synthesisKey(key: string) {\n    return PREFIX + key\n  }\n \n  set(\n    key: string,\n    value: any,\n    expires: boolean | number = false,\n    encryption = true\n  ) {\n    const source: IStoredItem = { value: null }\n    if (expires) {\n      source.expires =\n        new Date().getTime() +\n        (expires === true ? 1000 * 60 * 60 * 24 * 365 : expires)\n    }\n    source.value = value\n    const data = JSON.stringify(source)\n    this.storage.setItem(\n      this.synthesisKey(key),\n      IS_DEV ? data : encryption ? this.encrypt(data) : data\n    )\n  }\n \n  get(key: string, encryption = true) {\n    const value = this.storage.getItem(this.synthesisKey(key))\n    if (value) {\n      const source: IStoredItem = JSON.parse(value)\n      const expires = source.expires\n      const now = new Date().getTime()\n      if (expires && now > expires) {\n        this.delete(key)\n        return null\n      }\n \n      return IS_DEV\n        ? source.value\n        : encryption\n        ? this.decrypt(source.value)\n        : source.value\n    }\n  }\n \n  delete(key: string) {\n    this.storage.removeItem(this.synthesisKey(key))\n  }\n \n  clear() {\n    this.storage.clear()\n  }\n}\n \nconst LStorage = new MyStorage(StorageType.l)\nconst SStorage = new MyStorage(StorageType.s)\n \nexport { LStorage, SStorage }\n```\n## 总结\n到此这篇关于如何利用Typescript封装本地存储的文章就介绍到这了,更多相关Typescript封装本地存储内容请搜索68HTML以前的文章或继续浏览下面的相关文章希望大家以后多多支持68HTML！\n\n\n\n","source":"_posts/typescript/RuHeLiYongTypeScriptFengZhuangBenDiCunCu.md","raw":"---\ntitle: 如何利用Typescript封装本地存储\ndate: 2022-04-07 09:48:12\ntags: [\"typescript\"]\ncategories: [\"TypeScript\"]\n---\n\n## 前言\n> 本地存储是前端开发过程中经常会用到的技术，但是官方api在使用上多有不便，且有些功能并没有提供给我们相应的api，比如设置过期时间等。本文无意于介绍关于本地存储概念相关的知识，旨在使用typescript封装一个好用的本地存储类。\n\n## 本地存储使用场景\n+ 用户登录后token的存储\n+ 用户信息的存储\n+ 不同页面之间的通信\n+ 项目状态管理的持久化，如redux的持久化、vuex的持久化等\n+ 性能优化等\n+ ...\n## 使用中存在的问题\n+ 官方api不是很友好（过于冗长），且都是以字符串的形式存储，存取都要进行数据类型转换\n    + localStorage.setItem(key, value)\n    + ...\n+ 无法设置过期时间\n+ 以明文的形式存储，一些相对隐私的信息用户都能很轻松的在浏览器中查看到\n+ 同源项目共享本地存储空间，可能会引起数据错乱\n## 解决方案\n将上述问题的解决方法封装在一个类中，通过简单接口的形式暴露给用户直接调用。 类中将会封装以下功能：\n\n+ 数据类型的转换\n+ 过期时间\n+ 数据加密\n+ 统一的命名规范\n\n### 功能实现\n```typescript\n// storage.ts\n \nenum StorageType {\n  l = 'localStorage',\n  s = 'sessionStorage'\n}\n \nclass MyStorage {\n  storage: Storage\n \n  constructor(type: StorageType) {\n    this.storage = type === StorageType.l ? window.localStorage : window.sessionStorage\n  }\n \n  set(\n    key: string,\n    value: any\n  ) {\n    const data = JSON.stringify(value)\n    this.storage.setItem(key, data)\n  }\n \n  get(key: string) {\n    const value = this.storage.getItem(key)\n    if (value) {\n      return JSON.parse(value)\n  }\n \n  delete(key: string) {\n    this.storage.removeItem(key)\n  }\n \n  clear() {\n    this.storage.clear()\n  }\n}\n \nconst LStorage = new MyStorage(StorageType.l)\nconst SStorage = new MyStorage(StorageType.s)\n \nexport { LStorage, SStorage }\n```\n以上代码简单的实现了本地存储的基本功能，内部完成了存取时的数据类型转换操作，使用方式如下：\n```typescript\nimport { LStorage, SStorage } from './storage'\n \n...\n \nLStorage.set('data', { name: 'zhangsan' })\nLStorage.get('data') // { name: 'zhangsan' }\n```\n### 加入过期时间\n设置过期时间的思路为：在set的时候在数据中加入expires的字段，记录数据存储的时间，get的时候将取出的expires与当前时间进行比较，如果当前时间大于expires，则表示已经过期，此时清除该数据记录，并返回null，expires类型可以是boolean类型和number类型，默认为false，即不设置过期时间，当用户设置为true时，默认过期时间为1年，当用户设置为具体的数值时，则过期时间为用户设置的数值，代码实现如下：\n```typescript\ninterface IStoredItem {\n  value: any\n  expires?: number\n}\n...\nset(\n    key: string,\n    value: any,\n    expires: boolean | number = false,\n  ) {\n    const source: IStoredItem = { value: null }\n    if (expires) {\n    // 默认设置过期时间为1年，这个可以根据实际情况进行调整\n      source.expires =\n        new Date().getTime() +\n        (expires === true ? 1000 * 60 * 60 * 24 * 365 : expires)\n    }\n    source.value = value\n    const data = JSON.stringify(source)\n    this.storage.setItem(key, data)\n  }\n   \n  get(key: string) {\n    const value = this.storage.getItem(key)\n    if (value) {\n      const source: IStoredItem = JSON.parse(value)\n      const expires = source.expires\n      const now = new Date().getTime()\n      if (expires && now > expires) {\n        this.delete(key)\n        return null\n      }\n \n      return source.value\n    }\n  }\n```\n### 加入数据加密\n加密用到了crypto-js包，在类中封装encrypt,decrypt两个私有方法来处理数据的加密和解密，当然，用户也可以通过encryption字段设置是否对数据进行加密，默认为true，即默认是有加密的。另外可通过process.env.NODE_ENV获取当前的环境，如果是开发环境则不予加密，以方便开发调试，代码实现如下：\n```typescript\nimport CryptoJS from 'crypto-js'\n \nconst SECRET_KEY = 'nkldsx@#45#VDss9'\nconst IS_DEV = process.env.NODE_ENV === 'development'\n...\nclass MyStorage {\n  ...\n   \n  private encrypt(data: string) {\n    return CryptoJS.AES.encrypt(data, SECRET_KEY).toString()\n  }\n \n  private decrypt(data: string) {\n    const bytes = CryptoJS.AES.decrypt(data, SECRET_KEY)\n    return bytes.toString(CryptoJS.enc.Utf8)\n  }\n   \n  set(\n    key: string,\n    value: any,\n    expires: boolean | number = false,\n    encryption = true\n  ) {\n    const source: IStoredItem = { value: null }\n    if (expires) {\n      source.expires =\n        new Date().getTime() +\n        (expires === true ? 1000 * 60 * 60 * 24 * 365 : expires)\n    }\n    source.value = value\n    const data = JSON.stringify(source)\n    this.storage.setItem(key, IS_DEV ? data : encryption ? this.encrypt(data) : data\n    )\n  }\n   \n  get(key: string, encryption = true) {\n    const value = this.storage.getItem(key)\n    if (value) {\n      const source: IStoredItem = JSON.parse(value)\n      const expires = source.expires\n      const now = new Date().getTime()\n      if (expires && now > expires) {\n        this.delete(key)\n        return null\n      }\n \n      return IS_DEV\n        ? source.value\n        : encryption\n        ? this.decrypt(source.value)\n        : source.value\n    }\n  }\n   \n}\n```\n### 加入命名规范\n可以通过在key前面加上一个前缀来规范命名，如项目名_版本号_key类型的合成key，这个命名规范可自由设定，可以通过一个常量设置，也可以通过获取package.json中的name和version进行拼接，代码实现如下：\n```typescript\nconst config = require('../../package.json')\n \nconst PREFIX = config.name + '_' + config.version + '_'\n \n...\nclass MyStorage {\n \n  // 合成key\n  private synthesisKey(key: string) {\n    return PREFIX + key\n  }\n   \n  ...\n   \n set(\n    key: string,\n    value: any,\n    expires: boolean | number = false,\n    encryption = true\n  ) {\n    ...\n    this.storage.setItem(\n      this.synthesisKey(key),\n      IS_DEV ? data : encryption ? this.encrypt(data) : data\n    )\n  }\n   \n  get(key: string, encryption = true) {\n    const value = this.storage.getItem(this.synthesisKey(key))\n    ...\n  }\n \n}\n```\n### 完整代码\n```typescript\nimport CryptoJS from 'crypto-js'\nconst config = require('../../package.json')\n \nenum StorageType {\n  l = 'localStorage',\n  s = 'sessionStorage'\n}\n \ninterface IStoredItem {\n  value: any\n  expires?: number\n}\n \nconst SECRET_KEY = 'nkldsx@#45#VDss9'\nconst PREFIX = config.name + '_' + config.version + '_'\nconst IS_DEV = process.env.NODE_ENV === 'development'\n \nclass MyStorage {\n  storage: Storage\n \n  constructor(type: StorageType) {\n    this.storage =\n      type === StorageType.l ? window.localStorage : window.sessionStorage\n  }\n \n  private encrypt(data: string) {\n    return CryptoJS.AES.encrypt(data, SECRET_KEY).toString()\n  }\n \n  private decrypt(data: string) {\n    const bytes = CryptoJS.AES.decrypt(data, SECRET_KEY)\n    return bytes.toString(CryptoJS.enc.Utf8)\n  }\n \n  private synthesisKey(key: string) {\n    return PREFIX + key\n  }\n \n  set(\n    key: string,\n    value: any,\n    expires: boolean | number = false,\n    encryption = true\n  ) {\n    const source: IStoredItem = { value: null }\n    if (expires) {\n      source.expires =\n        new Date().getTime() +\n        (expires === true ? 1000 * 60 * 60 * 24 * 365 : expires)\n    }\n    source.value = value\n    const data = JSON.stringify(source)\n    this.storage.setItem(\n      this.synthesisKey(key),\n      IS_DEV ? data : encryption ? this.encrypt(data) : data\n    )\n  }\n \n  get(key: string, encryption = true) {\n    const value = this.storage.getItem(this.synthesisKey(key))\n    if (value) {\n      const source: IStoredItem = JSON.parse(value)\n      const expires = source.expires\n      const now = new Date().getTime()\n      if (expires && now > expires) {\n        this.delete(key)\n        return null\n      }\n \n      return IS_DEV\n        ? source.value\n        : encryption\n        ? this.decrypt(source.value)\n        : source.value\n    }\n  }\n \n  delete(key: string) {\n    this.storage.removeItem(this.synthesisKey(key))\n  }\n \n  clear() {\n    this.storage.clear()\n  }\n}\n \nconst LStorage = new MyStorage(StorageType.l)\nconst SStorage = new MyStorage(StorageType.s)\n \nexport { LStorage, SStorage }\n```\n## 总结\n到此这篇关于如何利用Typescript封装本地存储的文章就介绍到这了,更多相关Typescript封装本地存储内容请搜索68HTML以前的文章或继续浏览下面的相关文章希望大家以后多多支持68HTML！\n\n\n\n","slug":"typescript/RuHeLiYongTypeScriptFengZhuangBenDiCunCu","published":1,"updated":"2022-04-07T07:02:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2vixl8q0011d8j063fzfhxb","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>本地存储是前端开发过程中经常会用到的技术，但是官方api在使用上多有不便，且有些功能并没有提供给我们相应的api，比如设置过期时间等。本文无意于介绍关于本地存储概念相关的知识，旨在使用typescript封装一个好用的本地存储类。</p>\n</blockquote>\n<h2 id=\"本地存储使用场景\"><a href=\"#本地存储使用场景\" class=\"headerlink\" title=\"本地存储使用场景\"></a>本地存储使用场景</h2><ul>\n<li><p>用户登录后token的存储</p>\n</li>\n<li><p>用户信息的存储</p>\n</li>\n<li><p>不同页面之间的通信</p>\n</li>\n<li><p>项目状态管理的持久化，如redux的持久化、vuex的持久化等</p>\n</li>\n<li><p>性能优化等</p>\n</li>\n<li><p>…</p>\n<h2 id=\"使用中存在的问题\"><a href=\"#使用中存在的问题\" class=\"headerlink\" title=\"使用中存在的问题\"></a>使用中存在的问题</h2></li>\n<li><p>官方api不是很友好（过于冗长），且都是以字符串的形式存储，存取都要进行数据类型转换</p>\n<ul>\n<li>localStorage.setItem(key, value)</li>\n<li>…</li>\n</ul>\n</li>\n<li><p>无法设置过期时间</p>\n</li>\n<li><p>以明文的形式存储，一些相对隐私的信息用户都能很轻松的在浏览器中查看到</p>\n</li>\n<li><p>同源项目共享本地存储空间，可能会引起数据错乱</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>将上述问题的解决方法封装在一个类中，通过简单接口的形式暴露给用户直接调用。 类中将会封装以下功能：</p>\n</li>\n<li><p>数据类型的转换</p>\n</li>\n<li><p>过期时间</p>\n</li>\n<li><p>数据加密</p>\n</li>\n<li><p>统一的命名规范</p>\n</li>\n</ul>\n<h3 id=\"功能实现\"><a href=\"#功能实现\" class=\"headerlink\" title=\"功能实现\"></a>功能实现</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// storage.ts</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">StorageType</span> &#123;</span><br><span class=\"line\">  l = <span class=\"string\">&#x27;localStorage&#x27;</span>,</span><br><span class=\"line\">  s = <span class=\"string\">&#x27;sessionStorage&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyStorage</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">storage</span>: <span class=\"title class_\">Storage</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">type</span>: StorageType</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span> = <span class=\"keyword\">type</span> === <span class=\"title class_\">StorageType</span>.<span class=\"property\">l</span> ? <span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span> : <span class=\"variable language_\">window</span>.<span class=\"property\">sessionStorage</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"title function_\">set</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    key: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    value: <span class=\"built_in\">any</span></span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(value)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">setItem</span>(key, data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\">key: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">getItem</span>(key)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"title function_\">delete</span>(<span class=\"params\">key: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">removeItem</span>(key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"title function_\">clear</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">clear</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">LStorage</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">MyStorage</span>(<span class=\"title class_\">StorageType</span>.<span class=\"property\">l</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">SStorage</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">MyStorage</span>(<span class=\"title class_\">StorageType</span>.<span class=\"property\">s</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; <span class=\"title class_\">LStorage</span>, <span class=\"title class_\">SStorage</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码简单的实现了本地存储的基本功能，内部完成了存取时的数据类型转换操作，使用方式如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">LStorage</span>, <span class=\"title class_\">SStorage</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./storage&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">...</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"title class_\">LStorage</span>.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;data&#x27;</span>, &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhangsan&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"title class_\">LStorage</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;data&#x27;</span>) <span class=\"comment\">// &#123; name: &#x27;zhangsan&#x27; &#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"加入过期时间\"><a href=\"#加入过期时间\" class=\"headerlink\" title=\"加入过期时间\"></a>加入过期时间</h3><p>设置过期时间的思路为：在set的时候在数据中加入expires的字段，记录数据存储的时间，get的时候将取出的expires与当前时间进行比较，如果当前时间大于expires，则表示已经过期，此时清除该数据记录，并返回null，expires类型可以是boolean类型和number类型，默认为false，即不设置过期时间，当用户设置为true时，默认过期时间为1年，当用户设置为具体的数值时，则过期时间为用户设置的数值，代码实现如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IStoredItem</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"built_in\">any</span></span><br><span class=\"line\">  expires?: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"title function_\">set</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    key: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    value: <span class=\"built_in\">any</span>,</span></span><br><span class=\"line\"><span class=\"params\">    expires: <span class=\"built_in\">boolean</span> | <span class=\"built_in\">number</span> = <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">source</span>: <span class=\"title class_\">IStoredItem</span> = &#123; <span class=\"attr\">value</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (expires) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 默认设置过期时间为1年，这个可以根据实际情况进行调整</span></span><br><span class=\"line\">      source.<span class=\"property\">expires</span> =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>() +</span><br><span class=\"line\">        (expires === <span class=\"literal\">true</span> ? <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">365</span> : expires)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    source.<span class=\"property\">value</span> = value</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(source)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">setItem</span>(key, data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\">key: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">getItem</span>(key)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">source</span>: <span class=\"title class_\">IStoredItem</span> = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(value)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> expires = source.<span class=\"property\">expires</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> now = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (expires &amp;&amp; now &gt; expires) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">delete</span>(key)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">return</span> source.<span class=\"property\">value</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"加入数据加密\"><a href=\"#加入数据加密\" class=\"headerlink\" title=\"加入数据加密\"></a>加入数据加密</h3><p>加密用到了crypto-js包，在类中封装encrypt,decrypt两个私有方法来处理数据的加密和解密，当然，用户也可以通过encryption字段设置是否对数据进行加密，默认为true，即默认是有加密的。另外可通过process.env.NODE_ENV获取当前的环境，如果是开发环境则不予加密，以方便开发调试，代码实现如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">CryptoJS</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;crypto-js&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">SECRET_KEY</span> = <span class=\"string\">&#x27;nkldsx@#45#VDss9&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">IS_DEV</span> = process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&#x27;development&#x27;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyStorage</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">encrypt</span>(<span class=\"params\">data: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">CryptoJS</span>.<span class=\"property\">AES</span>.<span class=\"title function_\">encrypt</span>(data, <span class=\"variable constant_\">SECRET_KEY</span>).<span class=\"title function_\">toString</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">decrypt</span>(<span class=\"params\">data: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> bytes = <span class=\"title class_\">CryptoJS</span>.<span class=\"property\">AES</span>.<span class=\"title function_\">decrypt</span>(data, <span class=\"variable constant_\">SECRET_KEY</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytes.<span class=\"title function_\">toString</span>(<span class=\"title class_\">CryptoJS</span>.<span class=\"property\">enc</span>.<span class=\"property\">Utf8</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"title function_\">set</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    key: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    value: <span class=\"built_in\">any</span>,</span></span><br><span class=\"line\"><span class=\"params\">    expires: <span class=\"built_in\">boolean</span> | <span class=\"built_in\">number</span> = <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"params\">    encryption = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">source</span>: <span class=\"title class_\">IStoredItem</span> = &#123; <span class=\"attr\">value</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (expires) &#123;</span><br><span class=\"line\">      source.<span class=\"property\">expires</span> =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>() +</span><br><span class=\"line\">        (expires === <span class=\"literal\">true</span> ? <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">365</span> : expires)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    source.<span class=\"property\">value</span> = value</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(source)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">setItem</span>(key, <span class=\"variable constant_\">IS_DEV</span> ? data : encryption ? <span class=\"variable language_\">this</span>.<span class=\"title function_\">encrypt</span>(data) : data</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\">key: <span class=\"built_in\">string</span>, encryption = <span class=\"literal\">true</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">getItem</span>(key)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">source</span>: <span class=\"title class_\">IStoredItem</span> = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(value)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> expires = source.<span class=\"property\">expires</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> now = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (expires &amp;&amp; now &gt; expires) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">delete</span>(key)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable constant_\">IS_DEV</span></span><br><span class=\"line\">        ? source.<span class=\"property\">value</span></span><br><span class=\"line\">        : encryption</span><br><span class=\"line\">        ? <span class=\"variable language_\">this</span>.<span class=\"title function_\">decrypt</span>(source.<span class=\"property\">value</span>)</span><br><span class=\"line\">        : source.<span class=\"property\">value</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"加入命名规范\"><a href=\"#加入命名规范\" class=\"headerlink\" title=\"加入命名规范\"></a>加入命名规范</h3><p>可以通过在key前面加上一个前缀来规范命名，如项目名_版本号_key类型的合成key，这个命名规范可自由设定，可以通过一个常量设置，也可以通过获取package.json中的name和version进行拼接，代码实现如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../../package.json&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PREFIX</span> = config.<span class=\"property\">name</span> + <span class=\"string\">&#x27;_&#x27;</span> + config.<span class=\"property\">version</span> + <span class=\"string\">&#x27;_&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyStorage</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 合成key</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">synthesisKey</span>(<span class=\"params\">key: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable constant_\">PREFIX</span> + key</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">  ...</span><br><span class=\"line\">   </span><br><span class=\"line\"> <span class=\"title function_\">set</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    key: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    value: <span class=\"built_in\">any</span>,</span></span><br><span class=\"line\"><span class=\"params\">    expires: <span class=\"built_in\">boolean</span> | <span class=\"built_in\">number</span> = <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"params\">    encryption = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">setItem</span>(</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">synthesisKey</span>(key),</span><br><span class=\"line\">      <span class=\"variable constant_\">IS_DEV</span> ? data : encryption ? <span class=\"variable language_\">this</span>.<span class=\"title function_\">encrypt</span>(data) : data</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\">key: <span class=\"built_in\">string</span>, encryption = <span class=\"literal\">true</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">getItem</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">synthesisKey</span>(key))</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">CryptoJS</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;crypto-js&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../../package.json&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">StorageType</span> &#123;</span><br><span class=\"line\">  l = <span class=\"string\">&#x27;localStorage&#x27;</span>,</span><br><span class=\"line\">  s = <span class=\"string\">&#x27;sessionStorage&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IStoredItem</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"built_in\">any</span></span><br><span class=\"line\">  expires?: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">SECRET_KEY</span> = <span class=\"string\">&#x27;nkldsx@#45#VDss9&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PREFIX</span> = config.<span class=\"property\">name</span> + <span class=\"string\">&#x27;_&#x27;</span> + config.<span class=\"property\">version</span> + <span class=\"string\">&#x27;_&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">IS_DEV</span> = process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&#x27;development&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyStorage</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">storage</span>: <span class=\"title class_\">Storage</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">type</span>: StorageType</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span> =</span><br><span class=\"line\">      <span class=\"keyword\">type</span> === <span class=\"title class_\">StorageType</span>.<span class=\"property\">l</span> ? <span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span> : <span class=\"variable language_\">window</span>.<span class=\"property\">sessionStorage</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">encrypt</span>(<span class=\"params\">data: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">CryptoJS</span>.<span class=\"property\">AES</span>.<span class=\"title function_\">encrypt</span>(data, <span class=\"variable constant_\">SECRET_KEY</span>).<span class=\"title function_\">toString</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">decrypt</span>(<span class=\"params\">data: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> bytes = <span class=\"title class_\">CryptoJS</span>.<span class=\"property\">AES</span>.<span class=\"title function_\">decrypt</span>(data, <span class=\"variable constant_\">SECRET_KEY</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytes.<span class=\"title function_\">toString</span>(<span class=\"title class_\">CryptoJS</span>.<span class=\"property\">enc</span>.<span class=\"property\">Utf8</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">synthesisKey</span>(<span class=\"params\">key: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable constant_\">PREFIX</span> + key</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"title function_\">set</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    key: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    value: <span class=\"built_in\">any</span>,</span></span><br><span class=\"line\"><span class=\"params\">    expires: <span class=\"built_in\">boolean</span> | <span class=\"built_in\">number</span> = <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"params\">    encryption = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">source</span>: <span class=\"title class_\">IStoredItem</span> = &#123; <span class=\"attr\">value</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (expires) &#123;</span><br><span class=\"line\">      source.<span class=\"property\">expires</span> =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>() +</span><br><span class=\"line\">        (expires === <span class=\"literal\">true</span> ? <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">365</span> : expires)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    source.<span class=\"property\">value</span> = value</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(source)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">setItem</span>(</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">synthesisKey</span>(key),</span><br><span class=\"line\">      <span class=\"variable constant_\">IS_DEV</span> ? data : encryption ? <span class=\"variable language_\">this</span>.<span class=\"title function_\">encrypt</span>(data) : data</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\">key: <span class=\"built_in\">string</span>, encryption = <span class=\"literal\">true</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">getItem</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">synthesisKey</span>(key))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">source</span>: <span class=\"title class_\">IStoredItem</span> = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(value)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> expires = source.<span class=\"property\">expires</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> now = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (expires &amp;&amp; now &gt; expires) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">delete</span>(key)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable constant_\">IS_DEV</span></span><br><span class=\"line\">        ? source.<span class=\"property\">value</span></span><br><span class=\"line\">        : encryption</span><br><span class=\"line\">        ? <span class=\"variable language_\">this</span>.<span class=\"title function_\">decrypt</span>(source.<span class=\"property\">value</span>)</span><br><span class=\"line\">        : source.<span class=\"property\">value</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"title function_\">delete</span>(<span class=\"params\">key: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">removeItem</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">synthesisKey</span>(key))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"title function_\">clear</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">clear</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">LStorage</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">MyStorage</span>(<span class=\"title class_\">StorageType</span>.<span class=\"property\">l</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">SStorage</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">MyStorage</span>(<span class=\"title class_\">StorageType</span>.<span class=\"property\">s</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; <span class=\"title class_\">LStorage</span>, <span class=\"title class_\">SStorage</span> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到此这篇关于如何利用Typescript封装本地存储的文章就介绍到这了,更多相关Typescript封装本地存储内容请搜索68HTML以前的文章或继续浏览下面的相关文章希望大家以后多多支持68HTML！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>本地存储是前端开发过程中经常会用到的技术，但是官方api在使用上多有不便，且有些功能并没有提供给我们相应的api，比如设置过期时间等。本文无意于介绍关于本地存储概念相关的知识，旨在使用typescript封装一个好用的本地存储类。</p>\n</blockquote>\n<h2 id=\"本地存储使用场景\"><a href=\"#本地存储使用场景\" class=\"headerlink\" title=\"本地存储使用场景\"></a>本地存储使用场景</h2><ul>\n<li><p>用户登录后token的存储</p>\n</li>\n<li><p>用户信息的存储</p>\n</li>\n<li><p>不同页面之间的通信</p>\n</li>\n<li><p>项目状态管理的持久化，如redux的持久化、vuex的持久化等</p>\n</li>\n<li><p>性能优化等</p>\n</li>\n<li><p>…</p>\n<h2 id=\"使用中存在的问题\"><a href=\"#使用中存在的问题\" class=\"headerlink\" title=\"使用中存在的问题\"></a>使用中存在的问题</h2></li>\n<li><p>官方api不是很友好（过于冗长），且都是以字符串的形式存储，存取都要进行数据类型转换</p>\n<ul>\n<li>localStorage.setItem(key, value)</li>\n<li>…</li>\n</ul>\n</li>\n<li><p>无法设置过期时间</p>\n</li>\n<li><p>以明文的形式存储，一些相对隐私的信息用户都能很轻松的在浏览器中查看到</p>\n</li>\n<li><p>同源项目共享本地存储空间，可能会引起数据错乱</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>将上述问题的解决方法封装在一个类中，通过简单接口的形式暴露给用户直接调用。 类中将会封装以下功能：</p>\n</li>\n<li><p>数据类型的转换</p>\n</li>\n<li><p>过期时间</p>\n</li>\n<li><p>数据加密</p>\n</li>\n<li><p>统一的命名规范</p>\n</li>\n</ul>\n<h3 id=\"功能实现\"><a href=\"#功能实现\" class=\"headerlink\" title=\"功能实现\"></a>功能实现</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// storage.ts</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">StorageType</span> &#123;</span><br><span class=\"line\">  l = <span class=\"string\">&#x27;localStorage&#x27;</span>,</span><br><span class=\"line\">  s = <span class=\"string\">&#x27;sessionStorage&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyStorage</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">storage</span>: <span class=\"title class_\">Storage</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">type</span>: StorageType</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span> = <span class=\"keyword\">type</span> === <span class=\"title class_\">StorageType</span>.<span class=\"property\">l</span> ? <span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span> : <span class=\"variable language_\">window</span>.<span class=\"property\">sessionStorage</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"title function_\">set</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    key: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    value: <span class=\"built_in\">any</span></span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(value)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">setItem</span>(key, data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\">key: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">getItem</span>(key)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"title function_\">delete</span>(<span class=\"params\">key: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">removeItem</span>(key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"title function_\">clear</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">clear</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">LStorage</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">MyStorage</span>(<span class=\"title class_\">StorageType</span>.<span class=\"property\">l</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">SStorage</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">MyStorage</span>(<span class=\"title class_\">StorageType</span>.<span class=\"property\">s</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; <span class=\"title class_\">LStorage</span>, <span class=\"title class_\">SStorage</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码简单的实现了本地存储的基本功能，内部完成了存取时的数据类型转换操作，使用方式如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">LStorage</span>, <span class=\"title class_\">SStorage</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./storage&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">...</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"title class_\">LStorage</span>.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;data&#x27;</span>, &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhangsan&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"title class_\">LStorage</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;data&#x27;</span>) <span class=\"comment\">// &#123; name: &#x27;zhangsan&#x27; &#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"加入过期时间\"><a href=\"#加入过期时间\" class=\"headerlink\" title=\"加入过期时间\"></a>加入过期时间</h3><p>设置过期时间的思路为：在set的时候在数据中加入expires的字段，记录数据存储的时间，get的时候将取出的expires与当前时间进行比较，如果当前时间大于expires，则表示已经过期，此时清除该数据记录，并返回null，expires类型可以是boolean类型和number类型，默认为false，即不设置过期时间，当用户设置为true时，默认过期时间为1年，当用户设置为具体的数值时，则过期时间为用户设置的数值，代码实现如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IStoredItem</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"built_in\">any</span></span><br><span class=\"line\">  expires?: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"title function_\">set</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    key: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    value: <span class=\"built_in\">any</span>,</span></span><br><span class=\"line\"><span class=\"params\">    expires: <span class=\"built_in\">boolean</span> | <span class=\"built_in\">number</span> = <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">source</span>: <span class=\"title class_\">IStoredItem</span> = &#123; <span class=\"attr\">value</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (expires) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 默认设置过期时间为1年，这个可以根据实际情况进行调整</span></span><br><span class=\"line\">      source.<span class=\"property\">expires</span> =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>() +</span><br><span class=\"line\">        (expires === <span class=\"literal\">true</span> ? <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">365</span> : expires)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    source.<span class=\"property\">value</span> = value</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(source)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">setItem</span>(key, data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\">key: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">getItem</span>(key)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">source</span>: <span class=\"title class_\">IStoredItem</span> = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(value)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> expires = source.<span class=\"property\">expires</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> now = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (expires &amp;&amp; now &gt; expires) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">delete</span>(key)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">return</span> source.<span class=\"property\">value</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"加入数据加密\"><a href=\"#加入数据加密\" class=\"headerlink\" title=\"加入数据加密\"></a>加入数据加密</h3><p>加密用到了crypto-js包，在类中封装encrypt,decrypt两个私有方法来处理数据的加密和解密，当然，用户也可以通过encryption字段设置是否对数据进行加密，默认为true，即默认是有加密的。另外可通过process.env.NODE_ENV获取当前的环境，如果是开发环境则不予加密，以方便开发调试，代码实现如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">CryptoJS</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;crypto-js&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">SECRET_KEY</span> = <span class=\"string\">&#x27;nkldsx@#45#VDss9&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">IS_DEV</span> = process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&#x27;development&#x27;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyStorage</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">encrypt</span>(<span class=\"params\">data: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">CryptoJS</span>.<span class=\"property\">AES</span>.<span class=\"title function_\">encrypt</span>(data, <span class=\"variable constant_\">SECRET_KEY</span>).<span class=\"title function_\">toString</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">decrypt</span>(<span class=\"params\">data: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> bytes = <span class=\"title class_\">CryptoJS</span>.<span class=\"property\">AES</span>.<span class=\"title function_\">decrypt</span>(data, <span class=\"variable constant_\">SECRET_KEY</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytes.<span class=\"title function_\">toString</span>(<span class=\"title class_\">CryptoJS</span>.<span class=\"property\">enc</span>.<span class=\"property\">Utf8</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"title function_\">set</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    key: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    value: <span class=\"built_in\">any</span>,</span></span><br><span class=\"line\"><span class=\"params\">    expires: <span class=\"built_in\">boolean</span> | <span class=\"built_in\">number</span> = <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"params\">    encryption = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">source</span>: <span class=\"title class_\">IStoredItem</span> = &#123; <span class=\"attr\">value</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (expires) &#123;</span><br><span class=\"line\">      source.<span class=\"property\">expires</span> =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>() +</span><br><span class=\"line\">        (expires === <span class=\"literal\">true</span> ? <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">365</span> : expires)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    source.<span class=\"property\">value</span> = value</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(source)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">setItem</span>(key, <span class=\"variable constant_\">IS_DEV</span> ? data : encryption ? <span class=\"variable language_\">this</span>.<span class=\"title function_\">encrypt</span>(data) : data</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\">key: <span class=\"built_in\">string</span>, encryption = <span class=\"literal\">true</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">getItem</span>(key)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">source</span>: <span class=\"title class_\">IStoredItem</span> = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(value)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> expires = source.<span class=\"property\">expires</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> now = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (expires &amp;&amp; now &gt; expires) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">delete</span>(key)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable constant_\">IS_DEV</span></span><br><span class=\"line\">        ? source.<span class=\"property\">value</span></span><br><span class=\"line\">        : encryption</span><br><span class=\"line\">        ? <span class=\"variable language_\">this</span>.<span class=\"title function_\">decrypt</span>(source.<span class=\"property\">value</span>)</span><br><span class=\"line\">        : source.<span class=\"property\">value</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"加入命名规范\"><a href=\"#加入命名规范\" class=\"headerlink\" title=\"加入命名规范\"></a>加入命名规范</h3><p>可以通过在key前面加上一个前缀来规范命名，如项目名_版本号_key类型的合成key，这个命名规范可自由设定，可以通过一个常量设置，也可以通过获取package.json中的name和version进行拼接，代码实现如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../../package.json&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PREFIX</span> = config.<span class=\"property\">name</span> + <span class=\"string\">&#x27;_&#x27;</span> + config.<span class=\"property\">version</span> + <span class=\"string\">&#x27;_&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyStorage</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 合成key</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">synthesisKey</span>(<span class=\"params\">key: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable constant_\">PREFIX</span> + key</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">  ...</span><br><span class=\"line\">   </span><br><span class=\"line\"> <span class=\"title function_\">set</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    key: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    value: <span class=\"built_in\">any</span>,</span></span><br><span class=\"line\"><span class=\"params\">    expires: <span class=\"built_in\">boolean</span> | <span class=\"built_in\">number</span> = <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"params\">    encryption = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">setItem</span>(</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">synthesisKey</span>(key),</span><br><span class=\"line\">      <span class=\"variable constant_\">IS_DEV</span> ? data : encryption ? <span class=\"variable language_\">this</span>.<span class=\"title function_\">encrypt</span>(data) : data</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\">key: <span class=\"built_in\">string</span>, encryption = <span class=\"literal\">true</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">getItem</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">synthesisKey</span>(key))</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">CryptoJS</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;crypto-js&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../../package.json&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">StorageType</span> &#123;</span><br><span class=\"line\">  l = <span class=\"string\">&#x27;localStorage&#x27;</span>,</span><br><span class=\"line\">  s = <span class=\"string\">&#x27;sessionStorage&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IStoredItem</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"built_in\">any</span></span><br><span class=\"line\">  expires?: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">SECRET_KEY</span> = <span class=\"string\">&#x27;nkldsx@#45#VDss9&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PREFIX</span> = config.<span class=\"property\">name</span> + <span class=\"string\">&#x27;_&#x27;</span> + config.<span class=\"property\">version</span> + <span class=\"string\">&#x27;_&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">IS_DEV</span> = process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&#x27;development&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyStorage</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">storage</span>: <span class=\"title class_\">Storage</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">type</span>: StorageType</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span> =</span><br><span class=\"line\">      <span class=\"keyword\">type</span> === <span class=\"title class_\">StorageType</span>.<span class=\"property\">l</span> ? <span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span> : <span class=\"variable language_\">window</span>.<span class=\"property\">sessionStorage</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">encrypt</span>(<span class=\"params\">data: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">CryptoJS</span>.<span class=\"property\">AES</span>.<span class=\"title function_\">encrypt</span>(data, <span class=\"variable constant_\">SECRET_KEY</span>).<span class=\"title function_\">toString</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">decrypt</span>(<span class=\"params\">data: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> bytes = <span class=\"title class_\">CryptoJS</span>.<span class=\"property\">AES</span>.<span class=\"title function_\">decrypt</span>(data, <span class=\"variable constant_\">SECRET_KEY</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytes.<span class=\"title function_\">toString</span>(<span class=\"title class_\">CryptoJS</span>.<span class=\"property\">enc</span>.<span class=\"property\">Utf8</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">synthesisKey</span>(<span class=\"params\">key: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable constant_\">PREFIX</span> + key</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"title function_\">set</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    key: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    value: <span class=\"built_in\">any</span>,</span></span><br><span class=\"line\"><span class=\"params\">    expires: <span class=\"built_in\">boolean</span> | <span class=\"built_in\">number</span> = <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"params\">    encryption = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">source</span>: <span class=\"title class_\">IStoredItem</span> = &#123; <span class=\"attr\">value</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (expires) &#123;</span><br><span class=\"line\">      source.<span class=\"property\">expires</span> =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>() +</span><br><span class=\"line\">        (expires === <span class=\"literal\">true</span> ? <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">365</span> : expires)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    source.<span class=\"property\">value</span> = value</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(source)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">setItem</span>(</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">synthesisKey</span>(key),</span><br><span class=\"line\">      <span class=\"variable constant_\">IS_DEV</span> ? data : encryption ? <span class=\"variable language_\">this</span>.<span class=\"title function_\">encrypt</span>(data) : data</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\">key: <span class=\"built_in\">string</span>, encryption = <span class=\"literal\">true</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">getItem</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">synthesisKey</span>(key))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">source</span>: <span class=\"title class_\">IStoredItem</span> = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(value)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> expires = source.<span class=\"property\">expires</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> now = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (expires &amp;&amp; now &gt; expires) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">delete</span>(key)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable constant_\">IS_DEV</span></span><br><span class=\"line\">        ? source.<span class=\"property\">value</span></span><br><span class=\"line\">        : encryption</span><br><span class=\"line\">        ? <span class=\"variable language_\">this</span>.<span class=\"title function_\">decrypt</span>(source.<span class=\"property\">value</span>)</span><br><span class=\"line\">        : source.<span class=\"property\">value</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"title function_\">delete</span>(<span class=\"params\">key: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">removeItem</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">synthesisKey</span>(key))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"title function_\">clear</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">clear</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">LStorage</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">MyStorage</span>(<span class=\"title class_\">StorageType</span>.<span class=\"property\">l</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">SStorage</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">MyStorage</span>(<span class=\"title class_\">StorageType</span>.<span class=\"property\">s</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; <span class=\"title class_\">LStorage</span>, <span class=\"title class_\">SStorage</span> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到此这篇关于如何利用Typescript封装本地存储的文章就介绍到这了,更多相关Typescript封装本地存储内容请搜索68HTML以前的文章或继续浏览下面的相关文章希望大家以后多多支持68HTML！</p>\n"},{"title":"微信小程序中wxs文件的一些妙用分享","author":"68HTML","date":"2022-04-07T01:19:55.000Z","_content":"## 前言\nwxs文件是小程序中的逻辑文件，它和wxml结合使用。\n\n不同于js， wxs可以直接作用到视图层，而不需要进行视图层和逻辑层的setData数据交互；\n\n因为这个特性，wxs非常适合应用于优化小程序的频繁交互操作中；\n## 应用\n### 过滤器\n在IOS环境中wxs的运行速度要远高于js，在android中两者表现相当。\n\n使用wxs作为过滤器也可以一定幅度提升性能；让我们来看一个过滤器来了解其语法。\n\nwxs文件:\n```\nvar toDecimal2 = function (x) {\n  var f = parseFloat(x);\n  if (isNaN(f)) {\n    return '0.00'\n  }\n  var f = Math.round(x * 100) / 100;\n  var s = f.toString();\n  var rs = s.indexOf('.');\n  if (rs < 0) {\n    rs = s.length;\n    s += '.';\n  }\n  while (s.length <= rs + 2) {\n    s += '0';\n  }\n  return s;\n}\nmodule.exports = toDecimal2\n```\n上面的代码实现了数字保留两位小数的功能。\n\nwxml文件：\n```\n<wxs src=\"./filter.wxs\" module=\"filter\"></wxs>\n<text>{{filter(1)}}</text>\n```\n基本语法：在视图文件中通过wxs标签引入，module值是自定义命名，之后在wxml中可以通过filter调用方法\n\n上面的代码展示了 wxs的运行逻辑，让我们可以像函数一样调用wxs中的方法；\n\n下面再看一下wxs针对wxml页面事件中的表现。\n### 拖拽\n使用交互时（拖拽、上下滑动、左右侧滑等）如果依靠js逻辑层，会需要大量、频繁的数据通信。卡顿是不可避免的；\n\n使用wxs文件替代交互，不需要频繁使用setData导致实时大量的数据通信,从而节省性能。\n\n下面展示一个拖拽例子\n\nwxs文件：\n```\nfunction touchstart(event) {\n  var touch = event.touches[0] || event.changedTouches[0]\n  startX = touch.pageX\n  startY = touch.pageY\n}\n```\n事件参数event和js中的事件event内容中touches和changedTouches属性一致\n```\nfunction touchmove(event, ins) {\n  var touch = event.touches[0] || event.changedTouches[0]\n  ins.selectComponent('.div').setStyle({\n    left: startX - touch.pageX + 'px',\n    top: startY - touch.pageY  + 'px'\n  })\n}\n```\nins(第二个参数)为触发事件的视图层wxml上下文。可以查找页面所有元素并设置style,class(足够完成交互效果)\n\n注意：在参数event中同样有一个上下文实例instance；event中的实例instance作用范围是触发事件的元素内，而事件的ins参数作用范围是触发事件的组件内。\n```\nmodule.exports = {\n  touchstart: touchstart,\n  touchmove: touchmove,\n}\n```\n最后将方法抛出去，给wxml文件引用。\n\nwxml文件\n```\n<wxs module=\"action\" src=\"./movable.wxs\"></wxs> \n<view class=\"div\" bindtouchstart=\"{{action.touchstart}}\" bindtouchmove=\"{{action.touchmove}}\"></view>\n```\n上面的例子，解释了事件的基本交互用法。\n### 文件之中相互传参\n在事件交互中，少不了需要各个文件之中传递参数。 下面是比较常用的几种\n### wxs传参到js逻辑层\nwxs文件中：\n```\nvar dragStart = function (e, ins) {\n    ins.callMethod('callback','sldkfj')\n}\n```\njs文件中：\n```\ncallback(e){\n    console.log(e)\n}\n// sldkfj\n```\n使用callMethod方法，可以执行js中的callback方法。也可以实现传参；\n\n！！！callMethod不支持传回调函数*\n### js逻辑层传参到wxs文件\njs文件中：\n```\nhandler(e){\n    this.setData({a:1})\n}\n```\nwxml文件：\n```\n<wxs module=\"action\" src=\"./movable.wxs\"></wxs> \n<view change:prop=\"{{action.change}}\" prop=\"{{a}}\"></view>\n```\nwxs文件中：\n```\nchange(newValue,oldValue){}\n```\njs文件中的参数传递到wxs需要通过wxml文件中转。\n\njs文件触发handler事件，改变a的值之后，最新的a传递到wxml中。\n\nwxml中prop改变会触发wxs中的change事件。change中则会接收到最新prop值\n### wxs中获取dataset(wxs中获取wxml数据）\nwxs中代码\n```javascript\nvar dragStart = function (e) {\n  var index = e.currentTarget.dataset.index;\n  var index = e.instance.getDataset().index;\n}\n```\n上面有提到e.instance是当前触发事件的元素实例。\n\n所以e.instance.getDataset()获取的是当前触发事件的dataset数据集\n### 注意点\nwxs和js为不同的两个脚本语言。但是语法和es5基本相同，确又不支持es6语法； getState 在多元素交互中非常实用，欢迎探索。\n\n不知道是否是支持的语法可以跳转官网文档； [wxs运算符、语句、基础类库、数据类型](https://developers.weixin.qq.com/miniprogram/dev/reference/wxs/05statement.html \"wxs运算符、语句、基础类库、数据类型\")\n## 总结\n到此这篇关于微信小程序中wxs文件的一些妙用的文章就介绍到这了,更多相关微信小程序wxs文件妙用内容请搜索68HTML以前的文章或继续浏览下面的相关文章希望大家以后多多支持68HTML！\n","source":"_posts/weChat/WeiXinXiaoChengXuZhongWXSWenJianDeYiXieMiaoYongFenXiang.md","raw":"title: 微信小程序中wxs文件的一些妙用分享\nauthor: 68HTML\ndate: 2022-04-07 09:19:55\ntags: [\"微信小程序\",\"wxs\"]\ncategories: [\"微信小程序\"]\n---\n## 前言\nwxs文件是小程序中的逻辑文件，它和wxml结合使用。\n\n不同于js， wxs可以直接作用到视图层，而不需要进行视图层和逻辑层的setData数据交互；\n\n因为这个特性，wxs非常适合应用于优化小程序的频繁交互操作中；\n## 应用\n### 过滤器\n在IOS环境中wxs的运行速度要远高于js，在android中两者表现相当。\n\n使用wxs作为过滤器也可以一定幅度提升性能；让我们来看一个过滤器来了解其语法。\n\nwxs文件:\n```\nvar toDecimal2 = function (x) {\n  var f = parseFloat(x);\n  if (isNaN(f)) {\n    return '0.00'\n  }\n  var f = Math.round(x * 100) / 100;\n  var s = f.toString();\n  var rs = s.indexOf('.');\n  if (rs < 0) {\n    rs = s.length;\n    s += '.';\n  }\n  while (s.length <= rs + 2) {\n    s += '0';\n  }\n  return s;\n}\nmodule.exports = toDecimal2\n```\n上面的代码实现了数字保留两位小数的功能。\n\nwxml文件：\n```\n<wxs src=\"./filter.wxs\" module=\"filter\"></wxs>\n<text>{{filter(1)}}</text>\n```\n基本语法：在视图文件中通过wxs标签引入，module值是自定义命名，之后在wxml中可以通过filter调用方法\n\n上面的代码展示了 wxs的运行逻辑，让我们可以像函数一样调用wxs中的方法；\n\n下面再看一下wxs针对wxml页面事件中的表现。\n### 拖拽\n使用交互时（拖拽、上下滑动、左右侧滑等）如果依靠js逻辑层，会需要大量、频繁的数据通信。卡顿是不可避免的；\n\n使用wxs文件替代交互，不需要频繁使用setData导致实时大量的数据通信,从而节省性能。\n\n下面展示一个拖拽例子\n\nwxs文件：\n```\nfunction touchstart(event) {\n  var touch = event.touches[0] || event.changedTouches[0]\n  startX = touch.pageX\n  startY = touch.pageY\n}\n```\n事件参数event和js中的事件event内容中touches和changedTouches属性一致\n```\nfunction touchmove(event, ins) {\n  var touch = event.touches[0] || event.changedTouches[0]\n  ins.selectComponent('.div').setStyle({\n    left: startX - touch.pageX + 'px',\n    top: startY - touch.pageY  + 'px'\n  })\n}\n```\nins(第二个参数)为触发事件的视图层wxml上下文。可以查找页面所有元素并设置style,class(足够完成交互效果)\n\n注意：在参数event中同样有一个上下文实例instance；event中的实例instance作用范围是触发事件的元素内，而事件的ins参数作用范围是触发事件的组件内。\n```\nmodule.exports = {\n  touchstart: touchstart,\n  touchmove: touchmove,\n}\n```\n最后将方法抛出去，给wxml文件引用。\n\nwxml文件\n```\n<wxs module=\"action\" src=\"./movable.wxs\"></wxs> \n<view class=\"div\" bindtouchstart=\"{{action.touchstart}}\" bindtouchmove=\"{{action.touchmove}}\"></view>\n```\n上面的例子，解释了事件的基本交互用法。\n### 文件之中相互传参\n在事件交互中，少不了需要各个文件之中传递参数。 下面是比较常用的几种\n### wxs传参到js逻辑层\nwxs文件中：\n```\nvar dragStart = function (e, ins) {\n    ins.callMethod('callback','sldkfj')\n}\n```\njs文件中：\n```\ncallback(e){\n    console.log(e)\n}\n// sldkfj\n```\n使用callMethod方法，可以执行js中的callback方法。也可以实现传参；\n\n！！！callMethod不支持传回调函数*\n### js逻辑层传参到wxs文件\njs文件中：\n```\nhandler(e){\n    this.setData({a:1})\n}\n```\nwxml文件：\n```\n<wxs module=\"action\" src=\"./movable.wxs\"></wxs> \n<view change:prop=\"{{action.change}}\" prop=\"{{a}}\"></view>\n```\nwxs文件中：\n```\nchange(newValue,oldValue){}\n```\njs文件中的参数传递到wxs需要通过wxml文件中转。\n\njs文件触发handler事件，改变a的值之后，最新的a传递到wxml中。\n\nwxml中prop改变会触发wxs中的change事件。change中则会接收到最新prop值\n### wxs中获取dataset(wxs中获取wxml数据）\nwxs中代码\n```javascript\nvar dragStart = function (e) {\n  var index = e.currentTarget.dataset.index;\n  var index = e.instance.getDataset().index;\n}\n```\n上面有提到e.instance是当前触发事件的元素实例。\n\n所以e.instance.getDataset()获取的是当前触发事件的dataset数据集\n### 注意点\nwxs和js为不同的两个脚本语言。但是语法和es5基本相同，确又不支持es6语法； getState 在多元素交互中非常实用，欢迎探索。\n\n不知道是否是支持的语法可以跳转官网文档； [wxs运算符、语句、基础类库、数据类型](https://developers.weixin.qq.com/miniprogram/dev/reference/wxs/05statement.html \"wxs运算符、语句、基础类库、数据类型\")\n## 总结\n到此这篇关于微信小程序中wxs文件的一些妙用的文章就介绍到这了,更多相关微信小程序wxs文件妙用内容请搜索68HTML以前的文章或继续浏览下面的相关文章希望大家以后多多支持68HTML！\n","slug":"weChat/WeiXinXiaoChengXuZhongWXSWenJianDeYiXieMiaoYongFenXiang","published":1,"updated":"2022-05-07T07:06:06.941Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2vixl8r0014d8j0fuc52c1g","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>wxs文件是小程序中的逻辑文件，它和wxml结合使用。</p>\n<p>不同于js， wxs可以直接作用到视图层，而不需要进行视图层和逻辑层的setData数据交互；</p>\n<p>因为这个特性，wxs非常适合应用于优化小程序的频繁交互操作中；</p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><p>在IOS环境中wxs的运行速度要远高于js，在android中两者表现相当。</p>\n<p>使用wxs作为过滤器也可以一定幅度提升性能；让我们来看一个过滤器来了解其语法。</p>\n<p>wxs文件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var toDecimal2 = function (x) &#123;</span><br><span class=\"line\">  var f = parseFloat(x);</span><br><span class=\"line\">  if (isNaN(f)) &#123;</span><br><span class=\"line\">    return &#x27;0.00&#x27;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var f = Math.round(x * 100) / 100;</span><br><span class=\"line\">  var s = f.toString();</span><br><span class=\"line\">  var rs = s.indexOf(&#x27;.&#x27;);</span><br><span class=\"line\">  if (rs &lt; 0) &#123;</span><br><span class=\"line\">    rs = s.length;</span><br><span class=\"line\">    s += &#x27;.&#x27;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  while (s.length &lt;= rs + 2) &#123;</span><br><span class=\"line\">    s += &#x27;0&#x27;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = toDecimal2</span><br></pre></td></tr></table></figure>\n<p>上面的代码实现了数字保留两位小数的功能。</p>\n<p>wxml文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;wxs src=&quot;./filter.wxs&quot; module=&quot;filter&quot;&gt;&lt;/wxs&gt;</span><br><span class=\"line\">&lt;text&gt;&#123;&#123;filter(1)&#125;&#125;&lt;/text&gt;</span><br></pre></td></tr></table></figure>\n<p>基本语法：在视图文件中通过wxs标签引入，module值是自定义命名，之后在wxml中可以通过filter调用方法</p>\n<p>上面的代码展示了 wxs的运行逻辑，让我们可以像函数一样调用wxs中的方法；</p>\n<p>下面再看一下wxs针对wxml页面事件中的表现。</p>\n<h3 id=\"拖拽\"><a href=\"#拖拽\" class=\"headerlink\" title=\"拖拽\"></a>拖拽</h3><p>使用交互时（拖拽、上下滑动、左右侧滑等）如果依靠js逻辑层，会需要大量、频繁的数据通信。卡顿是不可避免的；</p>\n<p>使用wxs文件替代交互，不需要频繁使用setData导致实时大量的数据通信,从而节省性能。</p>\n<p>下面展示一个拖拽例子</p>\n<p>wxs文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function touchstart(event) &#123;</span><br><span class=\"line\">  var touch = event.touches[0] || event.changedTouches[0]</span><br><span class=\"line\">  startX = touch.pageX</span><br><span class=\"line\">  startY = touch.pageY</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事件参数event和js中的事件event内容中touches和changedTouches属性一致</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function touchmove(event, ins) &#123;</span><br><span class=\"line\">  var touch = event.touches[0] || event.changedTouches[0]</span><br><span class=\"line\">  ins.selectComponent(&#x27;.div&#x27;).setStyle(&#123;</span><br><span class=\"line\">    left: startX - touch.pageX + &#x27;px&#x27;,</span><br><span class=\"line\">    top: startY - touch.pageY  + &#x27;px&#x27;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ins(第二个参数)为触发事件的视图层wxml上下文。可以查找页面所有元素并设置style,class(足够完成交互效果)</p>\n<p>注意：在参数event中同样有一个上下文实例instance；event中的实例instance作用范围是触发事件的元素内，而事件的ins参数作用范围是触发事件的组件内。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  touchstart: touchstart,</span><br><span class=\"line\">  touchmove: touchmove,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后将方法抛出去，给wxml文件引用。</p>\n<p>wxml文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;wxs module=&quot;action&quot; src=&quot;./movable.wxs&quot;&gt;&lt;/wxs&gt; </span><br><span class=\"line\">&lt;view class=&quot;div&quot; bindtouchstart=&quot;&#123;&#123;action.touchstart&#125;&#125;&quot; bindtouchmove=&quot;&#123;&#123;action.touchmove&#125;&#125;&quot;&gt;&lt;/view&gt;</span><br></pre></td></tr></table></figure>\n<p>上面的例子，解释了事件的基本交互用法。</p>\n<h3 id=\"文件之中相互传参\"><a href=\"#文件之中相互传参\" class=\"headerlink\" title=\"文件之中相互传参\"></a>文件之中相互传参</h3><p>在事件交互中，少不了需要各个文件之中传递参数。 下面是比较常用的几种</p>\n<h3 id=\"wxs传参到js逻辑层\"><a href=\"#wxs传参到js逻辑层\" class=\"headerlink\" title=\"wxs传参到js逻辑层\"></a>wxs传参到js逻辑层</h3><p>wxs文件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var dragStart = function (e, ins) &#123;</span><br><span class=\"line\">    ins.callMethod(&#x27;callback&#x27;,&#x27;sldkfj&#x27;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>js文件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">callback(e)&#123;</span><br><span class=\"line\">    console.log(e)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// sldkfj</span><br></pre></td></tr></table></figure>\n<p>使用callMethod方法，可以执行js中的callback方法。也可以实现传参；</p>\n<p>！！！callMethod不支持传回调函数*</p>\n<h3 id=\"js逻辑层传参到wxs文件\"><a href=\"#js逻辑层传参到wxs文件\" class=\"headerlink\" title=\"js逻辑层传参到wxs文件\"></a>js逻辑层传参到wxs文件</h3><p>js文件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handler(e)&#123;</span><br><span class=\"line\">    this.setData(&#123;a:1&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>wxml文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;wxs module=&quot;action&quot; src=&quot;./movable.wxs&quot;&gt;&lt;/wxs&gt; </span><br><span class=\"line\">&lt;view change:prop=&quot;&#123;&#123;action.change&#125;&#125;&quot; prop=&quot;&#123;&#123;a&#125;&#125;&quot;&gt;&lt;/view&gt;</span><br></pre></td></tr></table></figure>\n<p>wxs文件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">change(newValue,oldValue)&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>js文件中的参数传递到wxs需要通过wxml文件中转。</p>\n<p>js文件触发handler事件，改变a的值之后，最新的a传递到wxml中。</p>\n<p>wxml中prop改变会触发wxs中的change事件。change中则会接收到最新prop值</p>\n<h3 id=\"wxs中获取dataset-wxs中获取wxml数据）\"><a href=\"#wxs中获取dataset-wxs中获取wxml数据）\" class=\"headerlink\" title=\"wxs中获取dataset(wxs中获取wxml数据）\"></a>wxs中获取dataset(wxs中获取wxml数据）</h3><p>wxs中代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dragStart = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> index = e.<span class=\"property\">currentTarget</span>.<span class=\"property\">dataset</span>.<span class=\"property\">index</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> index = e.<span class=\"property\">instance</span>.<span class=\"title function_\">getDataset</span>().<span class=\"property\">index</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面有提到e.instance是当前触发事件的元素实例。</p>\n<p>所以e.instance.getDataset()获取的是当前触发事件的dataset数据集</p>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><p>wxs和js为不同的两个脚本语言。但是语法和es5基本相同，确又不支持es6语法； getState 在多元素交互中非常实用，欢迎探索。</p>\n<p>不知道是否是支持的语法可以跳转官网文档； <a href=\"https://developers.weixin.qq.com/miniprogram/dev/reference/wxs/05statement.html\" title=\"wxs运算符、语句、基础类库、数据类型\">wxs运算符、语句、基础类库、数据类型</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到此这篇关于微信小程序中wxs文件的一些妙用的文章就介绍到这了,更多相关微信小程序wxs文件妙用内容请搜索68HTML以前的文章或继续浏览下面的相关文章希望大家以后多多支持68HTML！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>wxs文件是小程序中的逻辑文件，它和wxml结合使用。</p>\n<p>不同于js， wxs可以直接作用到视图层，而不需要进行视图层和逻辑层的setData数据交互；</p>\n<p>因为这个特性，wxs非常适合应用于优化小程序的频繁交互操作中；</p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><p>在IOS环境中wxs的运行速度要远高于js，在android中两者表现相当。</p>\n<p>使用wxs作为过滤器也可以一定幅度提升性能；让我们来看一个过滤器来了解其语法。</p>\n<p>wxs文件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var toDecimal2 = function (x) &#123;</span><br><span class=\"line\">  var f = parseFloat(x);</span><br><span class=\"line\">  if (isNaN(f)) &#123;</span><br><span class=\"line\">    return &#x27;0.00&#x27;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var f = Math.round(x * 100) / 100;</span><br><span class=\"line\">  var s = f.toString();</span><br><span class=\"line\">  var rs = s.indexOf(&#x27;.&#x27;);</span><br><span class=\"line\">  if (rs &lt; 0) &#123;</span><br><span class=\"line\">    rs = s.length;</span><br><span class=\"line\">    s += &#x27;.&#x27;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  while (s.length &lt;= rs + 2) &#123;</span><br><span class=\"line\">    s += &#x27;0&#x27;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = toDecimal2</span><br></pre></td></tr></table></figure>\n<p>上面的代码实现了数字保留两位小数的功能。</p>\n<p>wxml文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;wxs src=&quot;./filter.wxs&quot; module=&quot;filter&quot;&gt;&lt;/wxs&gt;</span><br><span class=\"line\">&lt;text&gt;&#123;&#123;filter(1)&#125;&#125;&lt;/text&gt;</span><br></pre></td></tr></table></figure>\n<p>基本语法：在视图文件中通过wxs标签引入，module值是自定义命名，之后在wxml中可以通过filter调用方法</p>\n<p>上面的代码展示了 wxs的运行逻辑，让我们可以像函数一样调用wxs中的方法；</p>\n<p>下面再看一下wxs针对wxml页面事件中的表现。</p>\n<h3 id=\"拖拽\"><a href=\"#拖拽\" class=\"headerlink\" title=\"拖拽\"></a>拖拽</h3><p>使用交互时（拖拽、上下滑动、左右侧滑等）如果依靠js逻辑层，会需要大量、频繁的数据通信。卡顿是不可避免的；</p>\n<p>使用wxs文件替代交互，不需要频繁使用setData导致实时大量的数据通信,从而节省性能。</p>\n<p>下面展示一个拖拽例子</p>\n<p>wxs文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function touchstart(event) &#123;</span><br><span class=\"line\">  var touch = event.touches[0] || event.changedTouches[0]</span><br><span class=\"line\">  startX = touch.pageX</span><br><span class=\"line\">  startY = touch.pageY</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事件参数event和js中的事件event内容中touches和changedTouches属性一致</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function touchmove(event, ins) &#123;</span><br><span class=\"line\">  var touch = event.touches[0] || event.changedTouches[0]</span><br><span class=\"line\">  ins.selectComponent(&#x27;.div&#x27;).setStyle(&#123;</span><br><span class=\"line\">    left: startX - touch.pageX + &#x27;px&#x27;,</span><br><span class=\"line\">    top: startY - touch.pageY  + &#x27;px&#x27;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ins(第二个参数)为触发事件的视图层wxml上下文。可以查找页面所有元素并设置style,class(足够完成交互效果)</p>\n<p>注意：在参数event中同样有一个上下文实例instance；event中的实例instance作用范围是触发事件的元素内，而事件的ins参数作用范围是触发事件的组件内。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  touchstart: touchstart,</span><br><span class=\"line\">  touchmove: touchmove,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后将方法抛出去，给wxml文件引用。</p>\n<p>wxml文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;wxs module=&quot;action&quot; src=&quot;./movable.wxs&quot;&gt;&lt;/wxs&gt; </span><br><span class=\"line\">&lt;view class=&quot;div&quot; bindtouchstart=&quot;&#123;&#123;action.touchstart&#125;&#125;&quot; bindtouchmove=&quot;&#123;&#123;action.touchmove&#125;&#125;&quot;&gt;&lt;/view&gt;</span><br></pre></td></tr></table></figure>\n<p>上面的例子，解释了事件的基本交互用法。</p>\n<h3 id=\"文件之中相互传参\"><a href=\"#文件之中相互传参\" class=\"headerlink\" title=\"文件之中相互传参\"></a>文件之中相互传参</h3><p>在事件交互中，少不了需要各个文件之中传递参数。 下面是比较常用的几种</p>\n<h3 id=\"wxs传参到js逻辑层\"><a href=\"#wxs传参到js逻辑层\" class=\"headerlink\" title=\"wxs传参到js逻辑层\"></a>wxs传参到js逻辑层</h3><p>wxs文件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var dragStart = function (e, ins) &#123;</span><br><span class=\"line\">    ins.callMethod(&#x27;callback&#x27;,&#x27;sldkfj&#x27;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>js文件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">callback(e)&#123;</span><br><span class=\"line\">    console.log(e)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// sldkfj</span><br></pre></td></tr></table></figure>\n<p>使用callMethod方法，可以执行js中的callback方法。也可以实现传参；</p>\n<p>！！！callMethod不支持传回调函数*</p>\n<h3 id=\"js逻辑层传参到wxs文件\"><a href=\"#js逻辑层传参到wxs文件\" class=\"headerlink\" title=\"js逻辑层传参到wxs文件\"></a>js逻辑层传参到wxs文件</h3><p>js文件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handler(e)&#123;</span><br><span class=\"line\">    this.setData(&#123;a:1&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>wxml文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;wxs module=&quot;action&quot; src=&quot;./movable.wxs&quot;&gt;&lt;/wxs&gt; </span><br><span class=\"line\">&lt;view change:prop=&quot;&#123;&#123;action.change&#125;&#125;&quot; prop=&quot;&#123;&#123;a&#125;&#125;&quot;&gt;&lt;/view&gt;</span><br></pre></td></tr></table></figure>\n<p>wxs文件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">change(newValue,oldValue)&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>js文件中的参数传递到wxs需要通过wxml文件中转。</p>\n<p>js文件触发handler事件，改变a的值之后，最新的a传递到wxml中。</p>\n<p>wxml中prop改变会触发wxs中的change事件。change中则会接收到最新prop值</p>\n<h3 id=\"wxs中获取dataset-wxs中获取wxml数据）\"><a href=\"#wxs中获取dataset-wxs中获取wxml数据）\" class=\"headerlink\" title=\"wxs中获取dataset(wxs中获取wxml数据）\"></a>wxs中获取dataset(wxs中获取wxml数据）</h3><p>wxs中代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dragStart = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> index = e.<span class=\"property\">currentTarget</span>.<span class=\"property\">dataset</span>.<span class=\"property\">index</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> index = e.<span class=\"property\">instance</span>.<span class=\"title function_\">getDataset</span>().<span class=\"property\">index</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面有提到e.instance是当前触发事件的元素实例。</p>\n<p>所以e.instance.getDataset()获取的是当前触发事件的dataset数据集</p>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><p>wxs和js为不同的两个脚本语言。但是语法和es5基本相同，确又不支持es6语法； getState 在多元素交互中非常实用，欢迎探索。</p>\n<p>不知道是否是支持的语法可以跳转官网文档； <a href=\"https://developers.weixin.qq.com/miniprogram/dev/reference/wxs/05statement.html\" title=\"wxs运算符、语句、基础类库、数据类型\">wxs运算符、语句、基础类库、数据类型</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到此这篇关于微信小程序中wxs文件的一些妙用的文章就介绍到这了,更多相关微信小程序wxs文件妙用内容请搜索68HTML以前的文章或继续浏览下面的相关文章希望大家以后多多支持68HTML！</p>\n"},{"title":"微信小程序中使用vant框架的具体步骤","date":"2022-04-07T02:13:41.000Z","_content":"\n> 本文主要介绍了微信小程序中使用vant框架的具体步骤，文中通过示例代码介绍的非常详细，具有一定的参考价值，感兴趣的小伙伴们可以参考一下\n\n1.说到vant框架相信大家应该并不陌生了吧，做过移动端开发的小伙伴们应该都知道它吧。\n\n2.Vant 是有赞前端团队开源的移动端组件库，于 2017 年开源，已持续维护 4 年时间。Vant 对内承载了有赞所有核心业务，对外服务十多万开发者，是业界主流的移动端组件库之一。\n\n3.我们废话不多说，直接进入今天的主题。我们该如何在微信小程序中去使用vant组件库呢！\n\n首先\n\n我们先打开vant weapp网站，这里我将网站地址给大家。Vant Weapp 网址\n\n大家打开网站后呢，点击快速上手。上面就有步骤教你如何在小程序中使用vant组件库。\n\n下面呢就给大家介绍一下我是如何去安装使用vant UI组件库的。\n\n## 1.打开我们小程序的项目目录，然后打开文件所在的位置。\n![](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/3a6bba8a-eedd-4d9b-9016-b08dbaf88be8.jpg \"\")\n## 2.初始化项目文件\n这里呢我通过 cmd 窗口初始化\n![](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/edcb41c1-9cb9-4846-b31c-56a658dee28c.jpg \"\")\n## 3.输入初始化项目的命令 \n```\nnpm init\n```\n此时你会发现你的目录多出了package.json文件\n![](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/619fe8db-1d60-416f-a7e9-4f7bdd922459.jpg \"\")\n## 4.安装依赖 \n4.1 通过 npm 安装vant/weapp\n```\nnpm i @vant/weapp -S --production\n```\n4.2 安装 miniprogram\n```\nnpm i miniprogram-sm-crypto --production\n```\n安装完毕后，你会发现你的目录中又多些文件。\n\n![](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/fa52cacf-d96f-44dc-a4bb-332e942ec79b.jpg \"\")\n4.3 修改 app.json\n\n将 app.json 中的 \"style\": \"v2\" 去除，原因是小程序的新版基础组件强行加上了许多样式，难以覆盖，不关闭将造成部分组件样式混乱。\n\n4.4 修改 project.config.json\n\n开发者工具创建的项目，miniprogramRoot 默认为 miniprogram，package.json 在其外部，npm 构建无法正常工作。需要手动在 project.config.json 内添加如下配置，使开发者工具可以正确索引到 npm 依赖的位置。\n```\n{\n  ...\n  \"setting\": {\n    ...\n    \"packNpmManually\": true,\n    \"packNpmRelationList\": [\n      {\n        \"packageJsonPath\": \"./package.json\",\n        \"miniprogramNpmDistDir\": \"./miniprogram/\"\n      }\n    ]\n  }\n}\n```\n4.5 构建 npm 我们点击左上角的工具栏\n![](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/d7bf3be1-ab82-457f-8182-05d12939e315.jpg \"\")\n构建成功后会出现下面的画面\n\n![](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/a96df185-2cf1-4518-ab52-cf747462ee3c.jpg \"\")\n\n4.6然后点击右上角的详情---本地设置----使用npm模块\n\n![](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/81b8c4f3-35f6-4d2c-a1fe-dfcf7867c523.jpg \"\")\n## 5.使用组件\n我这里在全局里面注册一个按钮，然后使用它。先去app.json中注册\n![](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/5a03d6cb-7582-4a02-94ca-2fc5f98b1ca2.jpg \"\")\n\n这里我随便找一个页面用一下这个按钮组件。\n\n![](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/46289e16-c4d9-4e18-9773-4769c049b6e2.jpg \"\")\n大家可以看到我使用成功了。\n\n> 到此这篇关于微信小程序中使用vant框架的具体步骤的文章就介绍到这了,更多相关小程序使用vant框架内容请搜索68HTML以前的文章或继续浏览下面的相关文章希望大家以后多多支持68HTML！\n\n","source":"_posts/weChat/WinXinXiaoChengXuZhongShiYongVantKuangJiaDeJuTiBuZhou.md","raw":"---\ntitle: 微信小程序中使用vant框架的具体步骤\ndate: 2022-04-07 10:13:41\ntags: [\"微信小程序\", \"Vant\"]\ncategories: [\"微信小程序\"]\n---\n\n> 本文主要介绍了微信小程序中使用vant框架的具体步骤，文中通过示例代码介绍的非常详细，具有一定的参考价值，感兴趣的小伙伴们可以参考一下\n\n1.说到vant框架相信大家应该并不陌生了吧，做过移动端开发的小伙伴们应该都知道它吧。\n\n2.Vant 是有赞前端团队开源的移动端组件库，于 2017 年开源，已持续维护 4 年时间。Vant 对内承载了有赞所有核心业务，对外服务十多万开发者，是业界主流的移动端组件库之一。\n\n3.我们废话不多说，直接进入今天的主题。我们该如何在微信小程序中去使用vant组件库呢！\n\n首先\n\n我们先打开vant weapp网站，这里我将网站地址给大家。Vant Weapp 网址\n\n大家打开网站后呢，点击快速上手。上面就有步骤教你如何在小程序中使用vant组件库。\n\n下面呢就给大家介绍一下我是如何去安装使用vant UI组件库的。\n\n## 1.打开我们小程序的项目目录，然后打开文件所在的位置。\n![](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/3a6bba8a-eedd-4d9b-9016-b08dbaf88be8.jpg \"\")\n## 2.初始化项目文件\n这里呢我通过 cmd 窗口初始化\n![](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/edcb41c1-9cb9-4846-b31c-56a658dee28c.jpg \"\")\n## 3.输入初始化项目的命令 \n```\nnpm init\n```\n此时你会发现你的目录多出了package.json文件\n![](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/619fe8db-1d60-416f-a7e9-4f7bdd922459.jpg \"\")\n## 4.安装依赖 \n4.1 通过 npm 安装vant/weapp\n```\nnpm i @vant/weapp -S --production\n```\n4.2 安装 miniprogram\n```\nnpm i miniprogram-sm-crypto --production\n```\n安装完毕后，你会发现你的目录中又多些文件。\n\n![](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/fa52cacf-d96f-44dc-a4bb-332e942ec79b.jpg \"\")\n4.3 修改 app.json\n\n将 app.json 中的 \"style\": \"v2\" 去除，原因是小程序的新版基础组件强行加上了许多样式，难以覆盖，不关闭将造成部分组件样式混乱。\n\n4.4 修改 project.config.json\n\n开发者工具创建的项目，miniprogramRoot 默认为 miniprogram，package.json 在其外部，npm 构建无法正常工作。需要手动在 project.config.json 内添加如下配置，使开发者工具可以正确索引到 npm 依赖的位置。\n```\n{\n  ...\n  \"setting\": {\n    ...\n    \"packNpmManually\": true,\n    \"packNpmRelationList\": [\n      {\n        \"packageJsonPath\": \"./package.json\",\n        \"miniprogramNpmDistDir\": \"./miniprogram/\"\n      }\n    ]\n  }\n}\n```\n4.5 构建 npm 我们点击左上角的工具栏\n![](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/d7bf3be1-ab82-457f-8182-05d12939e315.jpg \"\")\n构建成功后会出现下面的画面\n\n![](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/a96df185-2cf1-4518-ab52-cf747462ee3c.jpg \"\")\n\n4.6然后点击右上角的详情---本地设置----使用npm模块\n\n![](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/81b8c4f3-35f6-4d2c-a1fe-dfcf7867c523.jpg \"\")\n## 5.使用组件\n我这里在全局里面注册一个按钮，然后使用它。先去app.json中注册\n![](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/5a03d6cb-7582-4a02-94ca-2fc5f98b1ca2.jpg \"\")\n\n这里我随便找一个页面用一下这个按钮组件。\n\n![](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/46289e16-c4d9-4e18-9773-4769c049b6e2.jpg \"\")\n大家可以看到我使用成功了。\n\n> 到此这篇关于微信小程序中使用vant框架的具体步骤的文章就介绍到这了,更多相关小程序使用vant框架内容请搜索68HTML以前的文章或继续浏览下面的相关文章希望大家以后多多支持68HTML！\n\n","slug":"weChat/WinXinXiaoChengXuZhongShiYongVantKuangJiaDeJuTiBuZhou","published":1,"updated":"2022-04-07T07:02:29.003Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2vixl8s0017d8j07peics65","content":"<blockquote>\n<p>本文主要介绍了微信小程序中使用vant框架的具体步骤，文中通过示例代码介绍的非常详细，具有一定的参考价值，感兴趣的小伙伴们可以参考一下</p>\n</blockquote>\n<p>1.说到vant框架相信大家应该并不陌生了吧，做过移动端开发的小伙伴们应该都知道它吧。</p>\n<p>2.Vant 是有赞前端团队开源的移动端组件库，于 2017 年开源，已持续维护 4 年时间。Vant 对内承载了有赞所有核心业务，对外服务十多万开发者，是业界主流的移动端组件库之一。</p>\n<p>3.我们废话不多说，直接进入今天的主题。我们该如何在微信小程序中去使用vant组件库呢！</p>\n<p>首先</p>\n<p>我们先打开vant weapp网站，这里我将网站地址给大家。Vant Weapp 网址</p>\n<p>大家打开网站后呢，点击快速上手。上面就有步骤教你如何在小程序中使用vant组件库。</p>\n<p>下面呢就给大家介绍一下我是如何去安装使用vant UI组件库的。</p>\n<h2 id=\"1-打开我们小程序的项目目录，然后打开文件所在的位置。\"><a href=\"#1-打开我们小程序的项目目录，然后打开文件所在的位置。\" class=\"headerlink\" title=\"1.打开我们小程序的项目目录，然后打开文件所在的位置。\"></a>1.打开我们小程序的项目目录，然后打开文件所在的位置。</h2><p><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/3a6bba8a-eedd-4d9b-9016-b08dbaf88be8.jpg\"></p>\n<h2 id=\"2-初始化项目文件\"><a href=\"#2-初始化项目文件\" class=\"headerlink\" title=\"2.初始化项目文件\"></a>2.初始化项目文件</h2><p>这里呢我通过 cmd 窗口初始化<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/edcb41c1-9cb9-4846-b31c-56a658dee28c.jpg\"></p>\n<h2 id=\"3-输入初始化项目的命令\"><a href=\"#3-输入初始化项目的命令\" class=\"headerlink\" title=\"3.输入初始化项目的命令\"></a>3.输入初始化项目的命令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n<p>此时你会发现你的目录多出了package.json文件<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/619fe8db-1d60-416f-a7e9-4f7bdd922459.jpg\"></p>\n<h2 id=\"4-安装依赖\"><a href=\"#4-安装依赖\" class=\"headerlink\" title=\"4.安装依赖\"></a>4.安装依赖</h2><p>4.1 通过 npm 安装vant/weapp</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i @vant/weapp -S --production</span><br></pre></td></tr></table></figure>\n<p>4.2 安装 miniprogram</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i miniprogram-sm-crypto --production</span><br></pre></td></tr></table></figure>\n<p>安装完毕后，你会发现你的目录中又多些文件。</p>\n<p><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/fa52cacf-d96f-44dc-a4bb-332e942ec79b.jpg\"><br>4.3 修改 app.json</p>\n<p>将 app.json 中的 “style”: “v2” 去除，原因是小程序的新版基础组件强行加上了许多样式，难以覆盖，不关闭将造成部分组件样式混乱。</p>\n<p>4.4 修改 project.config.json</p>\n<p>开发者工具创建的项目，miniprogramRoot 默认为 miniprogram，package.json 在其外部，npm 构建无法正常工作。需要手动在 project.config.json 内添加如下配置，使开发者工具可以正确索引到 npm 依赖的位置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &quot;setting&quot;: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &quot;packNpmManually&quot;: true,</span><br><span class=\"line\">    &quot;packNpmRelationList&quot;: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;packageJsonPath&quot;: &quot;./package.json&quot;,</span><br><span class=\"line\">        &quot;miniprogramNpmDistDir&quot;: &quot;./miniprogram/&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4.5 构建 npm 我们点击左上角的工具栏<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/d7bf3be1-ab82-457f-8182-05d12939e315.jpg\"><br>构建成功后会出现下面的画面</p>\n<p><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/a96df185-2cf1-4518-ab52-cf747462ee3c.jpg\"></p>\n<p>4.6然后点击右上角的详情—本地设置—-使用npm模块</p>\n<p><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/81b8c4f3-35f6-4d2c-a1fe-dfcf7867c523.jpg\"></p>\n<h2 id=\"5-使用组件\"><a href=\"#5-使用组件\" class=\"headerlink\" title=\"5.使用组件\"></a>5.使用组件</h2><p>我这里在全局里面注册一个按钮，然后使用它。先去app.json中注册<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/5a03d6cb-7582-4a02-94ca-2fc5f98b1ca2.jpg\"></p>\n<p>这里我随便找一个页面用一下这个按钮组件。</p>\n<p><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/46289e16-c4d9-4e18-9773-4769c049b6e2.jpg\"><br>大家可以看到我使用成功了。</p>\n<blockquote>\n<p>到此这篇关于微信小程序中使用vant框架的具体步骤的文章就介绍到这了,更多相关小程序使用vant框架内容请搜索68HTML以前的文章或继续浏览下面的相关文章希望大家以后多多支持68HTML！</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本文主要介绍了微信小程序中使用vant框架的具体步骤，文中通过示例代码介绍的非常详细，具有一定的参考价值，感兴趣的小伙伴们可以参考一下</p>\n</blockquote>\n<p>1.说到vant框架相信大家应该并不陌生了吧，做过移动端开发的小伙伴们应该都知道它吧。</p>\n<p>2.Vant 是有赞前端团队开源的移动端组件库，于 2017 年开源，已持续维护 4 年时间。Vant 对内承载了有赞所有核心业务，对外服务十多万开发者，是业界主流的移动端组件库之一。</p>\n<p>3.我们废话不多说，直接进入今天的主题。我们该如何在微信小程序中去使用vant组件库呢！</p>\n<p>首先</p>\n<p>我们先打开vant weapp网站，这里我将网站地址给大家。Vant Weapp 网址</p>\n<p>大家打开网站后呢，点击快速上手。上面就有步骤教你如何在小程序中使用vant组件库。</p>\n<p>下面呢就给大家介绍一下我是如何去安装使用vant UI组件库的。</p>\n<h2 id=\"1-打开我们小程序的项目目录，然后打开文件所在的位置。\"><a href=\"#1-打开我们小程序的项目目录，然后打开文件所在的位置。\" class=\"headerlink\" title=\"1.打开我们小程序的项目目录，然后打开文件所在的位置。\"></a>1.打开我们小程序的项目目录，然后打开文件所在的位置。</h2><p><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/3a6bba8a-eedd-4d9b-9016-b08dbaf88be8.jpg\"></p>\n<h2 id=\"2-初始化项目文件\"><a href=\"#2-初始化项目文件\" class=\"headerlink\" title=\"2.初始化项目文件\"></a>2.初始化项目文件</h2><p>这里呢我通过 cmd 窗口初始化<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/edcb41c1-9cb9-4846-b31c-56a658dee28c.jpg\"></p>\n<h2 id=\"3-输入初始化项目的命令\"><a href=\"#3-输入初始化项目的命令\" class=\"headerlink\" title=\"3.输入初始化项目的命令\"></a>3.输入初始化项目的命令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n<p>此时你会发现你的目录多出了package.json文件<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/619fe8db-1d60-416f-a7e9-4f7bdd922459.jpg\"></p>\n<h2 id=\"4-安装依赖\"><a href=\"#4-安装依赖\" class=\"headerlink\" title=\"4.安装依赖\"></a>4.安装依赖</h2><p>4.1 通过 npm 安装vant/weapp</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i @vant/weapp -S --production</span><br></pre></td></tr></table></figure>\n<p>4.2 安装 miniprogram</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i miniprogram-sm-crypto --production</span><br></pre></td></tr></table></figure>\n<p>安装完毕后，你会发现你的目录中又多些文件。</p>\n<p><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/fa52cacf-d96f-44dc-a4bb-332e942ec79b.jpg\"><br>4.3 修改 app.json</p>\n<p>将 app.json 中的 “style”: “v2” 去除，原因是小程序的新版基础组件强行加上了许多样式，难以覆盖，不关闭将造成部分组件样式混乱。</p>\n<p>4.4 修改 project.config.json</p>\n<p>开发者工具创建的项目，miniprogramRoot 默认为 miniprogram，package.json 在其外部，npm 构建无法正常工作。需要手动在 project.config.json 内添加如下配置，使开发者工具可以正确索引到 npm 依赖的位置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &quot;setting&quot;: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &quot;packNpmManually&quot;: true,</span><br><span class=\"line\">    &quot;packNpmRelationList&quot;: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;packageJsonPath&quot;: &quot;./package.json&quot;,</span><br><span class=\"line\">        &quot;miniprogramNpmDistDir&quot;: &quot;./miniprogram/&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4.5 构建 npm 我们点击左上角的工具栏<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/d7bf3be1-ab82-457f-8182-05d12939e315.jpg\"><br>构建成功后会出现下面的画面</p>\n<p><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/a96df185-2cf1-4518-ab52-cf747462ee3c.jpg\"></p>\n<p>4.6然后点击右上角的详情—本地设置—-使用npm模块</p>\n<p><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/81b8c4f3-35f6-4d2c-a1fe-dfcf7867c523.jpg\"></p>\n<h2 id=\"5-使用组件\"><a href=\"#5-使用组件\" class=\"headerlink\" title=\"5.使用组件\"></a>5.使用组件</h2><p>我这里在全局里面注册一个按钮，然后使用它。先去app.json中注册<br><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/5a03d6cb-7582-4a02-94ca-2fc5f98b1ca2.jpg\"></p>\n<p>这里我随便找一个页面用一下这个按钮组件。</p>\n<p><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b239efaa-5152-4c7c-a688-7f7519bc8433/46289e16-c4d9-4e18-9773-4769c049b6e2.jpg\"><br>大家可以看到我使用成功了。</p>\n<blockquote>\n<p>到此这篇关于微信小程序中使用vant框架的具体步骤的文章就介绍到这了,更多相关小程序使用vant框架内容请搜索68HTML以前的文章或继续浏览下面的相关文章希望大家以后多多支持68HTML！</p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl2vixl890001d8j0b7la6zxs","category_id":"cl2vixl8c0003d8j0h2k11kg5","_id":"cl2vixl8i000cd8j0cmvhcj80"},{"post_id":"cl2vixl8h000ad8j0911e5jh3","category_id":"cl2vixl8c0003d8j0h2k11kg5","_id":"cl2vixl8l000hd8j00a96f97p"},{"post_id":"cl2vixl8b0002d8j0ef3v12ea","category_id":"cl2vixl8g0008d8j06no17mze","_id":"cl2vixl8n000ld8j0ackc8ozr"},{"post_id":"cl2vixl8h000bd8j0holo9s95","category_id":"cl2vixl8c0003d8j0h2k11kg5","_id":"cl2vixl8n000od8j00ut64v1x"},{"post_id":"cl2vixl8j000fd8j0g29obwxo","category_id":"cl2vixl8c0003d8j0h2k11kg5","_id":"cl2vixl8o000td8j01yinfl41"},{"post_id":"cl2vixl8e0005d8j06k45d1hs","category_id":"cl2vixl8g0008d8j06no17mze","_id":"cl2vixl8p000wd8j07n9fhvjz"},{"post_id":"cl2vixl8l000gd8j05meoay8t","category_id":"cl2vixl8c0003d8j0h2k11kg5","_id":"cl2vixl8q000zd8j0b4s10u8p"},{"post_id":"cl2vixl8e0006d8j0esbh5nrw","category_id":"cl2vixl8g0008d8j06no17mze","_id":"cl2vixl8q0012d8j0hjl3afuh"},{"post_id":"cl2vixl8f0007d8j07a88e0un","category_id":"cl2vixl8n000pd8j04t5i22wl","_id":"cl2vixl8r0015d8j00z38fglo"},{"post_id":"cl2vixl8m000kd8j0gupi0p3u","category_id":"cl2vixl8p000xd8j0fd9ta49s","_id":"cl2vixl8s0019d8j08t025o6o"},{"post_id":"cl2vixl8n000nd8j0h6ib2ye7","category_id":"cl2vixl8r0013d8j0c3es30sg","_id":"cl2vixl8t001ed8j0ato1cwr3"},{"post_id":"cl2vixl8o000sd8j0dscwgkrw","category_id":"cl2vixl8s001ad8j062zrb6fa","_id":"cl2vixl8t001jd8j0dr4k8t88"},{"post_id":"cl2vixl8p000vd8j097rf03k0","category_id":"cl2vixl8t001gd8j0hdh3arq6","_id":"cl2vixl8u001nd8j0aarteend"},{"post_id":"cl2vixl8p000yd8j0fpi5hpdw","category_id":"cl2vixl8s001ad8j062zrb6fa","_id":"cl2vixl8v001qd8j0hedqcyob"},{"post_id":"cl2vixl8q0011d8j063fzfhxb","category_id":"cl2vixl8t001gd8j0hdh3arq6","_id":"cl2vixl8v001td8j02oir2lrn"},{"post_id":"cl2vixl8r0014d8j0fuc52c1g","category_id":"cl2vixl8v001pd8j0btgm1wti","_id":"cl2vixl8w001yd8j08gk40pqx"},{"post_id":"cl2vixl8s0017d8j07peics65","category_id":"cl2vixl8v001pd8j0btgm1wti","_id":"cl2vixl8w0021d8j0ba9j75iq"}],"PostTag":[{"post_id":"cl2vixl890001d8j0b7la6zxs","tag_id":"cl2vixl8d0004d8j014jp254w","_id":"cl2vixl8n000md8j014eq238p"},{"post_id":"cl2vixl890001d8j0b7la6zxs","tag_id":"cl2vixl8g0009d8j0dozkbcje","_id":"cl2vixl8o000qd8j036qde2on"},{"post_id":"cl2vixl890001d8j0b7la6zxs","tag_id":"cl2vixl8i000ed8j08you604r","_id":"cl2vixl8p000ud8j01xl63o5p"},{"post_id":"cl2vixl8b0002d8j0ef3v12ea","tag_id":"cl2vixl8m000jd8j0domr2x5z","_id":"cl2vixl8s0018d8j03day2lo5"},{"post_id":"cl2vixl8b0002d8j0ef3v12ea","tag_id":"cl2vixl8o000rd8j0cbr11y0d","_id":"cl2vixl8s001bd8j03mf8g09g"},{"post_id":"cl2vixl8b0002d8j0ef3v12ea","tag_id":"cl2vixl8q0010d8j04fx2ejm1","_id":"cl2vixl8t001dd8j08q7019ug"},{"post_id":"cl2vixl8e0005d8j06k45d1hs","tag_id":"cl2vixl8m000jd8j0domr2x5z","_id":"cl2vixl8t001fd8j07q805shy"},{"post_id":"cl2vixl8e0006d8j0esbh5nrw","tag_id":"cl2vixl8m000jd8j0domr2x5z","_id":"cl2vixl8t001id8j013x31chm"},{"post_id":"cl2vixl8f0007d8j07a88e0un","tag_id":"cl2vixl8t001hd8j09g250xw7","_id":"cl2vixl8v001sd8j08dk0hi9u"},{"post_id":"cl2vixl8f0007d8j07a88e0un","tag_id":"cl2vixl8u001ld8j07ljm8axs","_id":"cl2vixl8v001vd8j0ev3m6jy7"},{"post_id":"cl2vixl8f0007d8j07a88e0un","tag_id":"cl2vixl8u001od8j0gxindh5z","_id":"cl2vixl8v001xd8j04ydm25fg"},{"post_id":"cl2vixl8h000ad8j0911e5jh3","tag_id":"cl2vixl8v001rd8j08u2vcrnx","_id":"cl2vixl8w0020d8j08qca3yte"},{"post_id":"cl2vixl8h000ad8j0911e5jh3","tag_id":"cl2vixl8v001wd8j04qg635zx","_id":"cl2vixl8x0022d8j0ak8d337k"},{"post_id":"cl2vixl8h000bd8j0holo9s95","tag_id":"cl2vixl8v001rd8j08u2vcrnx","_id":"cl2vixl8x0025d8j05v166tir"},{"post_id":"cl2vixl8h000bd8j0holo9s95","tag_id":"cl2vixl8v001wd8j04qg635zx","_id":"cl2vixl8x0026d8j0h9qd1paz"},{"post_id":"cl2vixl8j000fd8j0g29obwxo","tag_id":"cl2vixl8x0024d8j0ge0eb6jx","_id":"cl2vixl8y0029d8j004lu5qzx"},{"post_id":"cl2vixl8j000fd8j0g29obwxo","tag_id":"cl2vixl8v001wd8j04qg635zx","_id":"cl2vixl8y002ad8j0cs6u6hkg"},{"post_id":"cl2vixl8l000gd8j05meoay8t","tag_id":"cl2vixl8v001wd8j04qg635zx","_id":"cl2vixl8z002cd8j02hbfhghx"},{"post_id":"cl2vixl8m000kd8j0gupi0p3u","tag_id":"cl2vixl8v001wd8j04qg635zx","_id":"cl2vixl91002gd8j0ewppfcyf"},{"post_id":"cl2vixl8m000kd8j0gupi0p3u","tag_id":"cl2vixl8z002dd8j05c4k90c7","_id":"cl2vixl91002hd8j0fi349s96"},{"post_id":"cl2vixl8m000kd8j0gupi0p3u","tag_id":"cl2vixl91002ed8j0aq96fzpu","_id":"cl2vixl91002jd8j08xsha9x4"},{"post_id":"cl2vixl8n000nd8j0h6ib2ye7","tag_id":"cl2vixl91002fd8j0330f3f6t","_id":"cl2vixl92002md8j02zfvbm6x"},{"post_id":"cl2vixl8n000nd8j0h6ib2ye7","tag_id":"cl2vixl91002id8j01usy4p45","_id":"cl2vixl92002nd8j0fl9a8k7u"},{"post_id":"cl2vixl8n000nd8j0h6ib2ye7","tag_id":"cl2vixl91002kd8j06pewegxw","_id":"cl2vixl92002pd8j00ffc28b7"},{"post_id":"cl2vixl8o000sd8j0dscwgkrw","tag_id":"cl2vixl92002ld8j00d8k408q","_id":"cl2vixl92002sd8j0djzs2os2"},{"post_id":"cl2vixl8o000sd8j0dscwgkrw","tag_id":"cl2vixl92002od8j0hexa2jnn","_id":"cl2vixl92002td8j0640e603j"},{"post_id":"cl2vixl8o000sd8j0dscwgkrw","tag_id":"cl2vixl92002qd8j013ag7rrm","_id":"cl2vixl93002vd8j0e66udxhe"},{"post_id":"cl2vixl8p000vd8j097rf03k0","tag_id":"cl2vixl92002rd8j03lxj9z98","_id":"cl2vixl93002wd8j01brd890x"},{"post_id":"cl2vixl8p000yd8j0fpi5hpdw","tag_id":"cl2vixl92002ld8j00d8k408q","_id":"cl2vixl93002zd8j0a5g6bfeo"},{"post_id":"cl2vixl8p000yd8j0fpi5hpdw","tag_id":"cl2vixl93002xd8j08ho3cdao","_id":"cl2vixl930030d8j0b6akcxlc"},{"post_id":"cl2vixl8q0011d8j063fzfhxb","tag_id":"cl2vixl92002rd8j03lxj9z98","_id":"cl2vixl930032d8j0gypj5our"},{"post_id":"cl2vixl8r0014d8j0fuc52c1g","tag_id":"cl2vixl930031d8j0c6s8dh0g","_id":"cl2vixl940035d8j08pey8ptf"},{"post_id":"cl2vixl8r0014d8j0fuc52c1g","tag_id":"cl2vixl940033d8j0axq09656","_id":"cl2vixl940036d8j04i5b007l"},{"post_id":"cl2vixl8s0017d8j07peics65","tag_id":"cl2vixl930031d8j0c6s8dh0g","_id":"cl2vixl940038d8j04cb9bmhl"},{"post_id":"cl2vixl8s0017d8j07peics65","tag_id":"cl2vixl940037d8j03pbi82t3","_id":"cl2vixl940039d8j03icifedh"}],"Tag":[{"name":"Bcrypt","_id":"cl2vixl8d0004d8j014jp254w"},{"name":"Bcrypt加密","_id":"cl2vixl8g0009d8j0dozkbcje"},{"name":"Bcrypt在线加密","_id":"cl2vixl8i000ed8j08you604r"},{"name":"Hexo","_id":"cl2vixl8m000jd8j0domr2x5z"},{"name":"GitHub","_id":"cl2vixl8o000rd8j0cbr11y0d"},{"name":"GitHub Pages","_id":"cl2vixl8q0010d8j04fx2ejm1"},{"name":"javaScript","_id":"cl2vixl8t001hd8j09g250xw7"},{"name":"async","_id":"cl2vixl8u001ld8j07ljm8axs"},{"name":"await","_id":"cl2vixl8u001od8j0gxindh5z"},{"name":"JS相关","_id":"cl2vixl8v001rd8j08u2vcrnx"},{"name":"JavaScript","_id":"cl2vixl8v001wd8j04qg635zx"},{"name":"Js相关","_id":"cl2vixl8x0024d8j0ge0eb6jx"},{"name":"js防抖","_id":"cl2vixl8z002dd8j05c4k90c7"},{"name":"js节流","_id":"cl2vixl91002ed8j0aq96fzpu"},{"name":"md","_id":"cl2vixl91002fd8j0330f3f6t"},{"name":"md基本语法","_id":"cl2vixl91002id8j01usy4p45"},{"name":"md入门","_id":"cl2vixl91002kd8j06pewegxw"},{"name":"Nuxt","_id":"cl2vixl92002ld8j00d8k408q"},{"name":"asyncData","_id":"cl2vixl92002od8j0hexa2jnn"},{"name":"asyncData批处理","_id":"cl2vixl92002qd8j013ag7rrm"},{"name":"typescript","_id":"cl2vixl92002rd8j03lxj9z98"},{"name":"NuxtJs报错","_id":"cl2vixl93002xd8j08ho3cdao"},{"name":"微信小程序","_id":"cl2vixl930031d8j0c6s8dh0g"},{"name":"wxs","_id":"cl2vixl940033d8j0axq09656"},{"name":"Vant","_id":"cl2vixl940037d8j03pbi82t3"}]}}